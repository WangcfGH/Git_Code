// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: online.proto

#include "online.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace online {
class ON_LINE_DATADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ON_LINE_DATA>
      _instance;
} _ON_LINE_DATA_default_instance_;
class ON_LINE_REWARDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ON_LINE_REWARD>
      _instance;
} _ON_LINE_REWARD_default_instance_;
}  // namespace online
namespace protobuf_online_2eproto {
void InitDefaultsON_LINE_DATAImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::online::_ON_LINE_DATA_default_instance_;
    new (ptr) ::online::ON_LINE_DATA();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::online::ON_LINE_DATA::InitAsDefaultInstance();
}

void InitDefaultsON_LINE_DATA() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsON_LINE_DATAImpl);
}

void InitDefaultsON_LINE_REWARDImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_online_2eproto::InitDefaultsON_LINE_DATA();
  {
    void* ptr = &::online::_ON_LINE_REWARD_default_instance_;
    new (ptr) ::online::ON_LINE_REWARD();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::online::ON_LINE_REWARD::InitAsDefaultInstance();
}

void InitDefaultsON_LINE_REWARD() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsON_LINE_REWARDImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_DATA, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_DATA, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_DATA, online_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_DATA, condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_DATA, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_DATA, already_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_DATA, config_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_REWARD, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_REWARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_REWARD, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_REWARD, shared_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_REWARD, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_REWARD, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::online::ON_LINE_REWARD, user_data_),
  1,
  2,
  3,
  4,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::online::ON_LINE_DATA)},
  { 17, 27, sizeof(::online::ON_LINE_REWARD)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::online::_ON_LINE_DATA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::online::_ON_LINE_REWARD_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "online.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014online.proto\022\006online\"\177\n\014ON_LINE_DATA\022\017"
      "\n\007user_id\030\001 \002(\005\022\023\n\013online_time\030\002 \001(\005\022\021\n\t"
      "condition\030\003 \001(\005\022\016\n\006reward\030\004 \001(\005\022\026\n\016alrea"
      "dy_reward\030\005 \001(\005\022\016\n\006config\030\006 \001(\t\"z\n\016ON_LI"
      "NE_REWARD\022\017\n\007user_id\030\001 \002(\005\022\016\n\006shared\030\002 \001"
      "(\005\022\016\n\006result\030\003 \001(\005\022\016\n\006reward\030\004 \001(\005\022\'\n\tus"
      "er_data\030\005 \001(\0132\024.online.ON_LINE_DATA"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "online.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_online_2eproto
namespace online {

// ===================================================================

void ON_LINE_DATA::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ON_LINE_DATA::kUserIdFieldNumber;
const int ON_LINE_DATA::kOnlineTimeFieldNumber;
const int ON_LINE_DATA::kConditionFieldNumber;
const int ON_LINE_DATA::kRewardFieldNumber;
const int ON_LINE_DATA::kAlreadyRewardFieldNumber;
const int ON_LINE_DATA::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ON_LINE_DATA::ON_LINE_DATA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_online_2eproto::InitDefaultsON_LINE_DATA();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:online.ON_LINE_DATA)
}
ON_LINE_DATA::ON_LINE_DATA(const ON_LINE_DATA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_config()) {
    config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&already_reward_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(already_reward_));
  // @@protoc_insertion_point(copy_constructor:online.ON_LINE_DATA)
}

void ON_LINE_DATA::SharedCtor() {
  _cached_size_ = 0;
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&already_reward_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(already_reward_));
}

ON_LINE_DATA::~ON_LINE_DATA() {
  // @@protoc_insertion_point(destructor:online.ON_LINE_DATA)
  SharedDtor();
}

void ON_LINE_DATA::SharedDtor() {
  config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ON_LINE_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ON_LINE_DATA::descriptor() {
  ::protobuf_online_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_online_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ON_LINE_DATA& ON_LINE_DATA::default_instance() {
  ::protobuf_online_2eproto::InitDefaultsON_LINE_DATA();
  return *internal_default_instance();
}

ON_LINE_DATA* ON_LINE_DATA::New(::google::protobuf::Arena* arena) const {
  ON_LINE_DATA* n = new ON_LINE_DATA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ON_LINE_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:online.ON_LINE_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!config_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*config_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&already_reward_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(already_reward_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ON_LINE_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:online.ON_LINE_DATA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 online_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_online_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 condition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_condition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reward = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 already_reward = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_already_reward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config().data(), static_cast<int>(this->config().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "online.ON_LINE_DATA.config");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:online.ON_LINE_DATA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:online.ON_LINE_DATA)
  return false;
#undef DO_
}

void ON_LINE_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:online.ON_LINE_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional int32 online_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->online_time(), output);
  }

  // optional int32 condition = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->condition(), output);
  }

  // optional int32 reward = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward(), output);
  }

  // optional int32 already_reward = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->already_reward(), output);
  }

  // optional string config = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config().data(), static_cast<int>(this->config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "online.ON_LINE_DATA.config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:online.ON_LINE_DATA)
}

::google::protobuf::uint8* ON_LINE_DATA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:online.ON_LINE_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // optional int32 online_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->online_time(), target);
  }

  // optional int32 condition = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->condition(), target);
  }

  // optional int32 reward = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward(), target);
  }

  // optional int32 already_reward = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->already_reward(), target);
  }

  // optional string config = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config().data(), static_cast<int>(this->config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "online.ON_LINE_DATA.config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->config(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:online.ON_LINE_DATA)
  return target;
}

size_t ON_LINE_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:online.ON_LINE_DATA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }
  // optional string config = 6;
  if (has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional int32 online_time = 2;
    if (has_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_time());
    }

    // optional int32 condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition());
    }

    // optional int32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // optional int32 already_reward = 5;
    if (has_already_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_reward());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ON_LINE_DATA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:online.ON_LINE_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  const ON_LINE_DATA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ON_LINE_DATA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:online.ON_LINE_DATA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:online.ON_LINE_DATA)
    MergeFrom(*source);
  }
}

void ON_LINE_DATA::MergeFrom(const ON_LINE_DATA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:online.ON_LINE_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_config();
      config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      online_time_ = from.online_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      condition_ = from.condition_;
    }
    if (cached_has_bits & 0x00000010u) {
      reward_ = from.reward_;
    }
    if (cached_has_bits & 0x00000020u) {
      already_reward_ = from.already_reward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ON_LINE_DATA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:online.ON_LINE_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ON_LINE_DATA::CopyFrom(const ON_LINE_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:online.ON_LINE_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ON_LINE_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ON_LINE_DATA::Swap(ON_LINE_DATA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ON_LINE_DATA::InternalSwap(ON_LINE_DATA* other) {
  using std::swap;
  config_.Swap(&other->config_);
  swap(user_id_, other->user_id_);
  swap(online_time_, other->online_time_);
  swap(condition_, other->condition_);
  swap(reward_, other->reward_);
  swap(already_reward_, other->already_reward_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ON_LINE_DATA::GetMetadata() const {
  protobuf_online_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_online_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ON_LINE_REWARD::InitAsDefaultInstance() {
  ::online::_ON_LINE_REWARD_default_instance_._instance.get_mutable()->user_data_ = const_cast< ::online::ON_LINE_DATA*>(
      ::online::ON_LINE_DATA::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ON_LINE_REWARD::kUserIdFieldNumber;
const int ON_LINE_REWARD::kSharedFieldNumber;
const int ON_LINE_REWARD::kResultFieldNumber;
const int ON_LINE_REWARD::kRewardFieldNumber;
const int ON_LINE_REWARD::kUserDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ON_LINE_REWARD::ON_LINE_REWARD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_online_2eproto::InitDefaultsON_LINE_REWARD();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:online.ON_LINE_REWARD)
}
ON_LINE_REWARD::ON_LINE_REWARD(const ON_LINE_REWARD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_data()) {
    user_data_ = new ::online::ON_LINE_DATA(*from.user_data_);
  } else {
    user_data_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:online.ON_LINE_REWARD)
}

void ON_LINE_REWARD::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&user_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&user_data_)) + sizeof(reward_));
}

ON_LINE_REWARD::~ON_LINE_REWARD() {
  // @@protoc_insertion_point(destructor:online.ON_LINE_REWARD)
  SharedDtor();
}

void ON_LINE_REWARD::SharedDtor() {
  if (this != internal_default_instance()) delete user_data_;
}

void ON_LINE_REWARD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ON_LINE_REWARD::descriptor() {
  ::protobuf_online_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_online_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ON_LINE_REWARD& ON_LINE_REWARD::default_instance() {
  ::protobuf_online_2eproto::InitDefaultsON_LINE_REWARD();
  return *internal_default_instance();
}

ON_LINE_REWARD* ON_LINE_REWARD::New(::google::protobuf::Arena* arena) const {
  ON_LINE_REWARD* n = new ON_LINE_REWARD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ON_LINE_REWARD::Clear() {
// @@protoc_insertion_point(message_clear_start:online.ON_LINE_REWARD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_data_ != NULL);
    user_data_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(reward_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ON_LINE_REWARD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:online.ON_LINE_REWARD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shared = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_shared();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reward = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .online.ON_LINE_DATA user_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:online.ON_LINE_REWARD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:online.ON_LINE_REWARD)
  return false;
#undef DO_
}

void ON_LINE_REWARD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:online.ON_LINE_REWARD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional int32 shared = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shared(), output);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional int32 reward = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward(), output);
  }

  // optional .online.ON_LINE_DATA user_data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->user_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:online.ON_LINE_REWARD)
}

::google::protobuf::uint8* ON_LINE_REWARD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:online.ON_LINE_REWARD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // optional int32 shared = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shared(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional int32 reward = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward(), target);
  }

  // optional .online.ON_LINE_DATA user_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->user_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:online.ON_LINE_REWARD)
  return target;
}

size_t ON_LINE_REWARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:online.ON_LINE_REWARD)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }
  // optional .online.ON_LINE_DATA user_data = 5;
  if (has_user_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->user_data_);
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional int32 shared = 2;
    if (has_shared()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shared());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ON_LINE_REWARD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:online.ON_LINE_REWARD)
  GOOGLE_DCHECK_NE(&from, this);
  const ON_LINE_REWARD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ON_LINE_REWARD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:online.ON_LINE_REWARD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:online.ON_LINE_REWARD)
    MergeFrom(*source);
  }
}

void ON_LINE_REWARD::MergeFrom(const ON_LINE_REWARD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:online.ON_LINE_REWARD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user_data()->::online::ON_LINE_DATA::MergeFrom(from.user_data());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      shared_ = from.shared_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000010u) {
      reward_ = from.reward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ON_LINE_REWARD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:online.ON_LINE_REWARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ON_LINE_REWARD::CopyFrom(const ON_LINE_REWARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:online.ON_LINE_REWARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ON_LINE_REWARD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_user_data()) {
    if (!this->user_data_->IsInitialized()) return false;
  }
  return true;
}

void ON_LINE_REWARD::Swap(ON_LINE_REWARD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ON_LINE_REWARD::InternalSwap(ON_LINE_REWARD* other) {
  using std::swap;
  swap(user_data_, other->user_data_);
  swap(user_id_, other->user_id_);
  swap(shared_, other->shared_);
  swap(result_, other->result_);
  swap(reward_, other->reward_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ON_LINE_REWARD::GetMetadata() const {
  protobuf_online_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_online_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace online

// @@protoc_insertion_point(global_scope)
