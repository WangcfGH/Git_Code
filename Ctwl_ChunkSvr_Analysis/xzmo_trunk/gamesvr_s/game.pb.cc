// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace game {
class PB_SENDER_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_SENDER_INFO>
      _instance;
} _PB_SENDER_INFO_default_instance_;
class PB_TING_THROW_CARDSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_TING_THROW_CARDS>
      _instance;
} _PB_TING_THROW_CARDS_default_instance_;
class PB_MJ_START_DATADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_MJ_START_DATA>
      _instance;
} _PB_MJ_START_DATA_default_instance_;
class PB_CARDS_UNITDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_CARDS_UNIT>
      _instance;
} _PB_CARDS_UNIT_default_instance_;
class PB_CARDS_UNIT_CHAIRDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_CARDS_UNIT_CHAIR>
      _instance;
} _PB_CARDS_UNIT_CHAIR_default_instance_;
class PB_INT_CHAIRDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_INT_CHAIR>
      _instance;
} _PB_INT_CHAIR_default_instance_;
class PB_MJ_PLAY_DATADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_MJ_PLAY_DATA>
      _instance;
} _PB_MJ_PLAY_DATA_default_instance_;
class PB_GAME_TABLE_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_GAME_TABLE_INFO>
      _instance;
} _PB_GAME_TABLE_INFO_default_instance_;
class PB_SOLOPLAYER_HEADDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_SOLOPLAYER_HEAD>
      _instance;
} _PB_SOLOPLAYER_HEAD_default_instance_;
class PB_SOLO_PLAYERDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_SOLO_PLAYER>
      _instance;
} _PB_SOLO_PLAYER_default_instance_;
class PB_CARDSLAYDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_CARDSLAY>
      _instance;
} _PB_CARDSLAY_default_instance_;
class PB_CARD_TING_DETAILDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_CARD_TING_DETAIL>
      _instance;
} _PB_CARD_TING_DETAIL_default_instance_;
class PB_GAME_RETREAT_TABLE_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_GAME_RETREAT_TABLE_INFO>
      _instance;
} _PB_GAME_RETREAT_TABLE_INFO_default_instance_;
class PB_NTF_SOMEONE_BUHUADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_NTF_SOMEONE_BUHUA>
      _instance;
} _PB_NTF_SOMEONE_BUHUA_default_instance_;
class QueryFlauntInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryFlauntInfo>
      _instance;
} _QueryFlauntInfo_default_instance_;
class UpdateFlauntBoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateFlauntBout>
      _instance;
} _UpdateFlauntBout_default_instance_;
}  // namespace game
namespace protobuf_game_2eproto {
void InitDefaultsPB_SENDER_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game::_PB_SENDER_INFO_default_instance_;
    new (ptr) ::game::PB_SENDER_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_SENDER_INFO::InitAsDefaultInstance();
}

void InitDefaultsPB_SENDER_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_SENDER_INFOImpl);
}

void InitDefaultsPB_TING_THROW_CARDSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPB_SENDER_INFO();
  {
    void* ptr = &::game::_PB_TING_THROW_CARDS_default_instance_;
    new (ptr) ::game::PB_TING_THROW_CARDS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_TING_THROW_CARDS::InitAsDefaultInstance();
}

void InitDefaultsPB_TING_THROW_CARDS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_TING_THROW_CARDSImpl);
}

void InitDefaultsPB_MJ_START_DATAImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game::_PB_MJ_START_DATA_default_instance_;
    new (ptr) ::game::PB_MJ_START_DATA();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_MJ_START_DATA::InitAsDefaultInstance();
}

void InitDefaultsPB_MJ_START_DATA() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_MJ_START_DATAImpl);
}

void InitDefaultsPB_CARDS_UNITImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game::_PB_CARDS_UNIT_default_instance_;
    new (ptr) ::game::PB_CARDS_UNIT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_CARDS_UNIT::InitAsDefaultInstance();
}

void InitDefaultsPB_CARDS_UNIT() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_CARDS_UNITImpl);
}

void InitDefaultsPB_CARDS_UNIT_CHAIRImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPB_CARDS_UNIT();
  {
    void* ptr = &::game::_PB_CARDS_UNIT_CHAIR_default_instance_;
    new (ptr) ::game::PB_CARDS_UNIT_CHAIR();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_CARDS_UNIT_CHAIR::InitAsDefaultInstance();
}

void InitDefaultsPB_CARDS_UNIT_CHAIR() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_CARDS_UNIT_CHAIRImpl);
}

void InitDefaultsPB_INT_CHAIRImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game::_PB_INT_CHAIR_default_instance_;
    new (ptr) ::game::PB_INT_CHAIR();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_INT_CHAIR::InitAsDefaultInstance();
}

void InitDefaultsPB_INT_CHAIR() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_INT_CHAIRImpl);
}

void InitDefaultsPB_MJ_PLAY_DATAImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPB_CARDS_UNIT_CHAIR();
  protobuf_game_2eproto::InitDefaultsPB_INT_CHAIR();
  {
    void* ptr = &::game::_PB_MJ_PLAY_DATA_default_instance_;
    new (ptr) ::game::PB_MJ_PLAY_DATA();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_MJ_PLAY_DATA::InitAsDefaultInstance();
}

void InitDefaultsPB_MJ_PLAY_DATA() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_MJ_PLAY_DATAImpl);
}

void InitDefaultsPB_GAME_TABLE_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_xygmj_2eproto::InitDefaultsMJTableInfo();
  protobuf_game_2eproto::InitDefaultsPB_MJ_START_DATA();
  protobuf_game_2eproto::InitDefaultsPB_MJ_PLAY_DATA();
  protobuf_game_2eproto::InitDefaultsPB_CARD_TING_DETAIL();
  {
    void* ptr = &::game::_PB_GAME_TABLE_INFO_default_instance_;
    new (ptr) ::game::PB_GAME_TABLE_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_GAME_TABLE_INFO::InitAsDefaultInstance();
}

void InitDefaultsPB_GAME_TABLE_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_GAME_TABLE_INFOImpl);
}

void InitDefaultsPB_SOLOPLAYER_HEADImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game::_PB_SOLOPLAYER_HEAD_default_instance_;
    new (ptr) ::game::PB_SOLOPLAYER_HEAD();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_SOLOPLAYER_HEAD::InitAsDefaultInstance();
}

void InitDefaultsPB_SOLOPLAYER_HEAD() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_SOLOPLAYER_HEADImpl);
}

void InitDefaultsPB_SOLO_PLAYERImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game::_PB_SOLO_PLAYER_default_instance_;
    new (ptr) ::game::PB_SOLO_PLAYER();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_SOLO_PLAYER::InitAsDefaultInstance();
}

void InitDefaultsPB_SOLO_PLAYER() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_SOLO_PLAYERImpl);
}

void InitDefaultsPB_CARDSLAYImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game::_PB_CARDSLAY_default_instance_;
    new (ptr) ::game::PB_CARDSLAY();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_CARDSLAY::InitAsDefaultInstance();
}

void InitDefaultsPB_CARDSLAY() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_CARDSLAYImpl);
}

void InitDefaultsPB_CARD_TING_DETAILImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPB_CARDSLAY();
  {
    void* ptr = &::game::_PB_CARD_TING_DETAIL_default_instance_;
    new (ptr) ::game::PB_CARD_TING_DETAIL();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_CARD_TING_DETAIL::InitAsDefaultInstance();
}

void InitDefaultsPB_CARD_TING_DETAIL() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_CARD_TING_DETAILImpl);
}

void InitDefaultsPB_GAME_RETREAT_TABLE_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPB_SOLOPLAYER_HEAD();
  protobuf_game_2eproto::InitDefaultsPB_SOLO_PLAYER();
  protobuf_game_2eproto::InitDefaultsPB_GAME_TABLE_INFO();
  {
    void* ptr = &::game::_PB_GAME_RETREAT_TABLE_INFO_default_instance_;
    new (ptr) ::game::PB_GAME_RETREAT_TABLE_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_GAME_RETREAT_TABLE_INFO::InitAsDefaultInstance();
}

void InitDefaultsPB_GAME_RETREAT_TABLE_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_GAME_RETREAT_TABLE_INFOImpl);
}

void InitDefaultsPB_NTF_SOMEONE_BUHUAImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_game_2eproto::InitDefaultsPB_INT_CHAIR();
  {
    void* ptr = &::game::_PB_NTF_SOMEONE_BUHUA_default_instance_;
    new (ptr) ::game::PB_NTF_SOMEONE_BUHUA();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::PB_NTF_SOMEONE_BUHUA::InitAsDefaultInstance();
}

void InitDefaultsPB_NTF_SOMEONE_BUHUA() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPB_NTF_SOMEONE_BUHUAImpl);
}

void InitDefaultsQueryFlauntInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game::_QueryFlauntInfo_default_instance_;
    new (ptr) ::game::QueryFlauntInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::QueryFlauntInfo::InitAsDefaultInstance();
}

void InitDefaultsQueryFlauntInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryFlauntInfoImpl);
}

void InitDefaultsUpdateFlauntBoutImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::game::_UpdateFlauntBout_default_instance_;
    new (ptr) ::game::UpdateFlauntBout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::UpdateFlauntBout::InitAsDefaultInstance();
}

void InitDefaultsUpdateFlauntBout() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateFlauntBoutImpl);
}

::google::protobuf::Metadata file_level_metadata[16];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SENDER_INFO, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SENDER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SENDER_INFO, send_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SENDER_INFO, send_chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SENDER_INFO, send_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SENDER_INFO, sz_hardid_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, table_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, chair_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, passive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, cards_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, cards_cout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, card_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_TING_THROW_CARDS, sender_info_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nboutcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nbasedeposit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nbasescore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nbanker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nbankerhold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, ncurrentchair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, dwstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, dwcurrentflags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nfirstcatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nfirstthrow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nthrowwait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nmaxautothrow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nentrustwait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, bneeddeposit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, bforbiddesert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, bquickcatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, ballowchi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, bangangshow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, bjokersortin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, bbaibannosort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nbeginno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, njokerno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, njokerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, njokerid2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nfanid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, ntailtaken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, ncurrentcatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, npgchwait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, npgchwaitex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, szserialno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, ndices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nyqwautoplaywait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, nprehuonefeng13bkflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_START_DATA, naddgainsscore_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  0,
  ~0u,
  30,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARDS_UNIT, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARDS_UNIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARDS_UNIT, ncardchair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARDS_UNIT, ncardids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARDS_UNIT_CHAIR, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARDS_UNIT_CHAIR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARDS_UNIT_CHAIR, chair_cardsunit_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_INT_CHAIR, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_INT_CHAIR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_INT_CHAIR, ncardids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, pengcards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, npengcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, chicards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, nchicount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, mngangcards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, nmngangcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, angangcards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, nangangcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, pngangcards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, npngangcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, noutcards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, noutcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, nhuacards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_MJ_PLAY_DATA, nhuacount_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, main_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, startinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, playdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, dwgameflags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, ncurrentleftoperatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, dwuserstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, ncardscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, nchaircards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, naskexit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, nresultdiff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, ntotalresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, dwpgchflags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, nqghflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, nqghid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, nqghchair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, tingdetail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, ntingcardsdxxw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, dwtimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, game_flags2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_TABLE_INFO, bao_ting_),
  0,
  1,
  2,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  8,
  3,
  ~0u,
  9,
  10,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLOPLAYER_HEAD, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLOPLAYER_HEAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLOPLAYER_HEAD, nroomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLOPLAYER_HEAD, ntableno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLOPLAYER_HEAD, nplayercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLOPLAYER_HEAD, dwuserstatus_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nusertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, ntableno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nchairno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nnicksex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nportrait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nnetspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nclothingid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, ndeposit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nplayerlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nbreakoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nloss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nstandoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, nbout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, ntimecost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, brefuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, szusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_SOLO_PLAYER, sznickname_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARDSLAY, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARDSLAY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARDSLAY, cardslay_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARD_TING_DETAIL, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARD_TING_DETAIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARD_TING_DETAIL, dwflags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARD_TING_DETAIL, nchairno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARD_TING_DETAIL, nthrowcardsting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARD_TING_DETAIL, nthrowcardstinglays_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_CARD_TING_DETAIL, nthrowcardstingremain_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_RETREAT_TABLE_INFO, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_RETREAT_TABLE_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_RETREAT_TABLE_INFO, solo_player_head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_RETREAT_TABLE_INFO, solo_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_GAME_RETREAT_TABLE_INFO, tableinfo_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_NTF_SOMEONE_BUHUA, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_NTF_SOMEONE_BUHUA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_NTF_SOMEONE_BUHUA, nhuacards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::PB_NTF_SOMEONE_BUHUA, nhuacount_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::QueryFlauntInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::QueryFlauntInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::QueryFlauntInfo, nuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::QueryFlauntInfo, nrepeatwinbout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::QueryFlauntInfo, nrepeatlosebout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::QueryFlauntInfo, nreserved_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::UpdateFlauntBout, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::UpdateFlauntBout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::UpdateFlauntBout, nuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::UpdateFlauntBout, bwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::UpdateFlauntBout, nreserved_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::game::PB_SENDER_INFO)},
  { 13, 27, sizeof(::game::PB_TING_THROW_CARDS)},
  { 36, 75, sizeof(::game::PB_MJ_START_DATA)},
  { 109, 116, sizeof(::game::PB_CARDS_UNIT)},
  { 118, 124, sizeof(::game::PB_CARDS_UNIT_CHAIR)},
  { 125, 131, sizeof(::game::PB_INT_CHAIR)},
  { 132, 151, sizeof(::game::PB_MJ_PLAY_DATA)},
  { 165, 190, sizeof(::game::PB_GAME_TABLE_INFO)},
  { 210, 219, sizeof(::game::PB_SOLOPLAYER_HEAD)},
  { 223, 249, sizeof(::game::PB_SOLO_PLAYER)},
  { 270, 276, sizeof(::game::PB_CARDSLAY)},
  { 277, 287, sizeof(::game::PB_CARD_TING_DETAIL)},
  { 292, 300, sizeof(::game::PB_GAME_RETREAT_TABLE_INFO)},
  { 303, 310, sizeof(::game::PB_NTF_SOMEONE_BUHUA)},
  { 312, 321, sizeof(::game::QueryFlauntInfo)},
  { 325, 333, sizeof(::game::UpdateFlauntBout)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_SENDER_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_TING_THROW_CARDS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_MJ_START_DATA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_CARDS_UNIT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_CARDS_UNIT_CHAIR_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_INT_CHAIR_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_MJ_PLAY_DATA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_GAME_TABLE_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_SOLOPLAYER_HEAD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_SOLO_PLAYER_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_CARDSLAY_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_CARD_TING_DETAIL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_GAME_RETREAT_TABLE_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_PB_NTF_SOMEONE_BUHUA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_QueryFlauntInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_UpdateFlauntBout_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "game.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ngame.proto\022\004game\032\013xygmj.proto\"^\n\016PB_SE"
      "NDER_INFO\022\022\n\nsend_table\030\001 \001(\021\022\022\n\nsend_ch"
      "air\030\002 \001(\021\022\021\n\tsend_user\030\003 \001(\021\022\021\n\tsz_hardi"
      "d\030\004 \001(\t\"\321\001\n\023PB_TING_THROW_CARDS\022\017\n\007user_"
      "id\030\001 \001(\021\022\017\n\007room_id\030\002 \001(\021\022\020\n\010table_no\030\003 "
      "\001(\021\022\020\n\010chair_no\030\004 \001(\021\022\017\n\007passive\030\005 \001(\021\022\022"
      "\n\ncards_type\030\006 \001(\005\022\022\n\ncards_cout\030\007 \001(\021\022\020"
      "\n\010card_ids\030\010 \003(\021\022)\n\013sender_info\030\t \001(\0132\024."
      "game.PB_SENDER_INFO\"\332\005\n\020PB_MJ_START_DATA"
      "\022\022\n\nnBoutCount\030\001 \001(\021\022\024\n\014nBaseDeposit\030\002 \001"
      "(\021\022\022\n\nnBaseScore\030\003 \001(\021\022\017\n\007nBanker\030\004 \001(\021\022"
      "\023\n\013nBankerHold\030\005 \001(\021\022\025\n\rnCurrentChair\030\006 "
      "\001(\021\022\020\n\010dwStatus\030\007 \001(\005\022\026\n\016dwCurrentFlags\030"
      "\010 \001(\005\022\023\n\013nFirstCatch\030\t \001(\021\022\023\n\013nFirstThro"
      "w\030\n \001(\021\022\022\n\nnThrowWait\030\013 \001(\021\022\025\n\rnMaxAutoT"
      "hrow\030\014 \001(\021\022\024\n\014nEntrustWait\030\r \001(\021\022\024\n\014bNee"
      "dDeposit\030\016 \001(\021\022\025\n\rbForbidDesert\030\017 \001(\021\022\023\n"
      "\013bQuickCatch\030\020 \001(\021\022\021\n\tbAllowChi\030\021 \001(\021\022\023\n"
      "\013bAnGangShow\030\022 \001(\021\022\024\n\014bJokerSortIn\030\023 \001(\021"
      "\022\025\n\rbBaibanNoSort\030\024 \001(\021\022\020\n\010nBeginNO\030\025 \001("
      "\021\022\020\n\010nJokerNO\030\026 \001(\021\022\020\n\010nJokerID\030\027 \001(\021\022\021\n"
      "\tnJokerID2\030\030 \001(\021\022\016\n\006nFanID\030\031 \001(\021\022\022\n\nnTai"
      "lTaken\030\032 \001(\021\022\025\n\rnCurrentCatch\030\033 \001(\021\022\021\n\tn"
      "PGCHWait\030\034 \001(\021\022\023\n\013nPGCHWaitEx\030\035 \001(\021\022\022\n\ns"
      "zSerialNO\030\036 \001(\t\022\016\n\006nDices\030\037 \003(\021\022\030\n\020nYqwA"
      "utoPlayWait\030  \001(\021\022\035\n\025nPreHuOneFeng13BKFl"
      "ag\030! \003(\021\022\026\n\016nAddGainsScore\030\" \003(\021\"5\n\rPB_C"
      "ARDS_UNIT\022\022\n\nnCardChair\030\001 \001(\021\022\020\n\010nCardID"
      "s\030\002 \003(\021\"C\n\023PB_CARDS_UNIT_CHAIR\022,\n\017chair_"
      "cardsunit\030\001 \003(\0132\023.game.PB_CARDS_UNIT\" \n\014"
      "PB_INT_CHAIR\022\020\n\010nCardIDs\030\001 \003(\021\"\331\003\n\017PB_MJ"
      "_PLAY_DATA\022,\n\tPengCards\030\001 \003(\0132\031.game.PB_"
      "CARDS_UNIT_CHAIR\022\022\n\nnPengCount\030\002 \003(\021\022+\n\010"
      "ChiCards\030\003 \003(\0132\031.game.PB_CARDS_UNIT_CHAI"
      "R\022\021\n\tnChiCount\030\004 \003(\021\022.\n\013MnGangCards\030\005 \003("
      "\0132\031.game.PB_CARDS_UNIT_CHAIR\022\024\n\014nMnGangC"
      "ount\030\006 \003(\021\022.\n\013AnGangCards\030\007 \003(\0132\031.game.P"
      "B_CARDS_UNIT_CHAIR\022\024\n\014nAnGangCount\030\010 \003(\021"
      "\022.\n\013PnGangCards\030\t \003(\0132\031.game.PB_CARDS_UN"
      "IT_CHAIR\022\024\n\014nPnGangCount\030\n \003(\021\022%\n\tnOutCa"
      "rds\030\013 \003(\0132\022.game.PB_INT_CHAIR\022\021\n\tnOutCou"
      "nt\030\014 \003(\021\022%\n\tnHuaCards\030\r \003(\0132\022.game.PB_IN"
      "T_CHAIR\022\021\n\tnHuaCount\030\016 \003(\021\"\207\004\n\022PB_GAME_T"
      "ABLE_INFO\022\035\n\004main\030\001 \001(\0132\017.tc.MJTableInfo"
      "\022)\n\tStartInfo\030\002 \001(\0132\026.game.PB_MJ_START_D"
      "ATA\022\'\n\010PlayData\030\003 \001(\0132\025.game.PB_MJ_PLAY_"
      "DATA\022\023\n\013dwGameFlags\030\004 \001(\005\022\037\n\027nCurrentLef"
      "tOperateTime\030\005 \001(\021\022\024\n\014dwUserStatus\030\006 \003(\005"
      "\022\023\n\013nCardsCount\030\007 \003(\021\022\023\n\013nChairCards\030\010 \003"
      "(\021\022\020\n\010nAskExit\030\t \003(\021\022\023\n\013nResultDiff\030\n \003("
      "\021\022\024\n\014nTotalResult\030\013 \003(\021\022\023\n\013dwPGCHFlags\030\014"
      " \003(\005\022\020\n\010nQghFlag\030\r \001(\021\022\016\n\006nQghID\030\016 \001(\021\022\021"
      "\n\tnQghChair\030\017 \001(\021\022-\n\ntingdetail\030\020 \001(\0132\031."
      "game.PB_CARD_TING_DETAIL\022\026\n\016nTingCardsDX"
      "XW\030\021 \003(\021\022\023\n\013dwTimeStamp\030\022 \001(\021\022\023\n\013game_fl"
      "ags2\030\023 \001(\005\022\020\n\010bao_ting\030\024 \003(\021\"c\n\022PB_SOLOP"
      "LAYER_HEAD\022\017\n\007nRoomID\030\001 \001(\021\022\020\n\010nTableNO\030"
      "\002 \001(\021\022\024\n\014nPlayerCount\030\003 \001(\021\022\024\n\014dwUserSta"
      "tus\030\004 \003(\005\"\214\003\n\016PB_SOLO_PLAYER\022\017\n\007nUserID\030"
      "\001 \001(\021\022\021\n\tnUserType\030\002 \001(\021\022\017\n\007nStatus\030\003 \001("
      "\021\022\020\n\010nTableNO\030\004 \001(\021\022\020\n\010nChairNO\030\005 \001(\021\022\020\n"
      "\010nNickSex\030\006 \001(\021\022\021\n\tnPortrait\030\007 \001(\021\022\021\n\tnN"
      "etSpeed\030\010 \001(\021\022\023\n\013nClothingID\030\t \001(\021\022\020\n\010nD"
      "eposit\030\n \001(\021\022\024\n\014nPlayerLevel\030\013 \001(\021\022\016\n\006nS"
      "core\030\014 \001(\021\022\021\n\tnBreakOff\030\r \001(\021\022\014\n\004nWin\030\016 "
      "\001(\021\022\r\n\005nLoss\030\017 \001(\021\022\021\n\tnStandOff\030\020 \001(\021\022\r\n"
      "\005nBout\030\021 \001(\021\022\021\n\tnTimeCost\030\022 \001(\021\022\017\n\007bRefu"
      "se\030\023 \001(\021\022\022\n\nszUsername\030\024 \001(\t\022\022\n\nszNickNa"
      "me\030\025 \001(\t\"\037\n\013PB_CARDSLAY\022\020\n\010cardsLay\030\001 \003("
      "\021\"\263\001\n\023PB_CARD_TING_DETAIL\022\017\n\007dwflags\030\001 \001"
      "(\005\022\020\n\010nChairNO\030\002 \001(\021\022\027\n\017nThrowCardsTing\030"
      "\003 \003(\021\022.\n\023nThrowCardsTingLays\030\004 \003(\0132\021.gam"
      "e.PB_CARDSLAY\0220\n\025nThrowCardsTingRemain\030\005"
      " \003(\0132\021.game.PB_CARDSLAY\"\250\001\n\032PB_GAME_RETR"
      "EAT_TABLE_INFO\0222\n\020solo_player_head\030\001 \001(\013"
      "2\030.game.PB_SOLOPLAYER_HEAD\022)\n\013solo_playe"
      "r\030\002 \003(\0132\024.game.PB_SOLO_PLAYER\022+\n\ttablein"
      "fo\030\003 \001(\0132\030.game.PB_GAME_TABLE_INFO\"P\n\024PB"
      "_NTF_SOMEONE_BUHUA\022%\n\tnHuaCards\030\001 \003(\0132\022."
      "game.PB_INT_CHAIR\022\021\n\tnHuaCount\030\002 \003(\021\"f\n\017"
      "QueryFlauntInfo\022\017\n\007nUserID\030\001 \001(\021\022\026\n\016nRep"
      "eatWinBout\030\002 \001(\021\022\027\n\017nRepeatLoseBout\030\003 \001("
      "\021\022\021\n\tnReserved\030\004 \003(\021\"D\n\020UpdateFlauntBout"
      "\022\017\n\007nUserID\030\001 \001(\021\022\014\n\004bWin\030\002 \001(\021\022\021\n\tnRese"
      "rved\030\003 \003(\021P\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  ::protobuf_xygmj_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_game_2eproto
namespace game {

// ===================================================================

void PB_SENDER_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_SENDER_INFO::kSendTableFieldNumber;
const int PB_SENDER_INFO::kSendChairFieldNumber;
const int PB_SENDER_INFO::kSendUserFieldNumber;
const int PB_SENDER_INFO::kSzHardidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_SENDER_INFO::PB_SENDER_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_SENDER_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_SENDER_INFO)
}
PB_SENDER_INFO::PB_SENDER_INFO(const PB_SENDER_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sz_hardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sz_hardid()) {
    sz_hardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_hardid_);
  }
  ::memcpy(&send_table_, &from.send_table_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_user_) -
    reinterpret_cast<char*>(&send_table_)) + sizeof(send_user_));
  // @@protoc_insertion_point(copy_constructor:game.PB_SENDER_INFO)
}

void PB_SENDER_INFO::SharedCtor() {
  _cached_size_ = 0;
  sz_hardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&send_table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_user_) -
      reinterpret_cast<char*>(&send_table_)) + sizeof(send_user_));
}

PB_SENDER_INFO::~PB_SENDER_INFO() {
  // @@protoc_insertion_point(destructor:game.PB_SENDER_INFO)
  SharedDtor();
}

void PB_SENDER_INFO::SharedDtor() {
  sz_hardid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PB_SENDER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_SENDER_INFO::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_SENDER_INFO& PB_SENDER_INFO::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_SENDER_INFO();
  return *internal_default_instance();
}

PB_SENDER_INFO* PB_SENDER_INFO::New(::google::protobuf::Arena* arena) const {
  PB_SENDER_INFO* n = new PB_SENDER_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_SENDER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_SENDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!sz_hardid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sz_hardid_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&send_table_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_user_) -
        reinterpret_cast<char*>(&send_table_)) + sizeof(send_user_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_SENDER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_SENDER_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 send_table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_send_table();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &send_table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 send_chair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_send_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &send_chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 send_user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_send_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &send_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sz_hardid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sz_hardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sz_hardid().data(), static_cast<int>(this->sz_hardid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game.PB_SENDER_INFO.sz_hardid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_SENDER_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_SENDER_INFO)
  return false;
#undef DO_
}

void PB_SENDER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_SENDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 send_table = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->send_table(), output);
  }

  // optional sint32 send_chair = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->send_chair(), output);
  }

  // optional sint32 send_user = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->send_user(), output);
  }

  // optional string sz_hardid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sz_hardid().data(), static_cast<int>(this->sz_hardid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game.PB_SENDER_INFO.sz_hardid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sz_hardid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_SENDER_INFO)
}

::google::protobuf::uint8* PB_SENDER_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_SENDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 send_table = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->send_table(), target);
  }

  // optional sint32 send_chair = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->send_chair(), target);
  }

  // optional sint32 send_user = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->send_user(), target);
  }

  // optional string sz_hardid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sz_hardid().data(), static_cast<int>(this->sz_hardid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game.PB_SENDER_INFO.sz_hardid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sz_hardid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_SENDER_INFO)
  return target;
}

size_t PB_SENDER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_SENDER_INFO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string sz_hardid = 4;
    if (has_sz_hardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sz_hardid());
    }

    // optional sint32 send_table = 1;
    if (has_send_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->send_table());
    }

    // optional sint32 send_chair = 2;
    if (has_send_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->send_chair());
    }

    // optional sint32 send_user = 3;
    if (has_send_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->send_user());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_SENDER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_SENDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_SENDER_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_SENDER_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_SENDER_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_SENDER_INFO)
    MergeFrom(*source);
  }
}

void PB_SENDER_INFO::MergeFrom(const PB_SENDER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_SENDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sz_hardid();
      sz_hardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sz_hardid_);
    }
    if (cached_has_bits & 0x00000002u) {
      send_table_ = from.send_table_;
    }
    if (cached_has_bits & 0x00000004u) {
      send_chair_ = from.send_chair_;
    }
    if (cached_has_bits & 0x00000008u) {
      send_user_ = from.send_user_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PB_SENDER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_SENDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_SENDER_INFO::CopyFrom(const PB_SENDER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_SENDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_SENDER_INFO::IsInitialized() const {
  return true;
}

void PB_SENDER_INFO::Swap(PB_SENDER_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_SENDER_INFO::InternalSwap(PB_SENDER_INFO* other) {
  using std::swap;
  sz_hardid_.Swap(&other->sz_hardid_);
  swap(send_table_, other->send_table_);
  swap(send_chair_, other->send_chair_);
  swap(send_user_, other->send_user_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_SENDER_INFO::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_TING_THROW_CARDS::InitAsDefaultInstance() {
  ::game::_PB_TING_THROW_CARDS_default_instance_._instance.get_mutable()->sender_info_ = const_cast< ::game::PB_SENDER_INFO*>(
      ::game::PB_SENDER_INFO::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_TING_THROW_CARDS::kUserIdFieldNumber;
const int PB_TING_THROW_CARDS::kRoomIdFieldNumber;
const int PB_TING_THROW_CARDS::kTableNoFieldNumber;
const int PB_TING_THROW_CARDS::kChairNoFieldNumber;
const int PB_TING_THROW_CARDS::kPassiveFieldNumber;
const int PB_TING_THROW_CARDS::kCardsTypeFieldNumber;
const int PB_TING_THROW_CARDS::kCardsCoutFieldNumber;
const int PB_TING_THROW_CARDS::kCardIdsFieldNumber;
const int PB_TING_THROW_CARDS::kSenderInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_TING_THROW_CARDS::PB_TING_THROW_CARDS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_TING_THROW_CARDS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_TING_THROW_CARDS)
}
PB_TING_THROW_CARDS::PB_TING_THROW_CARDS(const PB_TING_THROW_CARDS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      card_ids_(from.card_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sender_info()) {
    sender_info_ = new ::game::PB_SENDER_INFO(*from.sender_info_);
  } else {
    sender_info_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cards_cout_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(cards_cout_));
  // @@protoc_insertion_point(copy_constructor:game.PB_TING_THROW_CARDS)
}

void PB_TING_THROW_CARDS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sender_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cards_cout_) -
      reinterpret_cast<char*>(&sender_info_)) + sizeof(cards_cout_));
}

PB_TING_THROW_CARDS::~PB_TING_THROW_CARDS() {
  // @@protoc_insertion_point(destructor:game.PB_TING_THROW_CARDS)
  SharedDtor();
}

void PB_TING_THROW_CARDS::SharedDtor() {
  if (this != internal_default_instance()) delete sender_info_;
}

void PB_TING_THROW_CARDS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_TING_THROW_CARDS::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_TING_THROW_CARDS& PB_TING_THROW_CARDS::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_TING_THROW_CARDS();
  return *internal_default_instance();
}

PB_TING_THROW_CARDS* PB_TING_THROW_CARDS::New(::google::protobuf::Arena* arena) const {
  PB_TING_THROW_CARDS* n = new PB_TING_THROW_CARDS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_TING_THROW_CARDS::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_TING_THROW_CARDS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sender_info_ != NULL);
    sender_info_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cards_cout_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(cards_cout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_TING_THROW_CARDS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_TING_THROW_CARDS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_room_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 table_no = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_table_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &table_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 chair_no = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_chair_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &chair_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 passive = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_passive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cards_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_cards_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 cards_cout = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_cards_cout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cards_cout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 card_ids = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 64u, input, this->mutable_card_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_card_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .game.PB_SENDER_INFO sender_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sender_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_TING_THROW_CARDS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_TING_THROW_CARDS)
  return false;
#undef DO_
}

void PB_TING_THROW_CARDS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_TING_THROW_CARDS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->user_id(), output);
  }

  // optional sint32 room_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->room_id(), output);
  }

  // optional sint32 table_no = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->table_no(), output);
  }

  // optional sint32 chair_no = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->chair_no(), output);
  }

  // optional sint32 passive = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->passive(), output);
  }

  // optional int32 cards_type = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cards_type(), output);
  }

  // optional sint32 cards_cout = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->cards_cout(), output);
  }

  // repeated sint32 card_ids = 8;
  for (int i = 0, n = this->card_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      8, this->card_ids(i), output);
  }

  // optional .game.PB_SENDER_INFO sender_info = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->sender_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_TING_THROW_CARDS)
}

::google::protobuf::uint8* PB_TING_THROW_CARDS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_TING_THROW_CARDS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->user_id(), target);
  }

  // optional sint32 room_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->room_id(), target);
  }

  // optional sint32 table_no = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->table_no(), target);
  }

  // optional sint32 chair_no = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->chair_no(), target);
  }

  // optional sint32 passive = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->passive(), target);
  }

  // optional int32 cards_type = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cards_type(), target);
  }

  // optional sint32 cards_cout = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->cards_cout(), target);
  }

  // repeated sint32 card_ids = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(8, this->card_ids_, target);

  // optional .game.PB_SENDER_INFO sender_info = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->sender_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_TING_THROW_CARDS)
  return target;
}

size_t PB_TING_THROW_CARDS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_TING_THROW_CARDS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 card_ids = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->card_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->card_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .game.PB_SENDER_INFO sender_info = 9;
    if (has_sender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->sender_info_);
    }

    // optional sint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->user_id());
    }

    // optional sint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->room_id());
    }

    // optional sint32 table_no = 3;
    if (has_table_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->table_no());
    }

    // optional sint32 chair_no = 4;
    if (has_chair_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->chair_no());
    }

    // optional sint32 passive = 5;
    if (has_passive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passive());
    }

    // optional int32 cards_type = 6;
    if (has_cards_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards_type());
    }

    // optional sint32 cards_cout = 7;
    if (has_cards_cout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->cards_cout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_TING_THROW_CARDS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_TING_THROW_CARDS)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_TING_THROW_CARDS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_TING_THROW_CARDS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_TING_THROW_CARDS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_TING_THROW_CARDS)
    MergeFrom(*source);
  }
}

void PB_TING_THROW_CARDS::MergeFrom(const PB_TING_THROW_CARDS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_TING_THROW_CARDS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_ids_.MergeFrom(from.card_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sender_info()->::game::PB_SENDER_INFO::MergeFrom(from.sender_info());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_no_ = from.table_no_;
    }
    if (cached_has_bits & 0x00000010u) {
      chair_no_ = from.chair_no_;
    }
    if (cached_has_bits & 0x00000020u) {
      passive_ = from.passive_;
    }
    if (cached_has_bits & 0x00000040u) {
      cards_type_ = from.cards_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      cards_cout_ = from.cards_cout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PB_TING_THROW_CARDS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_TING_THROW_CARDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_TING_THROW_CARDS::CopyFrom(const PB_TING_THROW_CARDS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_TING_THROW_CARDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_TING_THROW_CARDS::IsInitialized() const {
  return true;
}

void PB_TING_THROW_CARDS::Swap(PB_TING_THROW_CARDS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_TING_THROW_CARDS::InternalSwap(PB_TING_THROW_CARDS* other) {
  using std::swap;
  card_ids_.InternalSwap(&other->card_ids_);
  swap(sender_info_, other->sender_info_);
  swap(user_id_, other->user_id_);
  swap(room_id_, other->room_id_);
  swap(table_no_, other->table_no_);
  swap(chair_no_, other->chair_no_);
  swap(passive_, other->passive_);
  swap(cards_type_, other->cards_type_);
  swap(cards_cout_, other->cards_cout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_TING_THROW_CARDS::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_MJ_START_DATA::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_MJ_START_DATA::kNBoutCountFieldNumber;
const int PB_MJ_START_DATA::kNBaseDepositFieldNumber;
const int PB_MJ_START_DATA::kNBaseScoreFieldNumber;
const int PB_MJ_START_DATA::kNBankerFieldNumber;
const int PB_MJ_START_DATA::kNBankerHoldFieldNumber;
const int PB_MJ_START_DATA::kNCurrentChairFieldNumber;
const int PB_MJ_START_DATA::kDwStatusFieldNumber;
const int PB_MJ_START_DATA::kDwCurrentFlagsFieldNumber;
const int PB_MJ_START_DATA::kNFirstCatchFieldNumber;
const int PB_MJ_START_DATA::kNFirstThrowFieldNumber;
const int PB_MJ_START_DATA::kNThrowWaitFieldNumber;
const int PB_MJ_START_DATA::kNMaxAutoThrowFieldNumber;
const int PB_MJ_START_DATA::kNEntrustWaitFieldNumber;
const int PB_MJ_START_DATA::kBNeedDepositFieldNumber;
const int PB_MJ_START_DATA::kBForbidDesertFieldNumber;
const int PB_MJ_START_DATA::kBQuickCatchFieldNumber;
const int PB_MJ_START_DATA::kBAllowChiFieldNumber;
const int PB_MJ_START_DATA::kBAnGangShowFieldNumber;
const int PB_MJ_START_DATA::kBJokerSortInFieldNumber;
const int PB_MJ_START_DATA::kBBaibanNoSortFieldNumber;
const int PB_MJ_START_DATA::kNBeginNOFieldNumber;
const int PB_MJ_START_DATA::kNJokerNOFieldNumber;
const int PB_MJ_START_DATA::kNJokerIDFieldNumber;
const int PB_MJ_START_DATA::kNJokerID2FieldNumber;
const int PB_MJ_START_DATA::kNFanIDFieldNumber;
const int PB_MJ_START_DATA::kNTailTakenFieldNumber;
const int PB_MJ_START_DATA::kNCurrentCatchFieldNumber;
const int PB_MJ_START_DATA::kNPGCHWaitFieldNumber;
const int PB_MJ_START_DATA::kNPGCHWaitExFieldNumber;
const int PB_MJ_START_DATA::kSzSerialNOFieldNumber;
const int PB_MJ_START_DATA::kNDicesFieldNumber;
const int PB_MJ_START_DATA::kNYqwAutoPlayWaitFieldNumber;
const int PB_MJ_START_DATA::kNPreHuOneFeng13BKFlagFieldNumber;
const int PB_MJ_START_DATA::kNAddGainsScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_MJ_START_DATA::PB_MJ_START_DATA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_MJ_START_DATA();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_MJ_START_DATA)
}
PB_MJ_START_DATA::PB_MJ_START_DATA(const PB_MJ_START_DATA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ndices_(from.ndices_),
      nprehuonefeng13bkflag_(from.nprehuonefeng13bkflag_),
      naddgainsscore_(from.naddgainsscore_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szserialno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_szserialno()) {
    szserialno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szserialno_);
  }
  ::memcpy(&nboutcount_, &from.nboutcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&nyqwautoplaywait_) -
    reinterpret_cast<char*>(&nboutcount_)) + sizeof(nyqwautoplaywait_));
  // @@protoc_insertion_point(copy_constructor:game.PB_MJ_START_DATA)
}

void PB_MJ_START_DATA::SharedCtor() {
  _cached_size_ = 0;
  szserialno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nboutcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nyqwautoplaywait_) -
      reinterpret_cast<char*>(&nboutcount_)) + sizeof(nyqwautoplaywait_));
}

PB_MJ_START_DATA::~PB_MJ_START_DATA() {
  // @@protoc_insertion_point(destructor:game.PB_MJ_START_DATA)
  SharedDtor();
}

void PB_MJ_START_DATA::SharedDtor() {
  szserialno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PB_MJ_START_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_MJ_START_DATA::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_MJ_START_DATA& PB_MJ_START_DATA::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_MJ_START_DATA();
  return *internal_default_instance();
}

PB_MJ_START_DATA* PB_MJ_START_DATA::New(::google::protobuf::Arena* arena) const {
  PB_MJ_START_DATA* n = new PB_MJ_START_DATA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_MJ_START_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_MJ_START_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ndices_.Clear();
  nprehuonefeng13bkflag_.Clear();
  naddgainsscore_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!szserialno_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*szserialno_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&nboutcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dwstatus_) -
        reinterpret_cast<char*>(&nboutcount_)) + sizeof(dwstatus_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&dwcurrentflags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bforbiddesert_) -
        reinterpret_cast<char*>(&dwcurrentflags_)) + sizeof(bforbiddesert_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&bquickcatch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&njokerid_) -
        reinterpret_cast<char*>(&bquickcatch_)) + sizeof(njokerid_));
  }
  if (cached_has_bits & 2130706432u) {
    ::memset(&njokerid2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nyqwautoplaywait_) -
        reinterpret_cast<char*>(&njokerid2_)) + sizeof(nyqwautoplaywait_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_MJ_START_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_MJ_START_DATA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 nBoutCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_nboutcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nboutcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nBaseDeposit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nbasedeposit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nbasedeposit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nBaseScore = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nbasescore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nbasescore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nBanker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_nbanker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nbanker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nBankerHold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_nbankerhold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nbankerhold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nCurrentChair = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ncurrentchair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ncurrentchair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dwStatus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_dwstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dwCurrentFlags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_dwcurrentflags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwcurrentflags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nFirstCatch = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_nfirstcatch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nfirstcatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nFirstThrow = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_nfirstthrow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nfirstthrow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nThrowWait = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_nthrowwait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nthrowwait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nMaxAutoThrow = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_nmaxautothrow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nmaxautothrow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nEntrustWait = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_nentrustwait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nentrustwait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bNeedDeposit = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_bneeddeposit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bneeddeposit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bForbidDesert = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_bforbiddesert();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bforbiddesert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bQuickCatch = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_bquickcatch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bquickcatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bAllowChi = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_ballowchi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ballowchi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bAnGangShow = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_bangangshow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bangangshow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bJokerSortIn = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_bjokersortin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bjokersortin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bBaibanNoSort = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_bbaibannosort();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bbaibannosort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nBeginNO = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_nbeginno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nbeginno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nJokerNO = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_njokerno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &njokerno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nJokerID = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_njokerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &njokerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nJokerID2 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_njokerid2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &njokerid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nFanID = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_nfanid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nfanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nTailTaken = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_ntailtaken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ntailtaken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nCurrentCatch = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_ncurrentcatch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ncurrentcatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nPGCHWait = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_npgchwait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &npgchwait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nPGCHWaitEx = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_npgchwaitex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &npgchwaitex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string szSerialNO = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szserialno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szserialno().data(), static_cast<int>(this->szserialno().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game.PB_MJ_START_DATA.szSerialNO");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nDices = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 248u, input, this->mutable_ndices())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_ndices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nYqwAutoPlayWait = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_nyqwautoplaywait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nyqwautoplaywait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nPreHuOneFeng13BKFlag = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 264u, input, this->mutable_nprehuonefeng13bkflag())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nprehuonefeng13bkflag())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nAddGainsScore = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 272u, input, this->mutable_naddgainsscore())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_naddgainsscore())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_MJ_START_DATA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_MJ_START_DATA)
  return false;
#undef DO_
}

void PB_MJ_START_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_MJ_START_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nBoutCount = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->nboutcount(), output);
  }

  // optional sint32 nBaseDeposit = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->nbasedeposit(), output);
  }

  // optional sint32 nBaseScore = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->nbasescore(), output);
  }

  // optional sint32 nBanker = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->nbanker(), output);
  }

  // optional sint32 nBankerHold = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->nbankerhold(), output);
  }

  // optional sint32 nCurrentChair = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->ncurrentchair(), output);
  }

  // optional int32 dwStatus = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dwstatus(), output);
  }

  // optional int32 dwCurrentFlags = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dwcurrentflags(), output);
  }

  // optional sint32 nFirstCatch = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->nfirstcatch(), output);
  }

  // optional sint32 nFirstThrow = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->nfirstthrow(), output);
  }

  // optional sint32 nThrowWait = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->nthrowwait(), output);
  }

  // optional sint32 nMaxAutoThrow = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->nmaxautothrow(), output);
  }

  // optional sint32 nEntrustWait = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->nentrustwait(), output);
  }

  // optional sint32 bNeedDeposit = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->bneeddeposit(), output);
  }

  // optional sint32 bForbidDesert = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->bforbiddesert(), output);
  }

  // optional sint32 bQuickCatch = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->bquickcatch(), output);
  }

  // optional sint32 bAllowChi = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->ballowchi(), output);
  }

  // optional sint32 bAnGangShow = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->bangangshow(), output);
  }

  // optional sint32 bJokerSortIn = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(19, this->bjokersortin(), output);
  }

  // optional sint32 bBaibanNoSort = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->bbaibannosort(), output);
  }

  // optional sint32 nBeginNO = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->nbeginno(), output);
  }

  // optional sint32 nJokerNO = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->njokerno(), output);
  }

  // optional sint32 nJokerID = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(23, this->njokerid(), output);
  }

  // optional sint32 nJokerID2 = 24;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(24, this->njokerid2(), output);
  }

  // optional sint32 nFanID = 25;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(25, this->nfanid(), output);
  }

  // optional sint32 nTailTaken = 26;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(26, this->ntailtaken(), output);
  }

  // optional sint32 nCurrentCatch = 27;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(27, this->ncurrentcatch(), output);
  }

  // optional sint32 nPGCHWait = 28;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(28, this->npgchwait(), output);
  }

  // optional sint32 nPGCHWaitEx = 29;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->npgchwaitex(), output);
  }

  // optional string szSerialNO = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szserialno().data(), static_cast<int>(this->szserialno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game.PB_MJ_START_DATA.szSerialNO");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->szserialno(), output);
  }

  // repeated sint32 nDices = 31;
  for (int i = 0, n = this->ndices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      31, this->ndices(i), output);
  }

  // optional sint32 nYqwAutoPlayWait = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(32, this->nyqwautoplaywait(), output);
  }

  // repeated sint32 nPreHuOneFeng13BKFlag = 33;
  for (int i = 0, n = this->nprehuonefeng13bkflag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      33, this->nprehuonefeng13bkflag(i), output);
  }

  // repeated sint32 nAddGainsScore = 34;
  for (int i = 0, n = this->naddgainsscore_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      34, this->naddgainsscore(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_MJ_START_DATA)
}

::google::protobuf::uint8* PB_MJ_START_DATA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_MJ_START_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nBoutCount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->nboutcount(), target);
  }

  // optional sint32 nBaseDeposit = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->nbasedeposit(), target);
  }

  // optional sint32 nBaseScore = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->nbasescore(), target);
  }

  // optional sint32 nBanker = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->nbanker(), target);
  }

  // optional sint32 nBankerHold = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->nbankerhold(), target);
  }

  // optional sint32 nCurrentChair = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->ncurrentchair(), target);
  }

  // optional int32 dwStatus = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dwstatus(), target);
  }

  // optional int32 dwCurrentFlags = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dwcurrentflags(), target);
  }

  // optional sint32 nFirstCatch = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->nfirstcatch(), target);
  }

  // optional sint32 nFirstThrow = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->nfirstthrow(), target);
  }

  // optional sint32 nThrowWait = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->nthrowwait(), target);
  }

  // optional sint32 nMaxAutoThrow = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->nmaxautothrow(), target);
  }

  // optional sint32 nEntrustWait = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->nentrustwait(), target);
  }

  // optional sint32 bNeedDeposit = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->bneeddeposit(), target);
  }

  // optional sint32 bForbidDesert = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->bforbiddesert(), target);
  }

  // optional sint32 bQuickCatch = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->bquickcatch(), target);
  }

  // optional sint32 bAllowChi = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->ballowchi(), target);
  }

  // optional sint32 bAnGangShow = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->bangangshow(), target);
  }

  // optional sint32 bJokerSortIn = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(19, this->bjokersortin(), target);
  }

  // optional sint32 bBaibanNoSort = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->bbaibannosort(), target);
  }

  // optional sint32 nBeginNO = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->nbeginno(), target);
  }

  // optional sint32 nJokerNO = 22;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->njokerno(), target);
  }

  // optional sint32 nJokerID = 23;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(23, this->njokerid(), target);
  }

  // optional sint32 nJokerID2 = 24;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(24, this->njokerid2(), target);
  }

  // optional sint32 nFanID = 25;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(25, this->nfanid(), target);
  }

  // optional sint32 nTailTaken = 26;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(26, this->ntailtaken(), target);
  }

  // optional sint32 nCurrentCatch = 27;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(27, this->ncurrentcatch(), target);
  }

  // optional sint32 nPGCHWait = 28;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(28, this->npgchwait(), target);
  }

  // optional sint32 nPGCHWaitEx = 29;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->npgchwaitex(), target);
  }

  // optional string szSerialNO = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szserialno().data(), static_cast<int>(this->szserialno().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game.PB_MJ_START_DATA.szSerialNO");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->szserialno(), target);
  }

  // repeated sint32 nDices = 31;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(31, this->ndices_, target);

  // optional sint32 nYqwAutoPlayWait = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(32, this->nyqwautoplaywait(), target);
  }

  // repeated sint32 nPreHuOneFeng13BKFlag = 33;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(33, this->nprehuonefeng13bkflag_, target);

  // repeated sint32 nAddGainsScore = 34;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(34, this->naddgainsscore_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_MJ_START_DATA)
  return target;
}

size_t PB_MJ_START_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_MJ_START_DATA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 nDices = 31;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->ndices_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->ndices_size());
    total_size += data_size;
  }

  // repeated sint32 nPreHuOneFeng13BKFlag = 33;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nprehuonefeng13bkflag_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->nprehuonefeng13bkflag_size());
    total_size += data_size;
  }

  // repeated sint32 nAddGainsScore = 34;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->naddgainsscore_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->naddgainsscore_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string szSerialNO = 30;
    if (has_szserialno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szserialno());
    }

    // optional sint32 nBoutCount = 1;
    if (has_nboutcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nboutcount());
    }

    // optional sint32 nBaseDeposit = 2;
    if (has_nbasedeposit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nbasedeposit());
    }

    // optional sint32 nBaseScore = 3;
    if (has_nbasescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nbasescore());
    }

    // optional sint32 nBanker = 4;
    if (has_nbanker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nbanker());
    }

    // optional sint32 nBankerHold = 5;
    if (has_nbankerhold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nbankerhold());
    }

    // optional sint32 nCurrentChair = 6;
    if (has_ncurrentchair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ncurrentchair());
    }

    // optional int32 dwStatus = 7;
    if (has_dwstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwstatus());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 dwCurrentFlags = 8;
    if (has_dwcurrentflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwcurrentflags());
    }

    // optional sint32 nFirstCatch = 9;
    if (has_nfirstcatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nfirstcatch());
    }

    // optional sint32 nFirstThrow = 10;
    if (has_nfirstthrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nfirstthrow());
    }

    // optional sint32 nThrowWait = 11;
    if (has_nthrowwait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nthrowwait());
    }

    // optional sint32 nMaxAutoThrow = 12;
    if (has_nmaxautothrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nmaxautothrow());
    }

    // optional sint32 nEntrustWait = 13;
    if (has_nentrustwait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nentrustwait());
    }

    // optional sint32 bNeedDeposit = 14;
    if (has_bneeddeposit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bneeddeposit());
    }

    // optional sint32 bForbidDesert = 15;
    if (has_bforbiddesert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bforbiddesert());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional sint32 bQuickCatch = 16;
    if (has_bquickcatch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bquickcatch());
    }

    // optional sint32 bAllowChi = 17;
    if (has_ballowchi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ballowchi());
    }

    // optional sint32 bAnGangShow = 18;
    if (has_bangangshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bangangshow());
    }

    // optional sint32 bJokerSortIn = 19;
    if (has_bjokersortin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bjokersortin());
    }

    // optional sint32 bBaibanNoSort = 20;
    if (has_bbaibannosort()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bbaibannosort());
    }

    // optional sint32 nBeginNO = 21;
    if (has_nbeginno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nbeginno());
    }

    // optional sint32 nJokerNO = 22;
    if (has_njokerno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->njokerno());
    }

    // optional sint32 nJokerID = 23;
    if (has_njokerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->njokerid());
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional sint32 nJokerID2 = 24;
    if (has_njokerid2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->njokerid2());
    }

    // optional sint32 nFanID = 25;
    if (has_nfanid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nfanid());
    }

    // optional sint32 nTailTaken = 26;
    if (has_ntailtaken()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ntailtaken());
    }

    // optional sint32 nCurrentCatch = 27;
    if (has_ncurrentcatch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ncurrentcatch());
    }

    // optional sint32 nPGCHWait = 28;
    if (has_npgchwait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->npgchwait());
    }

    // optional sint32 nPGCHWaitEx = 29;
    if (has_npgchwaitex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->npgchwaitex());
    }

    // optional sint32 nYqwAutoPlayWait = 32;
    if (has_nyqwautoplaywait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nyqwautoplaywait());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_MJ_START_DATA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_MJ_START_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_MJ_START_DATA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_MJ_START_DATA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_MJ_START_DATA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_MJ_START_DATA)
    MergeFrom(*source);
  }
}

void PB_MJ_START_DATA::MergeFrom(const PB_MJ_START_DATA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_MJ_START_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ndices_.MergeFrom(from.ndices_);
  nprehuonefeng13bkflag_.MergeFrom(from.nprehuonefeng13bkflag_);
  naddgainsscore_.MergeFrom(from.naddgainsscore_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_szserialno();
      szserialno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szserialno_);
    }
    if (cached_has_bits & 0x00000002u) {
      nboutcount_ = from.nboutcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      nbasedeposit_ = from.nbasedeposit_;
    }
    if (cached_has_bits & 0x00000008u) {
      nbasescore_ = from.nbasescore_;
    }
    if (cached_has_bits & 0x00000010u) {
      nbanker_ = from.nbanker_;
    }
    if (cached_has_bits & 0x00000020u) {
      nbankerhold_ = from.nbankerhold_;
    }
    if (cached_has_bits & 0x00000040u) {
      ncurrentchair_ = from.ncurrentchair_;
    }
    if (cached_has_bits & 0x00000080u) {
      dwstatus_ = from.dwstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      dwcurrentflags_ = from.dwcurrentflags_;
    }
    if (cached_has_bits & 0x00000200u) {
      nfirstcatch_ = from.nfirstcatch_;
    }
    if (cached_has_bits & 0x00000400u) {
      nfirstthrow_ = from.nfirstthrow_;
    }
    if (cached_has_bits & 0x00000800u) {
      nthrowwait_ = from.nthrowwait_;
    }
    if (cached_has_bits & 0x00001000u) {
      nmaxautothrow_ = from.nmaxautothrow_;
    }
    if (cached_has_bits & 0x00002000u) {
      nentrustwait_ = from.nentrustwait_;
    }
    if (cached_has_bits & 0x00004000u) {
      bneeddeposit_ = from.bneeddeposit_;
    }
    if (cached_has_bits & 0x00008000u) {
      bforbiddesert_ = from.bforbiddesert_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      bquickcatch_ = from.bquickcatch_;
    }
    if (cached_has_bits & 0x00020000u) {
      ballowchi_ = from.ballowchi_;
    }
    if (cached_has_bits & 0x00040000u) {
      bangangshow_ = from.bangangshow_;
    }
    if (cached_has_bits & 0x00080000u) {
      bjokersortin_ = from.bjokersortin_;
    }
    if (cached_has_bits & 0x00100000u) {
      bbaibannosort_ = from.bbaibannosort_;
    }
    if (cached_has_bits & 0x00200000u) {
      nbeginno_ = from.nbeginno_;
    }
    if (cached_has_bits & 0x00400000u) {
      njokerno_ = from.njokerno_;
    }
    if (cached_has_bits & 0x00800000u) {
      njokerid_ = from.njokerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      njokerid2_ = from.njokerid2_;
    }
    if (cached_has_bits & 0x02000000u) {
      nfanid_ = from.nfanid_;
    }
    if (cached_has_bits & 0x04000000u) {
      ntailtaken_ = from.ntailtaken_;
    }
    if (cached_has_bits & 0x08000000u) {
      ncurrentcatch_ = from.ncurrentcatch_;
    }
    if (cached_has_bits & 0x10000000u) {
      npgchwait_ = from.npgchwait_;
    }
    if (cached_has_bits & 0x20000000u) {
      npgchwaitex_ = from.npgchwaitex_;
    }
    if (cached_has_bits & 0x40000000u) {
      nyqwautoplaywait_ = from.nyqwautoplaywait_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PB_MJ_START_DATA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_MJ_START_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_MJ_START_DATA::CopyFrom(const PB_MJ_START_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_MJ_START_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MJ_START_DATA::IsInitialized() const {
  return true;
}

void PB_MJ_START_DATA::Swap(PB_MJ_START_DATA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_MJ_START_DATA::InternalSwap(PB_MJ_START_DATA* other) {
  using std::swap;
  ndices_.InternalSwap(&other->ndices_);
  nprehuonefeng13bkflag_.InternalSwap(&other->nprehuonefeng13bkflag_);
  naddgainsscore_.InternalSwap(&other->naddgainsscore_);
  szserialno_.Swap(&other->szserialno_);
  swap(nboutcount_, other->nboutcount_);
  swap(nbasedeposit_, other->nbasedeposit_);
  swap(nbasescore_, other->nbasescore_);
  swap(nbanker_, other->nbanker_);
  swap(nbankerhold_, other->nbankerhold_);
  swap(ncurrentchair_, other->ncurrentchair_);
  swap(dwstatus_, other->dwstatus_);
  swap(dwcurrentflags_, other->dwcurrentflags_);
  swap(nfirstcatch_, other->nfirstcatch_);
  swap(nfirstthrow_, other->nfirstthrow_);
  swap(nthrowwait_, other->nthrowwait_);
  swap(nmaxautothrow_, other->nmaxautothrow_);
  swap(nentrustwait_, other->nentrustwait_);
  swap(bneeddeposit_, other->bneeddeposit_);
  swap(bforbiddesert_, other->bforbiddesert_);
  swap(bquickcatch_, other->bquickcatch_);
  swap(ballowchi_, other->ballowchi_);
  swap(bangangshow_, other->bangangshow_);
  swap(bjokersortin_, other->bjokersortin_);
  swap(bbaibannosort_, other->bbaibannosort_);
  swap(nbeginno_, other->nbeginno_);
  swap(njokerno_, other->njokerno_);
  swap(njokerid_, other->njokerid_);
  swap(njokerid2_, other->njokerid2_);
  swap(nfanid_, other->nfanid_);
  swap(ntailtaken_, other->ntailtaken_);
  swap(ncurrentcatch_, other->ncurrentcatch_);
  swap(npgchwait_, other->npgchwait_);
  swap(npgchwaitex_, other->npgchwaitex_);
  swap(nyqwautoplaywait_, other->nyqwautoplaywait_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_MJ_START_DATA::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_CARDS_UNIT::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_CARDS_UNIT::kNCardChairFieldNumber;
const int PB_CARDS_UNIT::kNCardIDsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_CARDS_UNIT::PB_CARDS_UNIT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_CARDS_UNIT();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_CARDS_UNIT)
}
PB_CARDS_UNIT::PB_CARDS_UNIT(const PB_CARDS_UNIT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ncardids_(from.ncardids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ncardchair_ = from.ncardchair_;
  // @@protoc_insertion_point(copy_constructor:game.PB_CARDS_UNIT)
}

void PB_CARDS_UNIT::SharedCtor() {
  _cached_size_ = 0;
  ncardchair_ = 0;
}

PB_CARDS_UNIT::~PB_CARDS_UNIT() {
  // @@protoc_insertion_point(destructor:game.PB_CARDS_UNIT)
  SharedDtor();
}

void PB_CARDS_UNIT::SharedDtor() {
}

void PB_CARDS_UNIT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_CARDS_UNIT::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_CARDS_UNIT& PB_CARDS_UNIT::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_CARDS_UNIT();
  return *internal_default_instance();
}

PB_CARDS_UNIT* PB_CARDS_UNIT::New(::google::protobuf::Arena* arena) const {
  PB_CARDS_UNIT* n = new PB_CARDS_UNIT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_CARDS_UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_CARDS_UNIT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ncardids_.Clear();
  ncardchair_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_CARDS_UNIT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_CARDS_UNIT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 nCardChair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ncardchair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ncardchair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nCardIDs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16u, input, this->mutable_ncardids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_ncardids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_CARDS_UNIT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_CARDS_UNIT)
  return false;
#undef DO_
}

void PB_CARDS_UNIT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_CARDS_UNIT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nCardChair = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->ncardchair(), output);
  }

  // repeated sint32 nCardIDs = 2;
  for (int i = 0, n = this->ncardids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->ncardids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_CARDS_UNIT)
}

::google::protobuf::uint8* PB_CARDS_UNIT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_CARDS_UNIT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nCardChair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->ncardchair(), target);
  }

  // repeated sint32 nCardIDs = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(2, this->ncardids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_CARDS_UNIT)
  return target;
}

size_t PB_CARDS_UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_CARDS_UNIT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 nCardIDs = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->ncardids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ncardids_size());
    total_size += data_size;
  }

  // optional sint32 nCardChair = 1;
  if (has_ncardchair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->ncardchair());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_CARDS_UNIT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_CARDS_UNIT)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_CARDS_UNIT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_CARDS_UNIT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_CARDS_UNIT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_CARDS_UNIT)
    MergeFrom(*source);
  }
}

void PB_CARDS_UNIT::MergeFrom(const PB_CARDS_UNIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_CARDS_UNIT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ncardids_.MergeFrom(from.ncardids_);
  if (from.has_ncardchair()) {
    set_ncardchair(from.ncardchair());
  }
}

void PB_CARDS_UNIT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_CARDS_UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_CARDS_UNIT::CopyFrom(const PB_CARDS_UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_CARDS_UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_CARDS_UNIT::IsInitialized() const {
  return true;
}

void PB_CARDS_UNIT::Swap(PB_CARDS_UNIT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_CARDS_UNIT::InternalSwap(PB_CARDS_UNIT* other) {
  using std::swap;
  ncardids_.InternalSwap(&other->ncardids_);
  swap(ncardchair_, other->ncardchair_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_CARDS_UNIT::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_CARDS_UNIT_CHAIR::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_CARDS_UNIT_CHAIR::kChairCardsunitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_CARDS_UNIT_CHAIR::PB_CARDS_UNIT_CHAIR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_CARDS_UNIT_CHAIR();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_CARDS_UNIT_CHAIR)
}
PB_CARDS_UNIT_CHAIR::PB_CARDS_UNIT_CHAIR(const PB_CARDS_UNIT_CHAIR& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      chair_cardsunit_(from.chair_cardsunit_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.PB_CARDS_UNIT_CHAIR)
}

void PB_CARDS_UNIT_CHAIR::SharedCtor() {
  _cached_size_ = 0;
}

PB_CARDS_UNIT_CHAIR::~PB_CARDS_UNIT_CHAIR() {
  // @@protoc_insertion_point(destructor:game.PB_CARDS_UNIT_CHAIR)
  SharedDtor();
}

void PB_CARDS_UNIT_CHAIR::SharedDtor() {
}

void PB_CARDS_UNIT_CHAIR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_CARDS_UNIT_CHAIR::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_CARDS_UNIT_CHAIR& PB_CARDS_UNIT_CHAIR::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_CARDS_UNIT_CHAIR();
  return *internal_default_instance();
}

PB_CARDS_UNIT_CHAIR* PB_CARDS_UNIT_CHAIR::New(::google::protobuf::Arena* arena) const {
  PB_CARDS_UNIT_CHAIR* n = new PB_CARDS_UNIT_CHAIR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_CARDS_UNIT_CHAIR::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_CARDS_UNIT_CHAIR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_cardsunit_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_CARDS_UNIT_CHAIR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_CARDS_UNIT_CHAIR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game.PB_CARDS_UNIT chair_cardsunit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_chair_cardsunit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_CARDS_UNIT_CHAIR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_CARDS_UNIT_CHAIR)
  return false;
#undef DO_
}

void PB_CARDS_UNIT_CHAIR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_CARDS_UNIT_CHAIR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.PB_CARDS_UNIT chair_cardsunit = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chair_cardsunit_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chair_cardsunit(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_CARDS_UNIT_CHAIR)
}

::google::protobuf::uint8* PB_CARDS_UNIT_CHAIR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_CARDS_UNIT_CHAIR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.PB_CARDS_UNIT chair_cardsunit = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chair_cardsunit_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chair_cardsunit(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_CARDS_UNIT_CHAIR)
  return target;
}

size_t PB_CARDS_UNIT_CHAIR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_CARDS_UNIT_CHAIR)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .game.PB_CARDS_UNIT chair_cardsunit = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chair_cardsunit_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chair_cardsunit(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_CARDS_UNIT_CHAIR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_CARDS_UNIT_CHAIR)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_CARDS_UNIT_CHAIR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_CARDS_UNIT_CHAIR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_CARDS_UNIT_CHAIR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_CARDS_UNIT_CHAIR)
    MergeFrom(*source);
  }
}

void PB_CARDS_UNIT_CHAIR::MergeFrom(const PB_CARDS_UNIT_CHAIR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_CARDS_UNIT_CHAIR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chair_cardsunit_.MergeFrom(from.chair_cardsunit_);
}

void PB_CARDS_UNIT_CHAIR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_CARDS_UNIT_CHAIR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_CARDS_UNIT_CHAIR::CopyFrom(const PB_CARDS_UNIT_CHAIR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_CARDS_UNIT_CHAIR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_CARDS_UNIT_CHAIR::IsInitialized() const {
  return true;
}

void PB_CARDS_UNIT_CHAIR::Swap(PB_CARDS_UNIT_CHAIR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_CARDS_UNIT_CHAIR::InternalSwap(PB_CARDS_UNIT_CHAIR* other) {
  using std::swap;
  chair_cardsunit_.InternalSwap(&other->chair_cardsunit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_CARDS_UNIT_CHAIR::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_INT_CHAIR::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_INT_CHAIR::kNCardIDsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_INT_CHAIR::PB_INT_CHAIR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_INT_CHAIR();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_INT_CHAIR)
}
PB_INT_CHAIR::PB_INT_CHAIR(const PB_INT_CHAIR& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ncardids_(from.ncardids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.PB_INT_CHAIR)
}

void PB_INT_CHAIR::SharedCtor() {
  _cached_size_ = 0;
}

PB_INT_CHAIR::~PB_INT_CHAIR() {
  // @@protoc_insertion_point(destructor:game.PB_INT_CHAIR)
  SharedDtor();
}

void PB_INT_CHAIR::SharedDtor() {
}

void PB_INT_CHAIR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_INT_CHAIR::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_INT_CHAIR& PB_INT_CHAIR::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_INT_CHAIR();
  return *internal_default_instance();
}

PB_INT_CHAIR* PB_INT_CHAIR::New(::google::protobuf::Arena* arena) const {
  PB_INT_CHAIR* n = new PB_INT_CHAIR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_INT_CHAIR::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_INT_CHAIR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ncardids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_INT_CHAIR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_INT_CHAIR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 nCardIDs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 8u, input, this->mutable_ncardids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_ncardids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_INT_CHAIR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_INT_CHAIR)
  return false;
#undef DO_
}

void PB_INT_CHAIR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_INT_CHAIR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 nCardIDs = 1;
  for (int i = 0, n = this->ncardids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      1, this->ncardids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_INT_CHAIR)
}

::google::protobuf::uint8* PB_INT_CHAIR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_INT_CHAIR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 nCardIDs = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(1, this->ncardids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_INT_CHAIR)
  return target;
}

size_t PB_INT_CHAIR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_INT_CHAIR)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 nCardIDs = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->ncardids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ncardids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_INT_CHAIR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_INT_CHAIR)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_INT_CHAIR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_INT_CHAIR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_INT_CHAIR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_INT_CHAIR)
    MergeFrom(*source);
  }
}

void PB_INT_CHAIR::MergeFrom(const PB_INT_CHAIR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_INT_CHAIR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ncardids_.MergeFrom(from.ncardids_);
}

void PB_INT_CHAIR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_INT_CHAIR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_INT_CHAIR::CopyFrom(const PB_INT_CHAIR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_INT_CHAIR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_INT_CHAIR::IsInitialized() const {
  return true;
}

void PB_INT_CHAIR::Swap(PB_INT_CHAIR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_INT_CHAIR::InternalSwap(PB_INT_CHAIR* other) {
  using std::swap;
  ncardids_.InternalSwap(&other->ncardids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_INT_CHAIR::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_MJ_PLAY_DATA::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_MJ_PLAY_DATA::kPengCardsFieldNumber;
const int PB_MJ_PLAY_DATA::kNPengCountFieldNumber;
const int PB_MJ_PLAY_DATA::kChiCardsFieldNumber;
const int PB_MJ_PLAY_DATA::kNChiCountFieldNumber;
const int PB_MJ_PLAY_DATA::kMnGangCardsFieldNumber;
const int PB_MJ_PLAY_DATA::kNMnGangCountFieldNumber;
const int PB_MJ_PLAY_DATA::kAnGangCardsFieldNumber;
const int PB_MJ_PLAY_DATA::kNAnGangCountFieldNumber;
const int PB_MJ_PLAY_DATA::kPnGangCardsFieldNumber;
const int PB_MJ_PLAY_DATA::kNPnGangCountFieldNumber;
const int PB_MJ_PLAY_DATA::kNOutCardsFieldNumber;
const int PB_MJ_PLAY_DATA::kNOutCountFieldNumber;
const int PB_MJ_PLAY_DATA::kNHuaCardsFieldNumber;
const int PB_MJ_PLAY_DATA::kNHuaCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_MJ_PLAY_DATA::PB_MJ_PLAY_DATA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_MJ_PLAY_DATA();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_MJ_PLAY_DATA)
}
PB_MJ_PLAY_DATA::PB_MJ_PLAY_DATA(const PB_MJ_PLAY_DATA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pengcards_(from.pengcards_),
      npengcount_(from.npengcount_),
      chicards_(from.chicards_),
      nchicount_(from.nchicount_),
      mngangcards_(from.mngangcards_),
      nmngangcount_(from.nmngangcount_),
      angangcards_(from.angangcards_),
      nangangcount_(from.nangangcount_),
      pngangcards_(from.pngangcards_),
      npngangcount_(from.npngangcount_),
      noutcards_(from.noutcards_),
      noutcount_(from.noutcount_),
      nhuacards_(from.nhuacards_),
      nhuacount_(from.nhuacount_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.PB_MJ_PLAY_DATA)
}

void PB_MJ_PLAY_DATA::SharedCtor() {
  _cached_size_ = 0;
}

PB_MJ_PLAY_DATA::~PB_MJ_PLAY_DATA() {
  // @@protoc_insertion_point(destructor:game.PB_MJ_PLAY_DATA)
  SharedDtor();
}

void PB_MJ_PLAY_DATA::SharedDtor() {
}

void PB_MJ_PLAY_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_MJ_PLAY_DATA::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_MJ_PLAY_DATA& PB_MJ_PLAY_DATA::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_MJ_PLAY_DATA();
  return *internal_default_instance();
}

PB_MJ_PLAY_DATA* PB_MJ_PLAY_DATA::New(::google::protobuf::Arena* arena) const {
  PB_MJ_PLAY_DATA* n = new PB_MJ_PLAY_DATA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_MJ_PLAY_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_MJ_PLAY_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pengcards_.Clear();
  npengcount_.Clear();
  chicards_.Clear();
  nchicount_.Clear();
  mngangcards_.Clear();
  nmngangcount_.Clear();
  angangcards_.Clear();
  nangangcount_.Clear();
  pngangcards_.Clear();
  npngangcount_.Clear();
  noutcards_.Clear();
  noutcount_.Clear();
  nhuacards_.Clear();
  nhuacount_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_MJ_PLAY_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_MJ_PLAY_DATA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game.PB_CARDS_UNIT_CHAIR PengCards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_pengcards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nPengCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16u, input, this->mutable_npengcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_npengcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .game.PB_CARDS_UNIT_CHAIR ChiCards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_chicards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nChiCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 32u, input, this->mutable_nchicount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nchicount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .game.PB_CARDS_UNIT_CHAIR MnGangCards = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_mngangcards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nMnGangCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 48u, input, this->mutable_nmngangcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nmngangcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .game.PB_CARDS_UNIT_CHAIR AnGangCards = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_angangcards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nAnGangCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 64u, input, this->mutable_nangangcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nangangcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .game.PB_CARDS_UNIT_CHAIR PnGangCards = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_pngangcards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nPnGangCount = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 80u, input, this->mutable_npngangcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_npngangcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .game.PB_INT_CHAIR nOutCards = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_noutcards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nOutCount = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 96u, input, this->mutable_noutcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_noutcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .game.PB_INT_CHAIR nHuaCards = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_nhuacards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nHuaCount = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 112u, input, this->mutable_nhuacount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nhuacount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_MJ_PLAY_DATA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_MJ_PLAY_DATA)
  return false;
#undef DO_
}

void PB_MJ_PLAY_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_MJ_PLAY_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.PB_CARDS_UNIT_CHAIR PengCards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pengcards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pengcards(static_cast<int>(i)), output);
  }

  // repeated sint32 nPengCount = 2;
  for (int i = 0, n = this->npengcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->npengcount(i), output);
  }

  // repeated .game.PB_CARDS_UNIT_CHAIR ChiCards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chicards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chicards(static_cast<int>(i)), output);
  }

  // repeated sint32 nChiCount = 4;
  for (int i = 0, n = this->nchicount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      4, this->nchicount(i), output);
  }

  // repeated .game.PB_CARDS_UNIT_CHAIR MnGangCards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mngangcards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mngangcards(static_cast<int>(i)), output);
  }

  // repeated sint32 nMnGangCount = 6;
  for (int i = 0, n = this->nmngangcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      6, this->nmngangcount(i), output);
  }

  // repeated .game.PB_CARDS_UNIT_CHAIR AnGangCards = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->angangcards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->angangcards(static_cast<int>(i)), output);
  }

  // repeated sint32 nAnGangCount = 8;
  for (int i = 0, n = this->nangangcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      8, this->nangangcount(i), output);
  }

  // repeated .game.PB_CARDS_UNIT_CHAIR PnGangCards = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pngangcards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pngangcards(static_cast<int>(i)), output);
  }

  // repeated sint32 nPnGangCount = 10;
  for (int i = 0, n = this->npngangcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      10, this->npngangcount(i), output);
  }

  // repeated .game.PB_INT_CHAIR nOutCards = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->noutcards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->noutcards(static_cast<int>(i)), output);
  }

  // repeated sint32 nOutCount = 12;
  for (int i = 0, n = this->noutcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      12, this->noutcount(i), output);
  }

  // repeated .game.PB_INT_CHAIR nHuaCards = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nhuacards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->nhuacards(static_cast<int>(i)), output);
  }

  // repeated sint32 nHuaCount = 14;
  for (int i = 0, n = this->nhuacount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      14, this->nhuacount(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_MJ_PLAY_DATA)
}

::google::protobuf::uint8* PB_MJ_PLAY_DATA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_MJ_PLAY_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.PB_CARDS_UNIT_CHAIR PengCards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pengcards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pengcards(static_cast<int>(i)), deterministic, target);
  }

  // repeated sint32 nPengCount = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(2, this->npengcount_, target);

  // repeated .game.PB_CARDS_UNIT_CHAIR ChiCards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chicards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->chicards(static_cast<int>(i)), deterministic, target);
  }

  // repeated sint32 nChiCount = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(4, this->nchicount_, target);

  // repeated .game.PB_CARDS_UNIT_CHAIR MnGangCards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mngangcards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->mngangcards(static_cast<int>(i)), deterministic, target);
  }

  // repeated sint32 nMnGangCount = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(6, this->nmngangcount_, target);

  // repeated .game.PB_CARDS_UNIT_CHAIR AnGangCards = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->angangcards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->angangcards(static_cast<int>(i)), deterministic, target);
  }

  // repeated sint32 nAnGangCount = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(8, this->nangangcount_, target);

  // repeated .game.PB_CARDS_UNIT_CHAIR PnGangCards = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pngangcards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->pngangcards(static_cast<int>(i)), deterministic, target);
  }

  // repeated sint32 nPnGangCount = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(10, this->npngangcount_, target);

  // repeated .game.PB_INT_CHAIR nOutCards = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->noutcards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->noutcards(static_cast<int>(i)), deterministic, target);
  }

  // repeated sint32 nOutCount = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(12, this->noutcount_, target);

  // repeated .game.PB_INT_CHAIR nHuaCards = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nhuacards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->nhuacards(static_cast<int>(i)), deterministic, target);
  }

  // repeated sint32 nHuaCount = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(14, this->nhuacount_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_MJ_PLAY_DATA)
  return target;
}

size_t PB_MJ_PLAY_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_MJ_PLAY_DATA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .game.PB_CARDS_UNIT_CHAIR PengCards = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pengcards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pengcards(static_cast<int>(i)));
    }
  }

  // repeated sint32 nPengCount = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->npengcount_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->npengcount_size());
    total_size += data_size;
  }

  // repeated .game.PB_CARDS_UNIT_CHAIR ChiCards = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->chicards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chicards(static_cast<int>(i)));
    }
  }

  // repeated sint32 nChiCount = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nchicount_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nchicount_size());
    total_size += data_size;
  }

  // repeated .game.PB_CARDS_UNIT_CHAIR MnGangCards = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->mngangcards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mngangcards(static_cast<int>(i)));
    }
  }

  // repeated sint32 nMnGangCount = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nmngangcount_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nmngangcount_size());
    total_size += data_size;
  }

  // repeated .game.PB_CARDS_UNIT_CHAIR AnGangCards = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->angangcards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->angangcards(static_cast<int>(i)));
    }
  }

  // repeated sint32 nAnGangCount = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nangangcount_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nangangcount_size());
    total_size += data_size;
  }

  // repeated .game.PB_CARDS_UNIT_CHAIR PnGangCards = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->pngangcards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pngangcards(static_cast<int>(i)));
    }
  }

  // repeated sint32 nPnGangCount = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->npngangcount_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->npngangcount_size());
    total_size += data_size;
  }

  // repeated .game.PB_INT_CHAIR nOutCards = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->noutcards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->noutcards(static_cast<int>(i)));
    }
  }

  // repeated sint32 nOutCount = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->noutcount_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->noutcount_size());
    total_size += data_size;
  }

  // repeated .game.PB_INT_CHAIR nHuaCards = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->nhuacards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nhuacards(static_cast<int>(i)));
    }
  }

  // repeated sint32 nHuaCount = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nhuacount_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nhuacount_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_MJ_PLAY_DATA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_MJ_PLAY_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_MJ_PLAY_DATA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_MJ_PLAY_DATA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_MJ_PLAY_DATA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_MJ_PLAY_DATA)
    MergeFrom(*source);
  }
}

void PB_MJ_PLAY_DATA::MergeFrom(const PB_MJ_PLAY_DATA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_MJ_PLAY_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pengcards_.MergeFrom(from.pengcards_);
  npengcount_.MergeFrom(from.npengcount_);
  chicards_.MergeFrom(from.chicards_);
  nchicount_.MergeFrom(from.nchicount_);
  mngangcards_.MergeFrom(from.mngangcards_);
  nmngangcount_.MergeFrom(from.nmngangcount_);
  angangcards_.MergeFrom(from.angangcards_);
  nangangcount_.MergeFrom(from.nangangcount_);
  pngangcards_.MergeFrom(from.pngangcards_);
  npngangcount_.MergeFrom(from.npngangcount_);
  noutcards_.MergeFrom(from.noutcards_);
  noutcount_.MergeFrom(from.noutcount_);
  nhuacards_.MergeFrom(from.nhuacards_);
  nhuacount_.MergeFrom(from.nhuacount_);
}

void PB_MJ_PLAY_DATA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_MJ_PLAY_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_MJ_PLAY_DATA::CopyFrom(const PB_MJ_PLAY_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_MJ_PLAY_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MJ_PLAY_DATA::IsInitialized() const {
  return true;
}

void PB_MJ_PLAY_DATA::Swap(PB_MJ_PLAY_DATA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_MJ_PLAY_DATA::InternalSwap(PB_MJ_PLAY_DATA* other) {
  using std::swap;
  pengcards_.InternalSwap(&other->pengcards_);
  npengcount_.InternalSwap(&other->npengcount_);
  chicards_.InternalSwap(&other->chicards_);
  nchicount_.InternalSwap(&other->nchicount_);
  mngangcards_.InternalSwap(&other->mngangcards_);
  nmngangcount_.InternalSwap(&other->nmngangcount_);
  angangcards_.InternalSwap(&other->angangcards_);
  nangangcount_.InternalSwap(&other->nangangcount_);
  pngangcards_.InternalSwap(&other->pngangcards_);
  npngangcount_.InternalSwap(&other->npngangcount_);
  noutcards_.InternalSwap(&other->noutcards_);
  noutcount_.InternalSwap(&other->noutcount_);
  nhuacards_.InternalSwap(&other->nhuacards_);
  nhuacount_.InternalSwap(&other->nhuacount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_MJ_PLAY_DATA::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_GAME_TABLE_INFO::InitAsDefaultInstance() {
  ::game::_PB_GAME_TABLE_INFO_default_instance_._instance.get_mutable()->main_ = const_cast< ::tc::MJTableInfo*>(
      ::tc::MJTableInfo::internal_default_instance());
  ::game::_PB_GAME_TABLE_INFO_default_instance_._instance.get_mutable()->startinfo_ = const_cast< ::game::PB_MJ_START_DATA*>(
      ::game::PB_MJ_START_DATA::internal_default_instance());
  ::game::_PB_GAME_TABLE_INFO_default_instance_._instance.get_mutable()->playdata_ = const_cast< ::game::PB_MJ_PLAY_DATA*>(
      ::game::PB_MJ_PLAY_DATA::internal_default_instance());
  ::game::_PB_GAME_TABLE_INFO_default_instance_._instance.get_mutable()->tingdetail_ = const_cast< ::game::PB_CARD_TING_DETAIL*>(
      ::game::PB_CARD_TING_DETAIL::internal_default_instance());
}
void PB_GAME_TABLE_INFO::clear_main() {
  if (main_ != NULL) main_->Clear();
  clear_has_main();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_GAME_TABLE_INFO::kMainFieldNumber;
const int PB_GAME_TABLE_INFO::kStartInfoFieldNumber;
const int PB_GAME_TABLE_INFO::kPlayDataFieldNumber;
const int PB_GAME_TABLE_INFO::kDwGameFlagsFieldNumber;
const int PB_GAME_TABLE_INFO::kNCurrentLeftOperateTimeFieldNumber;
const int PB_GAME_TABLE_INFO::kDwUserStatusFieldNumber;
const int PB_GAME_TABLE_INFO::kNCardsCountFieldNumber;
const int PB_GAME_TABLE_INFO::kNChairCardsFieldNumber;
const int PB_GAME_TABLE_INFO::kNAskExitFieldNumber;
const int PB_GAME_TABLE_INFO::kNResultDiffFieldNumber;
const int PB_GAME_TABLE_INFO::kNTotalResultFieldNumber;
const int PB_GAME_TABLE_INFO::kDwPGCHFlagsFieldNumber;
const int PB_GAME_TABLE_INFO::kNQghFlagFieldNumber;
const int PB_GAME_TABLE_INFO::kNQghIDFieldNumber;
const int PB_GAME_TABLE_INFO::kNQghChairFieldNumber;
const int PB_GAME_TABLE_INFO::kTingdetailFieldNumber;
const int PB_GAME_TABLE_INFO::kNTingCardsDXXWFieldNumber;
const int PB_GAME_TABLE_INFO::kDwTimeStampFieldNumber;
const int PB_GAME_TABLE_INFO::kGameFlags2FieldNumber;
const int PB_GAME_TABLE_INFO::kBaoTingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_GAME_TABLE_INFO::PB_GAME_TABLE_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_GAME_TABLE_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_GAME_TABLE_INFO)
}
PB_GAME_TABLE_INFO::PB_GAME_TABLE_INFO(const PB_GAME_TABLE_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dwuserstatus_(from.dwuserstatus_),
      ncardscount_(from.ncardscount_),
      nchaircards_(from.nchaircards_),
      naskexit_(from.naskexit_),
      nresultdiff_(from.nresultdiff_),
      ntotalresult_(from.ntotalresult_),
      dwpgchflags_(from.dwpgchflags_),
      ntingcardsdxxw_(from.ntingcardsdxxw_),
      bao_ting_(from.bao_ting_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_main()) {
    main_ = new ::tc::MJTableInfo(*from.main_);
  } else {
    main_ = NULL;
  }
  if (from.has_startinfo()) {
    startinfo_ = new ::game::PB_MJ_START_DATA(*from.startinfo_);
  } else {
    startinfo_ = NULL;
  }
  if (from.has_playdata()) {
    playdata_ = new ::game::PB_MJ_PLAY_DATA(*from.playdata_);
  } else {
    playdata_ = NULL;
  }
  if (from.has_tingdetail()) {
    tingdetail_ = new ::game::PB_CARD_TING_DETAIL(*from.tingdetail_);
  } else {
    tingdetail_ = NULL;
  }
  ::memcpy(&dwgameflags_, &from.dwgameflags_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_flags2_) -
    reinterpret_cast<char*>(&dwgameflags_)) + sizeof(game_flags2_));
  // @@protoc_insertion_point(copy_constructor:game.PB_GAME_TABLE_INFO)
}

void PB_GAME_TABLE_INFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&main_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_flags2_) -
      reinterpret_cast<char*>(&main_)) + sizeof(game_flags2_));
}

PB_GAME_TABLE_INFO::~PB_GAME_TABLE_INFO() {
  // @@protoc_insertion_point(destructor:game.PB_GAME_TABLE_INFO)
  SharedDtor();
}

void PB_GAME_TABLE_INFO::SharedDtor() {
  if (this != internal_default_instance()) delete main_;
  if (this != internal_default_instance()) delete startinfo_;
  if (this != internal_default_instance()) delete playdata_;
  if (this != internal_default_instance()) delete tingdetail_;
}

void PB_GAME_TABLE_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_GAME_TABLE_INFO::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_GAME_TABLE_INFO& PB_GAME_TABLE_INFO::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_GAME_TABLE_INFO();
  return *internal_default_instance();
}

PB_GAME_TABLE_INFO* PB_GAME_TABLE_INFO::New(::google::protobuf::Arena* arena) const {
  PB_GAME_TABLE_INFO* n = new PB_GAME_TABLE_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_GAME_TABLE_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_GAME_TABLE_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dwuserstatus_.Clear();
  ncardscount_.Clear();
  nchaircards_.Clear();
  naskexit_.Clear();
  nresultdiff_.Clear();
  ntotalresult_.Clear();
  dwpgchflags_.Clear();
  ntingcardsdxxw_.Clear();
  bao_ting_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(main_ != NULL);
      main_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(startinfo_ != NULL);
      startinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(playdata_ != NULL);
      playdata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tingdetail_ != NULL);
      tingdetail_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&dwgameflags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nqghid_) -
        reinterpret_cast<char*>(&dwgameflags_)) + sizeof(nqghid_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&nqghchair_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_flags2_) -
        reinterpret_cast<char*>(&nqghchair_)) + sizeof(game_flags2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_GAME_TABLE_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_GAME_TABLE_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tc.MJTableInfo main = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_main()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .game.PB_MJ_START_DATA StartInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .game.PB_MJ_PLAY_DATA PlayData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dwGameFlags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_dwgameflags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwgameflags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nCurrentLeftOperateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ncurrentleftoperatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ncurrentleftoperatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dwUserStatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_dwuserstatus())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwuserstatus())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nCardsCount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 56u, input, this->mutable_ncardscount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_ncardscount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nChairCards = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 64u, input, this->mutable_nchaircards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nchaircards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nAskExit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 72u, input, this->mutable_naskexit())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_naskexit())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nResultDiff = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 80u, input, this->mutable_nresultdiff())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nresultdiff())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nTotalResult = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 88u, input, this->mutable_ntotalresult())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_ntotalresult())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dwPGCHFlags = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96u, input, this->mutable_dwpgchflags())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwpgchflags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nQghFlag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_nqghflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nqghflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nQghID = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_nqghid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nqghid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nQghChair = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_nqghchair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nqghchair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .game.PB_CARD_TING_DETAIL tingdetail = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tingdetail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nTingCardsDXXW = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 136u, input, this->mutable_ntingcardsdxxw())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_ntingcardsdxxw())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 dwTimeStamp = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_dwtimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dwtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_flags2 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_game_flags2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_flags2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 bao_ting = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 160u, input, this->mutable_bao_ting())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_bao_ting())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_GAME_TABLE_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_GAME_TABLE_INFO)
  return false;
#undef DO_
}

void PB_GAME_TABLE_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_GAME_TABLE_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tc.MJTableInfo main = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->main_, output);
  }

  // optional .game.PB_MJ_START_DATA StartInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->startinfo_, output);
  }

  // optional .game.PB_MJ_PLAY_DATA PlayData = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->playdata_, output);
  }

  // optional int32 dwGameFlags = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dwgameflags(), output);
  }

  // optional sint32 nCurrentLeftOperateTime = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->ncurrentleftoperatetime(), output);
  }

  // repeated int32 dwUserStatus = 6;
  for (int i = 0, n = this->dwuserstatus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->dwuserstatus(i), output);
  }

  // repeated sint32 nCardsCount = 7;
  for (int i = 0, n = this->ncardscount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      7, this->ncardscount(i), output);
  }

  // repeated sint32 nChairCards = 8;
  for (int i = 0, n = this->nchaircards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      8, this->nchaircards(i), output);
  }

  // repeated sint32 nAskExit = 9;
  for (int i = 0, n = this->naskexit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      9, this->naskexit(i), output);
  }

  // repeated sint32 nResultDiff = 10;
  for (int i = 0, n = this->nresultdiff_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      10, this->nresultdiff(i), output);
  }

  // repeated sint32 nTotalResult = 11;
  for (int i = 0, n = this->ntotalresult_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      11, this->ntotalresult(i), output);
  }

  // repeated int32 dwPGCHFlags = 12;
  for (int i = 0, n = this->dwpgchflags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->dwpgchflags(i), output);
  }

  // optional sint32 nQghFlag = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->nqghflag(), output);
  }

  // optional sint32 nQghID = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->nqghid(), output);
  }

  // optional sint32 nQghChair = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->nqghchair(), output);
  }

  // optional .game.PB_CARD_TING_DETAIL tingdetail = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->tingdetail_, output);
  }

  // repeated sint32 nTingCardsDXXW = 17;
  for (int i = 0, n = this->ntingcardsdxxw_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      17, this->ntingcardsdxxw(i), output);
  }

  // optional sint32 dwTimeStamp = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->dwtimestamp(), output);
  }

  // optional int32 game_flags2 = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->game_flags2(), output);
  }

  // repeated sint32 bao_ting = 20;
  for (int i = 0, n = this->bao_ting_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      20, this->bao_ting(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_GAME_TABLE_INFO)
}

::google::protobuf::uint8* PB_GAME_TABLE_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_GAME_TABLE_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tc.MJTableInfo main = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->main_, deterministic, target);
  }

  // optional .game.PB_MJ_START_DATA StartInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->startinfo_, deterministic, target);
  }

  // optional .game.PB_MJ_PLAY_DATA PlayData = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->playdata_, deterministic, target);
  }

  // optional int32 dwGameFlags = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dwgameflags(), target);
  }

  // optional sint32 nCurrentLeftOperateTime = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->ncurrentleftoperatetime(), target);
  }

  // repeated int32 dwUserStatus = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->dwuserstatus_, target);

  // repeated sint32 nCardsCount = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(7, this->ncardscount_, target);

  // repeated sint32 nChairCards = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(8, this->nchaircards_, target);

  // repeated sint32 nAskExit = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(9, this->naskexit_, target);

  // repeated sint32 nResultDiff = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(10, this->nresultdiff_, target);

  // repeated sint32 nTotalResult = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(11, this->ntotalresult_, target);

  // repeated int32 dwPGCHFlags = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(12, this->dwpgchflags_, target);

  // optional sint32 nQghFlag = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->nqghflag(), target);
  }

  // optional sint32 nQghID = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->nqghid(), target);
  }

  // optional sint32 nQghChair = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->nqghchair(), target);
  }

  // optional .game.PB_CARD_TING_DETAIL tingdetail = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->tingdetail_, deterministic, target);
  }

  // repeated sint32 nTingCardsDXXW = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(17, this->ntingcardsdxxw_, target);

  // optional sint32 dwTimeStamp = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->dwtimestamp(), target);
  }

  // optional int32 game_flags2 = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->game_flags2(), target);
  }

  // repeated sint32 bao_ting = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(20, this->bao_ting_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_GAME_TABLE_INFO)
  return target;
}

size_t PB_GAME_TABLE_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_GAME_TABLE_INFO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 dwUserStatus = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dwuserstatus_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dwuserstatus_size());
    total_size += data_size;
  }

  // repeated sint32 nCardsCount = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->ncardscount_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ncardscount_size());
    total_size += data_size;
  }

  // repeated sint32 nChairCards = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nchaircards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nchaircards_size());
    total_size += data_size;
  }

  // repeated sint32 nAskExit = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->naskexit_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->naskexit_size());
    total_size += data_size;
  }

  // repeated sint32 nResultDiff = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nresultdiff_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nresultdiff_size());
    total_size += data_size;
  }

  // repeated sint32 nTotalResult = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->ntotalresult_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ntotalresult_size());
    total_size += data_size;
  }

  // repeated int32 dwPGCHFlags = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dwpgchflags_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dwpgchflags_size());
    total_size += data_size;
  }

  // repeated sint32 nTingCardsDXXW = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->ntingcardsdxxw_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->ntingcardsdxxw_size());
    total_size += data_size;
  }

  // repeated sint32 bao_ting = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->bao_ting_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->bao_ting_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .tc.MJTableInfo main = 1;
    if (has_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->main_);
    }

    // optional .game.PB_MJ_START_DATA StartInfo = 2;
    if (has_startinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->startinfo_);
    }

    // optional .game.PB_MJ_PLAY_DATA PlayData = 3;
    if (has_playdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->playdata_);
    }

    // optional .game.PB_CARD_TING_DETAIL tingdetail = 16;
    if (has_tingdetail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->tingdetail_);
    }

    // optional int32 dwGameFlags = 4;
    if (has_dwgameflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwgameflags());
    }

    // optional sint32 nCurrentLeftOperateTime = 5;
    if (has_ncurrentleftoperatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ncurrentleftoperatetime());
    }

    // optional sint32 nQghFlag = 13;
    if (has_nqghflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nqghflag());
    }

    // optional sint32 nQghID = 14;
    if (has_nqghid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nqghid());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional sint32 nQghChair = 15;
    if (has_nqghchair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nqghchair());
    }

    // optional sint32 dwTimeStamp = 18;
    if (has_dwtimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dwtimestamp());
    }

    // optional int32 game_flags2 = 19;
    if (has_game_flags2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_flags2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_GAME_TABLE_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_GAME_TABLE_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_GAME_TABLE_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_GAME_TABLE_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_GAME_TABLE_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_GAME_TABLE_INFO)
    MergeFrom(*source);
  }
}

void PB_GAME_TABLE_INFO::MergeFrom(const PB_GAME_TABLE_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_GAME_TABLE_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dwuserstatus_.MergeFrom(from.dwuserstatus_);
  ncardscount_.MergeFrom(from.ncardscount_);
  nchaircards_.MergeFrom(from.nchaircards_);
  naskexit_.MergeFrom(from.naskexit_);
  nresultdiff_.MergeFrom(from.nresultdiff_);
  ntotalresult_.MergeFrom(from.ntotalresult_);
  dwpgchflags_.MergeFrom(from.dwpgchflags_);
  ntingcardsdxxw_.MergeFrom(from.ntingcardsdxxw_);
  bao_ting_.MergeFrom(from.bao_ting_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_main()->::tc::MJTableInfo::MergeFrom(from.main());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_startinfo()->::game::PB_MJ_START_DATA::MergeFrom(from.startinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_playdata()->::game::PB_MJ_PLAY_DATA::MergeFrom(from.playdata());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tingdetail()->::game::PB_CARD_TING_DETAIL::MergeFrom(from.tingdetail());
    }
    if (cached_has_bits & 0x00000010u) {
      dwgameflags_ = from.dwgameflags_;
    }
    if (cached_has_bits & 0x00000020u) {
      ncurrentleftoperatetime_ = from.ncurrentleftoperatetime_;
    }
    if (cached_has_bits & 0x00000040u) {
      nqghflag_ = from.nqghflag_;
    }
    if (cached_has_bits & 0x00000080u) {
      nqghid_ = from.nqghid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      nqghchair_ = from.nqghchair_;
    }
    if (cached_has_bits & 0x00000200u) {
      dwtimestamp_ = from.dwtimestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      game_flags2_ = from.game_flags2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PB_GAME_TABLE_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_GAME_TABLE_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_GAME_TABLE_INFO::CopyFrom(const PB_GAME_TABLE_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_GAME_TABLE_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_GAME_TABLE_INFO::IsInitialized() const {
  return true;
}

void PB_GAME_TABLE_INFO::Swap(PB_GAME_TABLE_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_GAME_TABLE_INFO::InternalSwap(PB_GAME_TABLE_INFO* other) {
  using std::swap;
  dwuserstatus_.InternalSwap(&other->dwuserstatus_);
  ncardscount_.InternalSwap(&other->ncardscount_);
  nchaircards_.InternalSwap(&other->nchaircards_);
  naskexit_.InternalSwap(&other->naskexit_);
  nresultdiff_.InternalSwap(&other->nresultdiff_);
  ntotalresult_.InternalSwap(&other->ntotalresult_);
  dwpgchflags_.InternalSwap(&other->dwpgchflags_);
  ntingcardsdxxw_.InternalSwap(&other->ntingcardsdxxw_);
  bao_ting_.InternalSwap(&other->bao_ting_);
  swap(main_, other->main_);
  swap(startinfo_, other->startinfo_);
  swap(playdata_, other->playdata_);
  swap(tingdetail_, other->tingdetail_);
  swap(dwgameflags_, other->dwgameflags_);
  swap(ncurrentleftoperatetime_, other->ncurrentleftoperatetime_);
  swap(nqghflag_, other->nqghflag_);
  swap(nqghid_, other->nqghid_);
  swap(nqghchair_, other->nqghchair_);
  swap(dwtimestamp_, other->dwtimestamp_);
  swap(game_flags2_, other->game_flags2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_GAME_TABLE_INFO::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_SOLOPLAYER_HEAD::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_SOLOPLAYER_HEAD::kNRoomIDFieldNumber;
const int PB_SOLOPLAYER_HEAD::kNTableNOFieldNumber;
const int PB_SOLOPLAYER_HEAD::kNPlayerCountFieldNumber;
const int PB_SOLOPLAYER_HEAD::kDwUserStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_SOLOPLAYER_HEAD::PB_SOLOPLAYER_HEAD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_SOLOPLAYER_HEAD();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_SOLOPLAYER_HEAD)
}
PB_SOLOPLAYER_HEAD::PB_SOLOPLAYER_HEAD(const PB_SOLOPLAYER_HEAD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dwuserstatus_(from.dwuserstatus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nroomid_, &from.nroomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nplayercount_) -
    reinterpret_cast<char*>(&nroomid_)) + sizeof(nplayercount_));
  // @@protoc_insertion_point(copy_constructor:game.PB_SOLOPLAYER_HEAD)
}

void PB_SOLOPLAYER_HEAD::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nroomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nplayercount_) -
      reinterpret_cast<char*>(&nroomid_)) + sizeof(nplayercount_));
}

PB_SOLOPLAYER_HEAD::~PB_SOLOPLAYER_HEAD() {
  // @@protoc_insertion_point(destructor:game.PB_SOLOPLAYER_HEAD)
  SharedDtor();
}

void PB_SOLOPLAYER_HEAD::SharedDtor() {
}

void PB_SOLOPLAYER_HEAD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_SOLOPLAYER_HEAD::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_SOLOPLAYER_HEAD& PB_SOLOPLAYER_HEAD::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_SOLOPLAYER_HEAD();
  return *internal_default_instance();
}

PB_SOLOPLAYER_HEAD* PB_SOLOPLAYER_HEAD::New(::google::protobuf::Arena* arena) const {
  PB_SOLOPLAYER_HEAD* n = new PB_SOLOPLAYER_HEAD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_SOLOPLAYER_HEAD::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_SOLOPLAYER_HEAD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dwuserstatus_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&nroomid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nplayercount_) -
        reinterpret_cast<char*>(&nroomid_)) + sizeof(nplayercount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_SOLOPLAYER_HEAD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_SOLOPLAYER_HEAD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 nRoomID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_nroomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nroomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nTableNO = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ntableno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ntableno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nPlayerCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nplayercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nplayercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dwUserStatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_dwuserstatus())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwuserstatus())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_SOLOPLAYER_HEAD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_SOLOPLAYER_HEAD)
  return false;
#undef DO_
}

void PB_SOLOPLAYER_HEAD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_SOLOPLAYER_HEAD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nRoomID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->nroomid(), output);
  }

  // optional sint32 nTableNO = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->ntableno(), output);
  }

  // optional sint32 nPlayerCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->nplayercount(), output);
  }

  // repeated int32 dwUserStatus = 4;
  for (int i = 0, n = this->dwuserstatus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->dwuserstatus(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_SOLOPLAYER_HEAD)
}

::google::protobuf::uint8* PB_SOLOPLAYER_HEAD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_SOLOPLAYER_HEAD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nRoomID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->nroomid(), target);
  }

  // optional sint32 nTableNO = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->ntableno(), target);
  }

  // optional sint32 nPlayerCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->nplayercount(), target);
  }

  // repeated int32 dwUserStatus = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->dwuserstatus_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_SOLOPLAYER_HEAD)
  return target;
}

size_t PB_SOLOPLAYER_HEAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_SOLOPLAYER_HEAD)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 dwUserStatus = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dwuserstatus_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dwuserstatus_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 nRoomID = 1;
    if (has_nroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nroomid());
    }

    // optional sint32 nTableNO = 2;
    if (has_ntableno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ntableno());
    }

    // optional sint32 nPlayerCount = 3;
    if (has_nplayercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nplayercount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_SOLOPLAYER_HEAD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_SOLOPLAYER_HEAD)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_SOLOPLAYER_HEAD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_SOLOPLAYER_HEAD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_SOLOPLAYER_HEAD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_SOLOPLAYER_HEAD)
    MergeFrom(*source);
  }
}

void PB_SOLOPLAYER_HEAD::MergeFrom(const PB_SOLOPLAYER_HEAD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_SOLOPLAYER_HEAD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dwuserstatus_.MergeFrom(from.dwuserstatus_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      nroomid_ = from.nroomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ntableno_ = from.ntableno_;
    }
    if (cached_has_bits & 0x00000004u) {
      nplayercount_ = from.nplayercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PB_SOLOPLAYER_HEAD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_SOLOPLAYER_HEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_SOLOPLAYER_HEAD::CopyFrom(const PB_SOLOPLAYER_HEAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_SOLOPLAYER_HEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_SOLOPLAYER_HEAD::IsInitialized() const {
  return true;
}

void PB_SOLOPLAYER_HEAD::Swap(PB_SOLOPLAYER_HEAD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_SOLOPLAYER_HEAD::InternalSwap(PB_SOLOPLAYER_HEAD* other) {
  using std::swap;
  dwuserstatus_.InternalSwap(&other->dwuserstatus_);
  swap(nroomid_, other->nroomid_);
  swap(ntableno_, other->ntableno_);
  swap(nplayercount_, other->nplayercount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_SOLOPLAYER_HEAD::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_SOLO_PLAYER::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_SOLO_PLAYER::kNUserIDFieldNumber;
const int PB_SOLO_PLAYER::kNUserTypeFieldNumber;
const int PB_SOLO_PLAYER::kNStatusFieldNumber;
const int PB_SOLO_PLAYER::kNTableNOFieldNumber;
const int PB_SOLO_PLAYER::kNChairNOFieldNumber;
const int PB_SOLO_PLAYER::kNNickSexFieldNumber;
const int PB_SOLO_PLAYER::kNPortraitFieldNumber;
const int PB_SOLO_PLAYER::kNNetSpeedFieldNumber;
const int PB_SOLO_PLAYER::kNClothingIDFieldNumber;
const int PB_SOLO_PLAYER::kNDepositFieldNumber;
const int PB_SOLO_PLAYER::kNPlayerLevelFieldNumber;
const int PB_SOLO_PLAYER::kNScoreFieldNumber;
const int PB_SOLO_PLAYER::kNBreakOffFieldNumber;
const int PB_SOLO_PLAYER::kNWinFieldNumber;
const int PB_SOLO_PLAYER::kNLossFieldNumber;
const int PB_SOLO_PLAYER::kNStandOffFieldNumber;
const int PB_SOLO_PLAYER::kNBoutFieldNumber;
const int PB_SOLO_PLAYER::kNTimeCostFieldNumber;
const int PB_SOLO_PLAYER::kBRefuseFieldNumber;
const int PB_SOLO_PLAYER::kSzUsernameFieldNumber;
const int PB_SOLO_PLAYER::kSzNickNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_SOLO_PLAYER::PB_SOLO_PLAYER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_SOLO_PLAYER();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_SOLO_PLAYER)
}
PB_SOLO_PLAYER::PB_SOLO_PLAYER(const PB_SOLO_PLAYER& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_szusername()) {
    szusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szusername_);
  }
  sznickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sznickname()) {
    sznickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznickname_);
  }
  ::memcpy(&nuserid_, &from.nuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&brefuse_) -
    reinterpret_cast<char*>(&nuserid_)) + sizeof(brefuse_));
  // @@protoc_insertion_point(copy_constructor:game.PB_SOLO_PLAYER)
}

void PB_SOLO_PLAYER::SharedCtor() {
  _cached_size_ = 0;
  szusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brefuse_) -
      reinterpret_cast<char*>(&nuserid_)) + sizeof(brefuse_));
}

PB_SOLO_PLAYER::~PB_SOLO_PLAYER() {
  // @@protoc_insertion_point(destructor:game.PB_SOLO_PLAYER)
  SharedDtor();
}

void PB_SOLO_PLAYER::SharedDtor() {
  szusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PB_SOLO_PLAYER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_SOLO_PLAYER::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_SOLO_PLAYER& PB_SOLO_PLAYER::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_SOLO_PLAYER();
  return *internal_default_instance();
}

PB_SOLO_PLAYER* PB_SOLO_PLAYER::New(::google::protobuf::Arena* arena) const {
  PB_SOLO_PLAYER* n = new PB_SOLO_PLAYER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_SOLO_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_SOLO_PLAYER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!szusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*szusername_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sznickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sznickname_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&nuserid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nnicksex_) -
        reinterpret_cast<char*>(&nuserid_)) + sizeof(nnicksex_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&nportrait_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nwin_) -
        reinterpret_cast<char*>(&nportrait_)) + sizeof(nwin_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&nloss_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brefuse_) -
        reinterpret_cast<char*>(&nloss_)) + sizeof(brefuse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_SOLO_PLAYER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_SOLO_PLAYER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 nUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_nuserid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nUserType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nusertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nusertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nTableNO = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ntableno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ntableno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nChairNO = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_nchairno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nchairno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nNickSex = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_nnicksex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nnicksex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nPortrait = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_nportrait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nportrait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nNetSpeed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_nnetspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nnetspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nClothingID = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_nclothingid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nclothingid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nDeposit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ndeposit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ndeposit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nPlayerLevel = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_nplayerlevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nplayerlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nScore = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_nscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nBreakOff = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_nbreakoff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nbreakoff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nWin = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_nwin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nLoss = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_nloss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nloss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nStandOff = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_nstandoff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nstandoff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nBout = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_nbout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nbout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nTimeCost = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_ntimecost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ntimecost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bRefuse = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_brefuse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &brefuse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string szUsername = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szusername().data(), static_cast<int>(this->szusername().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game.PB_SOLO_PLAYER.szUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string szNickName = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sznickname().data(), static_cast<int>(this->sznickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game.PB_SOLO_PLAYER.szNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_SOLO_PLAYER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_SOLO_PLAYER)
  return false;
#undef DO_
}

void PB_SOLO_PLAYER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_SOLO_PLAYER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nUserID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->nuserid(), output);
  }

  // optional sint32 nUserType = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->nusertype(), output);
  }

  // optional sint32 nStatus = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->nstatus(), output);
  }

  // optional sint32 nTableNO = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->ntableno(), output);
  }

  // optional sint32 nChairNO = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->nchairno(), output);
  }

  // optional sint32 nNickSex = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->nnicksex(), output);
  }

  // optional sint32 nPortrait = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->nportrait(), output);
  }

  // optional sint32 nNetSpeed = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->nnetspeed(), output);
  }

  // optional sint32 nClothingID = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->nclothingid(), output);
  }

  // optional sint32 nDeposit = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->ndeposit(), output);
  }

  // optional sint32 nPlayerLevel = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->nplayerlevel(), output);
  }

  // optional sint32 nScore = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->nscore(), output);
  }

  // optional sint32 nBreakOff = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->nbreakoff(), output);
  }

  // optional sint32 nWin = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->nwin(), output);
  }

  // optional sint32 nLoss = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->nloss(), output);
  }

  // optional sint32 nStandOff = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->nstandoff(), output);
  }

  // optional sint32 nBout = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->nbout(), output);
  }

  // optional sint32 nTimeCost = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->ntimecost(), output);
  }

  // optional sint32 bRefuse = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(19, this->brefuse(), output);
  }

  // optional string szUsername = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szusername().data(), static_cast<int>(this->szusername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game.PB_SOLO_PLAYER.szUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->szusername(), output);
  }

  // optional string szNickName = 21;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sznickname().data(), static_cast<int>(this->sznickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game.PB_SOLO_PLAYER.szNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->sznickname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_SOLO_PLAYER)
}

::google::protobuf::uint8* PB_SOLO_PLAYER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_SOLO_PLAYER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nUserID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->nuserid(), target);
  }

  // optional sint32 nUserType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->nusertype(), target);
  }

  // optional sint32 nStatus = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->nstatus(), target);
  }

  // optional sint32 nTableNO = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->ntableno(), target);
  }

  // optional sint32 nChairNO = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->nchairno(), target);
  }

  // optional sint32 nNickSex = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->nnicksex(), target);
  }

  // optional sint32 nPortrait = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->nportrait(), target);
  }

  // optional sint32 nNetSpeed = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->nnetspeed(), target);
  }

  // optional sint32 nClothingID = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->nclothingid(), target);
  }

  // optional sint32 nDeposit = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->ndeposit(), target);
  }

  // optional sint32 nPlayerLevel = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->nplayerlevel(), target);
  }

  // optional sint32 nScore = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->nscore(), target);
  }

  // optional sint32 nBreakOff = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->nbreakoff(), target);
  }

  // optional sint32 nWin = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->nwin(), target);
  }

  // optional sint32 nLoss = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->nloss(), target);
  }

  // optional sint32 nStandOff = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->nstandoff(), target);
  }

  // optional sint32 nBout = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->nbout(), target);
  }

  // optional sint32 nTimeCost = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->ntimecost(), target);
  }

  // optional sint32 bRefuse = 19;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(19, this->brefuse(), target);
  }

  // optional string szUsername = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szusername().data(), static_cast<int>(this->szusername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game.PB_SOLO_PLAYER.szUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->szusername(), target);
  }

  // optional string szNickName = 21;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sznickname().data(), static_cast<int>(this->sznickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game.PB_SOLO_PLAYER.szNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->sznickname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_SOLO_PLAYER)
  return target;
}

size_t PB_SOLO_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_SOLO_PLAYER)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string szUsername = 20;
    if (has_szusername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szusername());
    }

    // optional string szNickName = 21;
    if (has_sznickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

    // optional sint32 nUserID = 1;
    if (has_nuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nuserid());
    }

    // optional sint32 nUserType = 2;
    if (has_nusertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nusertype());
    }

    // optional sint32 nStatus = 3;
    if (has_nstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nstatus());
    }

    // optional sint32 nTableNO = 4;
    if (has_ntableno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ntableno());
    }

    // optional sint32 nChairNO = 5;
    if (has_nchairno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nchairno());
    }

    // optional sint32 nNickSex = 6;
    if (has_nnicksex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nnicksex());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional sint32 nPortrait = 7;
    if (has_nportrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nportrait());
    }

    // optional sint32 nNetSpeed = 8;
    if (has_nnetspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nnetspeed());
    }

    // optional sint32 nClothingID = 9;
    if (has_nclothingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nclothingid());
    }

    // optional sint32 nDeposit = 10;
    if (has_ndeposit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ndeposit());
    }

    // optional sint32 nPlayerLevel = 11;
    if (has_nplayerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nplayerlevel());
    }

    // optional sint32 nScore = 12;
    if (has_nscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nscore());
    }

    // optional sint32 nBreakOff = 13;
    if (has_nbreakoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nbreakoff());
    }

    // optional sint32 nWin = 14;
    if (has_nwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nwin());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional sint32 nLoss = 15;
    if (has_nloss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nloss());
    }

    // optional sint32 nStandOff = 16;
    if (has_nstandoff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nstandoff());
    }

    // optional sint32 nBout = 17;
    if (has_nbout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nbout());
    }

    // optional sint32 nTimeCost = 18;
    if (has_ntimecost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ntimecost());
    }

    // optional sint32 bRefuse = 19;
    if (has_brefuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->brefuse());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_SOLO_PLAYER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_SOLO_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_SOLO_PLAYER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_SOLO_PLAYER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_SOLO_PLAYER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_SOLO_PLAYER)
    MergeFrom(*source);
  }
}

void PB_SOLO_PLAYER::MergeFrom(const PB_SOLO_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_SOLO_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_szusername();
      szusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sznickname();
      sznickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      nuserid_ = from.nuserid_;
    }
    if (cached_has_bits & 0x00000008u) {
      nusertype_ = from.nusertype_;
    }
    if (cached_has_bits & 0x00000010u) {
      nstatus_ = from.nstatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      ntableno_ = from.ntableno_;
    }
    if (cached_has_bits & 0x00000040u) {
      nchairno_ = from.nchairno_;
    }
    if (cached_has_bits & 0x00000080u) {
      nnicksex_ = from.nnicksex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      nportrait_ = from.nportrait_;
    }
    if (cached_has_bits & 0x00000200u) {
      nnetspeed_ = from.nnetspeed_;
    }
    if (cached_has_bits & 0x00000400u) {
      nclothingid_ = from.nclothingid_;
    }
    if (cached_has_bits & 0x00000800u) {
      ndeposit_ = from.ndeposit_;
    }
    if (cached_has_bits & 0x00001000u) {
      nplayerlevel_ = from.nplayerlevel_;
    }
    if (cached_has_bits & 0x00002000u) {
      nscore_ = from.nscore_;
    }
    if (cached_has_bits & 0x00004000u) {
      nbreakoff_ = from.nbreakoff_;
    }
    if (cached_has_bits & 0x00008000u) {
      nwin_ = from.nwin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      nloss_ = from.nloss_;
    }
    if (cached_has_bits & 0x00020000u) {
      nstandoff_ = from.nstandoff_;
    }
    if (cached_has_bits & 0x00040000u) {
      nbout_ = from.nbout_;
    }
    if (cached_has_bits & 0x00080000u) {
      ntimecost_ = from.ntimecost_;
    }
    if (cached_has_bits & 0x00100000u) {
      brefuse_ = from.brefuse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PB_SOLO_PLAYER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_SOLO_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_SOLO_PLAYER::CopyFrom(const PB_SOLO_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_SOLO_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_SOLO_PLAYER::IsInitialized() const {
  return true;
}

void PB_SOLO_PLAYER::Swap(PB_SOLO_PLAYER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_SOLO_PLAYER::InternalSwap(PB_SOLO_PLAYER* other) {
  using std::swap;
  szusername_.Swap(&other->szusername_);
  sznickname_.Swap(&other->sznickname_);
  swap(nuserid_, other->nuserid_);
  swap(nusertype_, other->nusertype_);
  swap(nstatus_, other->nstatus_);
  swap(ntableno_, other->ntableno_);
  swap(nchairno_, other->nchairno_);
  swap(nnicksex_, other->nnicksex_);
  swap(nportrait_, other->nportrait_);
  swap(nnetspeed_, other->nnetspeed_);
  swap(nclothingid_, other->nclothingid_);
  swap(ndeposit_, other->ndeposit_);
  swap(nplayerlevel_, other->nplayerlevel_);
  swap(nscore_, other->nscore_);
  swap(nbreakoff_, other->nbreakoff_);
  swap(nwin_, other->nwin_);
  swap(nloss_, other->nloss_);
  swap(nstandoff_, other->nstandoff_);
  swap(nbout_, other->nbout_);
  swap(ntimecost_, other->ntimecost_);
  swap(brefuse_, other->brefuse_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_SOLO_PLAYER::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_CARDSLAY::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_CARDSLAY::kCardsLayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_CARDSLAY::PB_CARDSLAY()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_CARDSLAY();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_CARDSLAY)
}
PB_CARDSLAY::PB_CARDSLAY(const PB_CARDSLAY& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cardslay_(from.cardslay_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.PB_CARDSLAY)
}

void PB_CARDSLAY::SharedCtor() {
  _cached_size_ = 0;
}

PB_CARDSLAY::~PB_CARDSLAY() {
  // @@protoc_insertion_point(destructor:game.PB_CARDSLAY)
  SharedDtor();
}

void PB_CARDSLAY::SharedDtor() {
}

void PB_CARDSLAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_CARDSLAY::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_CARDSLAY& PB_CARDSLAY::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_CARDSLAY();
  return *internal_default_instance();
}

PB_CARDSLAY* PB_CARDSLAY::New(::google::protobuf::Arena* arena) const {
  PB_CARDSLAY* n = new PB_CARDSLAY;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_CARDSLAY::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_CARDSLAY)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardslay_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_CARDSLAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_CARDSLAY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 cardsLay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 8u, input, this->mutable_cardslay())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_cardslay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_CARDSLAY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_CARDSLAY)
  return false;
#undef DO_
}

void PB_CARDSLAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_CARDSLAY)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 cardsLay = 1;
  for (int i = 0, n = this->cardslay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      1, this->cardslay(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_CARDSLAY)
}

::google::protobuf::uint8* PB_CARDSLAY::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_CARDSLAY)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 cardsLay = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(1, this->cardslay_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_CARDSLAY)
  return target;
}

size_t PB_CARDSLAY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_CARDSLAY)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 cardsLay = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->cardslay_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cardslay_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_CARDSLAY::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_CARDSLAY)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_CARDSLAY* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_CARDSLAY>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_CARDSLAY)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_CARDSLAY)
    MergeFrom(*source);
  }
}

void PB_CARDSLAY::MergeFrom(const PB_CARDSLAY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_CARDSLAY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cardslay_.MergeFrom(from.cardslay_);
}

void PB_CARDSLAY::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_CARDSLAY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_CARDSLAY::CopyFrom(const PB_CARDSLAY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_CARDSLAY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_CARDSLAY::IsInitialized() const {
  return true;
}

void PB_CARDSLAY::Swap(PB_CARDSLAY* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_CARDSLAY::InternalSwap(PB_CARDSLAY* other) {
  using std::swap;
  cardslay_.InternalSwap(&other->cardslay_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_CARDSLAY::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_CARD_TING_DETAIL::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_CARD_TING_DETAIL::kDwflagsFieldNumber;
const int PB_CARD_TING_DETAIL::kNChairNOFieldNumber;
const int PB_CARD_TING_DETAIL::kNThrowCardsTingFieldNumber;
const int PB_CARD_TING_DETAIL::kNThrowCardsTingLaysFieldNumber;
const int PB_CARD_TING_DETAIL::kNThrowCardsTingRemainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_CARD_TING_DETAIL::PB_CARD_TING_DETAIL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_CARD_TING_DETAIL();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_CARD_TING_DETAIL)
}
PB_CARD_TING_DETAIL::PB_CARD_TING_DETAIL(const PB_CARD_TING_DETAIL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      nthrowcardsting_(from.nthrowcardsting_),
      nthrowcardstinglays_(from.nthrowcardstinglays_),
      nthrowcardstingremain_(from.nthrowcardstingremain_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dwflags_, &from.dwflags_,
    static_cast<size_t>(reinterpret_cast<char*>(&nchairno_) -
    reinterpret_cast<char*>(&dwflags_)) + sizeof(nchairno_));
  // @@protoc_insertion_point(copy_constructor:game.PB_CARD_TING_DETAIL)
}

void PB_CARD_TING_DETAIL::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dwflags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nchairno_) -
      reinterpret_cast<char*>(&dwflags_)) + sizeof(nchairno_));
}

PB_CARD_TING_DETAIL::~PB_CARD_TING_DETAIL() {
  // @@protoc_insertion_point(destructor:game.PB_CARD_TING_DETAIL)
  SharedDtor();
}

void PB_CARD_TING_DETAIL::SharedDtor() {
}

void PB_CARD_TING_DETAIL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_CARD_TING_DETAIL::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_CARD_TING_DETAIL& PB_CARD_TING_DETAIL::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_CARD_TING_DETAIL();
  return *internal_default_instance();
}

PB_CARD_TING_DETAIL* PB_CARD_TING_DETAIL::New(::google::protobuf::Arena* arena) const {
  PB_CARD_TING_DETAIL* n = new PB_CARD_TING_DETAIL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_CARD_TING_DETAIL::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_CARD_TING_DETAIL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nthrowcardsting_.Clear();
  nthrowcardstinglays_.Clear();
  nthrowcardstingremain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&dwflags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nchairno_) -
        reinterpret_cast<char*>(&dwflags_)) + sizeof(nchairno_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_CARD_TING_DETAIL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_CARD_TING_DETAIL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dwflags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dwflags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwflags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nChairNO = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nchairno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nchairno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nThrowCardsTing = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 24u, input, this->mutable_nthrowcardsting())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nthrowcardsting())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .game.PB_CARDSLAY nThrowCardsTingLays = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_nthrowcardstinglays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .game.PB_CARDSLAY nThrowCardsTingRemain = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_nthrowcardstingremain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_CARD_TING_DETAIL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_CARD_TING_DETAIL)
  return false;
#undef DO_
}

void PB_CARD_TING_DETAIL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_CARD_TING_DETAIL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dwflags = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwflags(), output);
  }

  // optional sint32 nChairNO = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->nchairno(), output);
  }

  // repeated sint32 nThrowCardsTing = 3;
  for (int i = 0, n = this->nthrowcardsting_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      3, this->nthrowcardsting(i), output);
  }

  // repeated .game.PB_CARDSLAY nThrowCardsTingLays = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nthrowcardstinglays_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nthrowcardstinglays(static_cast<int>(i)), output);
  }

  // repeated .game.PB_CARDSLAY nThrowCardsTingRemain = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nthrowcardstingremain_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nthrowcardstingremain(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_CARD_TING_DETAIL)
}

::google::protobuf::uint8* PB_CARD_TING_DETAIL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_CARD_TING_DETAIL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dwflags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwflags(), target);
  }

  // optional sint32 nChairNO = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->nchairno(), target);
  }

  // repeated sint32 nThrowCardsTing = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(3, this->nthrowcardsting_, target);

  // repeated .game.PB_CARDSLAY nThrowCardsTingLays = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nthrowcardstinglays_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->nthrowcardstinglays(static_cast<int>(i)), deterministic, target);
  }

  // repeated .game.PB_CARDSLAY nThrowCardsTingRemain = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nthrowcardstingremain_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->nthrowcardstingremain(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_CARD_TING_DETAIL)
  return target;
}

size_t PB_CARD_TING_DETAIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_CARD_TING_DETAIL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 nThrowCardsTing = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nthrowcardsting_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nthrowcardsting_size());
    total_size += data_size;
  }

  // repeated .game.PB_CARDSLAY nThrowCardsTingLays = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->nthrowcardstinglays_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nthrowcardstinglays(static_cast<int>(i)));
    }
  }

  // repeated .game.PB_CARDSLAY nThrowCardsTingRemain = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->nthrowcardstingremain_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nthrowcardstingremain(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 dwflags = 1;
    if (has_dwflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwflags());
    }

    // optional sint32 nChairNO = 2;
    if (has_nchairno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nchairno());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_CARD_TING_DETAIL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_CARD_TING_DETAIL)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_CARD_TING_DETAIL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_CARD_TING_DETAIL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_CARD_TING_DETAIL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_CARD_TING_DETAIL)
    MergeFrom(*source);
  }
}

void PB_CARD_TING_DETAIL::MergeFrom(const PB_CARD_TING_DETAIL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_CARD_TING_DETAIL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nthrowcardsting_.MergeFrom(from.nthrowcardsting_);
  nthrowcardstinglays_.MergeFrom(from.nthrowcardstinglays_);
  nthrowcardstingremain_.MergeFrom(from.nthrowcardstingremain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      dwflags_ = from.dwflags_;
    }
    if (cached_has_bits & 0x00000002u) {
      nchairno_ = from.nchairno_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PB_CARD_TING_DETAIL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_CARD_TING_DETAIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_CARD_TING_DETAIL::CopyFrom(const PB_CARD_TING_DETAIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_CARD_TING_DETAIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_CARD_TING_DETAIL::IsInitialized() const {
  return true;
}

void PB_CARD_TING_DETAIL::Swap(PB_CARD_TING_DETAIL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_CARD_TING_DETAIL::InternalSwap(PB_CARD_TING_DETAIL* other) {
  using std::swap;
  nthrowcardsting_.InternalSwap(&other->nthrowcardsting_);
  nthrowcardstinglays_.InternalSwap(&other->nthrowcardstinglays_);
  nthrowcardstingremain_.InternalSwap(&other->nthrowcardstingremain_);
  swap(dwflags_, other->dwflags_);
  swap(nchairno_, other->nchairno_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_CARD_TING_DETAIL::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_GAME_RETREAT_TABLE_INFO::InitAsDefaultInstance() {
  ::game::_PB_GAME_RETREAT_TABLE_INFO_default_instance_._instance.get_mutable()->solo_player_head_ = const_cast< ::game::PB_SOLOPLAYER_HEAD*>(
      ::game::PB_SOLOPLAYER_HEAD::internal_default_instance());
  ::game::_PB_GAME_RETREAT_TABLE_INFO_default_instance_._instance.get_mutable()->tableinfo_ = const_cast< ::game::PB_GAME_TABLE_INFO*>(
      ::game::PB_GAME_TABLE_INFO::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_GAME_RETREAT_TABLE_INFO::kSoloPlayerHeadFieldNumber;
const int PB_GAME_RETREAT_TABLE_INFO::kSoloPlayerFieldNumber;
const int PB_GAME_RETREAT_TABLE_INFO::kTableinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_GAME_RETREAT_TABLE_INFO::PB_GAME_RETREAT_TABLE_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_GAME_RETREAT_TABLE_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_GAME_RETREAT_TABLE_INFO)
}
PB_GAME_RETREAT_TABLE_INFO::PB_GAME_RETREAT_TABLE_INFO(const PB_GAME_RETREAT_TABLE_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      solo_player_(from.solo_player_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_solo_player_head()) {
    solo_player_head_ = new ::game::PB_SOLOPLAYER_HEAD(*from.solo_player_head_);
  } else {
    solo_player_head_ = NULL;
  }
  if (from.has_tableinfo()) {
    tableinfo_ = new ::game::PB_GAME_TABLE_INFO(*from.tableinfo_);
  } else {
    tableinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:game.PB_GAME_RETREAT_TABLE_INFO)
}

void PB_GAME_RETREAT_TABLE_INFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&solo_player_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tableinfo_) -
      reinterpret_cast<char*>(&solo_player_head_)) + sizeof(tableinfo_));
}

PB_GAME_RETREAT_TABLE_INFO::~PB_GAME_RETREAT_TABLE_INFO() {
  // @@protoc_insertion_point(destructor:game.PB_GAME_RETREAT_TABLE_INFO)
  SharedDtor();
}

void PB_GAME_RETREAT_TABLE_INFO::SharedDtor() {
  if (this != internal_default_instance()) delete solo_player_head_;
  if (this != internal_default_instance()) delete tableinfo_;
}

void PB_GAME_RETREAT_TABLE_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_GAME_RETREAT_TABLE_INFO::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_GAME_RETREAT_TABLE_INFO& PB_GAME_RETREAT_TABLE_INFO::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_GAME_RETREAT_TABLE_INFO();
  return *internal_default_instance();
}

PB_GAME_RETREAT_TABLE_INFO* PB_GAME_RETREAT_TABLE_INFO::New(::google::protobuf::Arena* arena) const {
  PB_GAME_RETREAT_TABLE_INFO* n = new PB_GAME_RETREAT_TABLE_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_GAME_RETREAT_TABLE_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_GAME_RETREAT_TABLE_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  solo_player_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(solo_player_head_ != NULL);
      solo_player_head_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tableinfo_ != NULL);
      tableinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_GAME_RETREAT_TABLE_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_GAME_RETREAT_TABLE_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game.PB_SOLOPLAYER_HEAD solo_player_head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_solo_player_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .game.PB_SOLO_PLAYER solo_player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_solo_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .game.PB_GAME_TABLE_INFO tableinfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tableinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_GAME_RETREAT_TABLE_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_GAME_RETREAT_TABLE_INFO)
  return false;
#undef DO_
}

void PB_GAME_RETREAT_TABLE_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_GAME_RETREAT_TABLE_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .game.PB_SOLOPLAYER_HEAD solo_player_head = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->solo_player_head_, output);
  }

  // repeated .game.PB_SOLO_PLAYER solo_player = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->solo_player_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->solo_player(static_cast<int>(i)), output);
  }

  // optional .game.PB_GAME_TABLE_INFO tableinfo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tableinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_GAME_RETREAT_TABLE_INFO)
}

::google::protobuf::uint8* PB_GAME_RETREAT_TABLE_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_GAME_RETREAT_TABLE_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .game.PB_SOLOPLAYER_HEAD solo_player_head = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->solo_player_head_, deterministic, target);
  }

  // repeated .game.PB_SOLO_PLAYER solo_player = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->solo_player_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->solo_player(static_cast<int>(i)), deterministic, target);
  }

  // optional .game.PB_GAME_TABLE_INFO tableinfo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->tableinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_GAME_RETREAT_TABLE_INFO)
  return target;
}

size_t PB_GAME_RETREAT_TABLE_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_GAME_RETREAT_TABLE_INFO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .game.PB_SOLO_PLAYER solo_player = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->solo_player_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->solo_player(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .game.PB_SOLOPLAYER_HEAD solo_player_head = 1;
    if (has_solo_player_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->solo_player_head_);
    }

    // optional .game.PB_GAME_TABLE_INFO tableinfo = 3;
    if (has_tableinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->tableinfo_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_GAME_RETREAT_TABLE_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_GAME_RETREAT_TABLE_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_GAME_RETREAT_TABLE_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_GAME_RETREAT_TABLE_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_GAME_RETREAT_TABLE_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_GAME_RETREAT_TABLE_INFO)
    MergeFrom(*source);
  }
}

void PB_GAME_RETREAT_TABLE_INFO::MergeFrom(const PB_GAME_RETREAT_TABLE_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_GAME_RETREAT_TABLE_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  solo_player_.MergeFrom(from.solo_player_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_solo_player_head()->::game::PB_SOLOPLAYER_HEAD::MergeFrom(from.solo_player_head());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tableinfo()->::game::PB_GAME_TABLE_INFO::MergeFrom(from.tableinfo());
    }
  }
}

void PB_GAME_RETREAT_TABLE_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_GAME_RETREAT_TABLE_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_GAME_RETREAT_TABLE_INFO::CopyFrom(const PB_GAME_RETREAT_TABLE_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_GAME_RETREAT_TABLE_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_GAME_RETREAT_TABLE_INFO::IsInitialized() const {
  return true;
}

void PB_GAME_RETREAT_TABLE_INFO::Swap(PB_GAME_RETREAT_TABLE_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_GAME_RETREAT_TABLE_INFO::InternalSwap(PB_GAME_RETREAT_TABLE_INFO* other) {
  using std::swap;
  solo_player_.InternalSwap(&other->solo_player_);
  swap(solo_player_head_, other->solo_player_head_);
  swap(tableinfo_, other->tableinfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_GAME_RETREAT_TABLE_INFO::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PB_NTF_SOMEONE_BUHUA::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_NTF_SOMEONE_BUHUA::kNHuaCardsFieldNumber;
const int PB_NTF_SOMEONE_BUHUA::kNHuaCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_NTF_SOMEONE_BUHUA::PB_NTF_SOMEONE_BUHUA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsPB_NTF_SOMEONE_BUHUA();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PB_NTF_SOMEONE_BUHUA)
}
PB_NTF_SOMEONE_BUHUA::PB_NTF_SOMEONE_BUHUA(const PB_NTF_SOMEONE_BUHUA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      nhuacards_(from.nhuacards_),
      nhuacount_(from.nhuacount_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.PB_NTF_SOMEONE_BUHUA)
}

void PB_NTF_SOMEONE_BUHUA::SharedCtor() {
  _cached_size_ = 0;
}

PB_NTF_SOMEONE_BUHUA::~PB_NTF_SOMEONE_BUHUA() {
  // @@protoc_insertion_point(destructor:game.PB_NTF_SOMEONE_BUHUA)
  SharedDtor();
}

void PB_NTF_SOMEONE_BUHUA::SharedDtor() {
}

void PB_NTF_SOMEONE_BUHUA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_NTF_SOMEONE_BUHUA::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PB_NTF_SOMEONE_BUHUA& PB_NTF_SOMEONE_BUHUA::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsPB_NTF_SOMEONE_BUHUA();
  return *internal_default_instance();
}

PB_NTF_SOMEONE_BUHUA* PB_NTF_SOMEONE_BUHUA::New(::google::protobuf::Arena* arena) const {
  PB_NTF_SOMEONE_BUHUA* n = new PB_NTF_SOMEONE_BUHUA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_NTF_SOMEONE_BUHUA::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PB_NTF_SOMEONE_BUHUA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nhuacards_.Clear();
  nhuacount_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PB_NTF_SOMEONE_BUHUA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PB_NTF_SOMEONE_BUHUA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game.PB_INT_CHAIR nHuaCards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_nhuacards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nHuaCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16u, input, this->mutable_nhuacount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nhuacount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PB_NTF_SOMEONE_BUHUA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PB_NTF_SOMEONE_BUHUA)
  return false;
#undef DO_
}

void PB_NTF_SOMEONE_BUHUA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PB_NTF_SOMEONE_BUHUA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.PB_INT_CHAIR nHuaCards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nhuacards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nhuacards(static_cast<int>(i)), output);
  }

  // repeated sint32 nHuaCount = 2;
  for (int i = 0, n = this->nhuacount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->nhuacount(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.PB_NTF_SOMEONE_BUHUA)
}

::google::protobuf::uint8* PB_NTF_SOMEONE_BUHUA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.PB_NTF_SOMEONE_BUHUA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.PB_INT_CHAIR nHuaCards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nhuacards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nhuacards(static_cast<int>(i)), deterministic, target);
  }

  // repeated sint32 nHuaCount = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(2, this->nhuacount_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PB_NTF_SOMEONE_BUHUA)
  return target;
}

size_t PB_NTF_SOMEONE_BUHUA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PB_NTF_SOMEONE_BUHUA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .game.PB_INT_CHAIR nHuaCards = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nhuacards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nhuacards(static_cast<int>(i)));
    }
  }

  // repeated sint32 nHuaCount = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nhuacount_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nhuacount_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_NTF_SOMEONE_BUHUA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PB_NTF_SOMEONE_BUHUA)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_NTF_SOMEONE_BUHUA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_NTF_SOMEONE_BUHUA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PB_NTF_SOMEONE_BUHUA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PB_NTF_SOMEONE_BUHUA)
    MergeFrom(*source);
  }
}

void PB_NTF_SOMEONE_BUHUA::MergeFrom(const PB_NTF_SOMEONE_BUHUA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PB_NTF_SOMEONE_BUHUA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nhuacards_.MergeFrom(from.nhuacards_);
  nhuacount_.MergeFrom(from.nhuacount_);
}

void PB_NTF_SOMEONE_BUHUA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PB_NTF_SOMEONE_BUHUA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_NTF_SOMEONE_BUHUA::CopyFrom(const PB_NTF_SOMEONE_BUHUA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PB_NTF_SOMEONE_BUHUA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_NTF_SOMEONE_BUHUA::IsInitialized() const {
  return true;
}

void PB_NTF_SOMEONE_BUHUA::Swap(PB_NTF_SOMEONE_BUHUA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_NTF_SOMEONE_BUHUA::InternalSwap(PB_NTF_SOMEONE_BUHUA* other) {
  using std::swap;
  nhuacards_.InternalSwap(&other->nhuacards_);
  nhuacount_.InternalSwap(&other->nhuacount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_NTF_SOMEONE_BUHUA::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryFlauntInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryFlauntInfo::kNUserIDFieldNumber;
const int QueryFlauntInfo::kNRepeatWinBoutFieldNumber;
const int QueryFlauntInfo::kNRepeatLoseBoutFieldNumber;
const int QueryFlauntInfo::kNReservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryFlauntInfo::QueryFlauntInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsQueryFlauntInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.QueryFlauntInfo)
}
QueryFlauntInfo::QueryFlauntInfo(const QueryFlauntInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      nreserved_(from.nreserved_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nuserid_, &from.nuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nrepeatlosebout_) -
    reinterpret_cast<char*>(&nuserid_)) + sizeof(nrepeatlosebout_));
  // @@protoc_insertion_point(copy_constructor:game.QueryFlauntInfo)
}

void QueryFlauntInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nrepeatlosebout_) -
      reinterpret_cast<char*>(&nuserid_)) + sizeof(nrepeatlosebout_));
}

QueryFlauntInfo::~QueryFlauntInfo() {
  // @@protoc_insertion_point(destructor:game.QueryFlauntInfo)
  SharedDtor();
}

void QueryFlauntInfo::SharedDtor() {
}

void QueryFlauntInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFlauntInfo::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryFlauntInfo& QueryFlauntInfo::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsQueryFlauntInfo();
  return *internal_default_instance();
}

QueryFlauntInfo* QueryFlauntInfo::New(::google::protobuf::Arena* arena) const {
  QueryFlauntInfo* n = new QueryFlauntInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryFlauntInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:game.QueryFlauntInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nreserved_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&nuserid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nrepeatlosebout_) -
        reinterpret_cast<char*>(&nuserid_)) + sizeof(nrepeatlosebout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryFlauntInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.QueryFlauntInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 nUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_nuserid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nRepeatWinBout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nrepeatwinbout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nrepeatwinbout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 nRepeatLoseBout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nrepeatlosebout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nrepeatlosebout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nReserved = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 32u, input, this->mutable_nreserved())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nreserved())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.QueryFlauntInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.QueryFlauntInfo)
  return false;
#undef DO_
}

void QueryFlauntInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.QueryFlauntInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nUserID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->nuserid(), output);
  }

  // optional sint32 nRepeatWinBout = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->nrepeatwinbout(), output);
  }

  // optional sint32 nRepeatLoseBout = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->nrepeatlosebout(), output);
  }

  // repeated sint32 nReserved = 4;
  for (int i = 0, n = this->nreserved_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      4, this->nreserved(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.QueryFlauntInfo)
}

::google::protobuf::uint8* QueryFlauntInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.QueryFlauntInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nUserID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->nuserid(), target);
  }

  // optional sint32 nRepeatWinBout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->nrepeatwinbout(), target);
  }

  // optional sint32 nRepeatLoseBout = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->nrepeatlosebout(), target);
  }

  // repeated sint32 nReserved = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(4, this->nreserved_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.QueryFlauntInfo)
  return target;
}

size_t QueryFlauntInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.QueryFlauntInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 nReserved = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nreserved_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nreserved_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 nUserID = 1;
    if (has_nuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nuserid());
    }

    // optional sint32 nRepeatWinBout = 2;
    if (has_nrepeatwinbout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nrepeatwinbout());
    }

    // optional sint32 nRepeatLoseBout = 3;
    if (has_nrepeatlosebout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nrepeatlosebout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFlauntInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.QueryFlauntInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryFlauntInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryFlauntInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.QueryFlauntInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.QueryFlauntInfo)
    MergeFrom(*source);
  }
}

void QueryFlauntInfo::MergeFrom(const QueryFlauntInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.QueryFlauntInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nreserved_.MergeFrom(from.nreserved_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      nuserid_ = from.nuserid_;
    }
    if (cached_has_bits & 0x00000002u) {
      nrepeatwinbout_ = from.nrepeatwinbout_;
    }
    if (cached_has_bits & 0x00000004u) {
      nrepeatlosebout_ = from.nrepeatlosebout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryFlauntInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.QueryFlauntInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFlauntInfo::CopyFrom(const QueryFlauntInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.QueryFlauntInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFlauntInfo::IsInitialized() const {
  return true;
}

void QueryFlauntInfo::Swap(QueryFlauntInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryFlauntInfo::InternalSwap(QueryFlauntInfo* other) {
  using std::swap;
  nreserved_.InternalSwap(&other->nreserved_);
  swap(nuserid_, other->nuserid_);
  swap(nrepeatwinbout_, other->nrepeatwinbout_);
  swap(nrepeatlosebout_, other->nrepeatlosebout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryFlauntInfo::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateFlauntBout::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateFlauntBout::kNUserIDFieldNumber;
const int UpdateFlauntBout::kBWinFieldNumber;
const int UpdateFlauntBout::kNReservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateFlauntBout::UpdateFlauntBout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_game_2eproto::InitDefaultsUpdateFlauntBout();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.UpdateFlauntBout)
}
UpdateFlauntBout::UpdateFlauntBout(const UpdateFlauntBout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      nreserved_(from.nreserved_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nuserid_, &from.nuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bwin_) -
    reinterpret_cast<char*>(&nuserid_)) + sizeof(bwin_));
  // @@protoc_insertion_point(copy_constructor:game.UpdateFlauntBout)
}

void UpdateFlauntBout::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bwin_) -
      reinterpret_cast<char*>(&nuserid_)) + sizeof(bwin_));
}

UpdateFlauntBout::~UpdateFlauntBout() {
  // @@protoc_insertion_point(destructor:game.UpdateFlauntBout)
  SharedDtor();
}

void UpdateFlauntBout::SharedDtor() {
}

void UpdateFlauntBout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFlauntBout::descriptor() {
  ::protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateFlauntBout& UpdateFlauntBout::default_instance() {
  ::protobuf_game_2eproto::InitDefaultsUpdateFlauntBout();
  return *internal_default_instance();
}

UpdateFlauntBout* UpdateFlauntBout::New(::google::protobuf::Arena* arena) const {
  UpdateFlauntBout* n = new UpdateFlauntBout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateFlauntBout::Clear() {
// @@protoc_insertion_point(message_clear_start:game.UpdateFlauntBout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nreserved_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&nuserid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bwin_) -
        reinterpret_cast<char*>(&nuserid_)) + sizeof(bwin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateFlauntBout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.UpdateFlauntBout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 nUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_nuserid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bWin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bwin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 nReserved = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 24u, input, this->mutable_nreserved())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_nreserved())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.UpdateFlauntBout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.UpdateFlauntBout)
  return false;
#undef DO_
}

void UpdateFlauntBout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.UpdateFlauntBout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nUserID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->nuserid(), output);
  }

  // optional sint32 bWin = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bwin(), output);
  }

  // repeated sint32 nReserved = 3;
  for (int i = 0, n = this->nreserved_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      3, this->nreserved(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.UpdateFlauntBout)
}

::google::protobuf::uint8* UpdateFlauntBout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.UpdateFlauntBout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 nUserID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->nuserid(), target);
  }

  // optional sint32 bWin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bwin(), target);
  }

  // repeated sint32 nReserved = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(3, this->nreserved_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.UpdateFlauntBout)
  return target;
}

size_t UpdateFlauntBout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.UpdateFlauntBout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 nReserved = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->nreserved_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nreserved_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 nUserID = 1;
    if (has_nuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nuserid());
    }

    // optional sint32 bWin = 2;
    if (has_bwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bwin());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFlauntBout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.UpdateFlauntBout)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFlauntBout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateFlauntBout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.UpdateFlauntBout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.UpdateFlauntBout)
    MergeFrom(*source);
  }
}

void UpdateFlauntBout::MergeFrom(const UpdateFlauntBout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.UpdateFlauntBout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nreserved_.MergeFrom(from.nreserved_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      nuserid_ = from.nuserid_;
    }
    if (cached_has_bits & 0x00000002u) {
      bwin_ = from.bwin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateFlauntBout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.UpdateFlauntBout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFlauntBout::CopyFrom(const UpdateFlauntBout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.UpdateFlauntBout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFlauntBout::IsInitialized() const {
  return true;
}

void UpdateFlauntBout::Swap(UpdateFlauntBout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateFlauntBout::InternalSwap(UpdateFlauntBout* other) {
  using std::swap;
  nreserved_.InternalSwap(&other->nreserved_);
  swap(nuserid_, other->nuserid_);
  swap(bwin_, other->bwin_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateFlauntBout::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game

// @@protoc_insertion_point(global_scope)
