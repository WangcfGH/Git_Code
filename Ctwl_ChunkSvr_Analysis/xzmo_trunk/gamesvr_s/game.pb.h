// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef PROTOBUF_game_2eproto__INCLUDED
#define PROTOBUF_game_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
    #error This file was generated by a newer version of protoc which is
    #error incompatible with your Protocol Buffer headers.  Please update
    #error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
    #error This file was generated by an older version of protoc which is
    #error incompatible with your Protocol Buffer headers.  Please
    #error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "xygmj.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_game_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct
{
    static const ::google::protobuf::internal::ParseTableField entries[];
    static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    static const ::google::protobuf::internal::ParseTable schema[16];
    static const ::google::protobuf::internal::FieldMetadata field_metadata[];
    static const ::google::protobuf::internal::SerializationTable serialization_table[];
    static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPB_SENDER_INFOImpl();
void InitDefaultsPB_SENDER_INFO();
void InitDefaultsPB_TING_THROW_CARDSImpl();
void InitDefaultsPB_TING_THROW_CARDS();
void InitDefaultsPB_MJ_START_DATAImpl();
void InitDefaultsPB_MJ_START_DATA();
void InitDefaultsPB_CARDS_UNITImpl();
void InitDefaultsPB_CARDS_UNIT();
void InitDefaultsPB_CARDS_UNIT_CHAIRImpl();
void InitDefaultsPB_CARDS_UNIT_CHAIR();
void InitDefaultsPB_INT_CHAIRImpl();
void InitDefaultsPB_INT_CHAIR();
void InitDefaultsPB_MJ_PLAY_DATAImpl();
void InitDefaultsPB_MJ_PLAY_DATA();
void InitDefaultsPB_GAME_TABLE_INFOImpl();
void InitDefaultsPB_GAME_TABLE_INFO();
void InitDefaultsPB_SOLOPLAYER_HEADImpl();
void InitDefaultsPB_SOLOPLAYER_HEAD();
void InitDefaultsPB_SOLO_PLAYERImpl();
void InitDefaultsPB_SOLO_PLAYER();
void InitDefaultsPB_CARDSLAYImpl();
void InitDefaultsPB_CARDSLAY();
void InitDefaultsPB_CARD_TING_DETAILImpl();
void InitDefaultsPB_CARD_TING_DETAIL();
void InitDefaultsPB_GAME_RETREAT_TABLE_INFOImpl();
void InitDefaultsPB_GAME_RETREAT_TABLE_INFO();
void InitDefaultsPB_NTF_SOMEONE_BUHUAImpl();
void InitDefaultsPB_NTF_SOMEONE_BUHUA();
void InitDefaultsQueryFlauntInfoImpl();
void InitDefaultsQueryFlauntInfo();
void InitDefaultsUpdateFlauntBoutImpl();
void InitDefaultsUpdateFlauntBout();
inline void InitDefaults()
{
    InitDefaultsPB_SENDER_INFO();
    InitDefaultsPB_TING_THROW_CARDS();
    InitDefaultsPB_MJ_START_DATA();
    InitDefaultsPB_CARDS_UNIT();
    InitDefaultsPB_CARDS_UNIT_CHAIR();
    InitDefaultsPB_INT_CHAIR();
    InitDefaultsPB_MJ_PLAY_DATA();
    InitDefaultsPB_GAME_TABLE_INFO();
    InitDefaultsPB_SOLOPLAYER_HEAD();
    InitDefaultsPB_SOLO_PLAYER();
    InitDefaultsPB_CARDSLAY();
    InitDefaultsPB_CARD_TING_DETAIL();
    InitDefaultsPB_GAME_RETREAT_TABLE_INFO();
    InitDefaultsPB_NTF_SOMEONE_BUHUA();
    InitDefaultsQueryFlauntInfo();
    InitDefaultsUpdateFlauntBout();
}
}  // namespace protobuf_game_2eproto
namespace game {
class PB_CARDSLAY;
class PB_CARDSLAYDefaultTypeInternal;
extern PB_CARDSLAYDefaultTypeInternal _PB_CARDSLAY_default_instance_;
class PB_CARDS_UNIT;
class PB_CARDS_UNITDefaultTypeInternal;
extern PB_CARDS_UNITDefaultTypeInternal _PB_CARDS_UNIT_default_instance_;
class PB_CARDS_UNIT_CHAIR;
class PB_CARDS_UNIT_CHAIRDefaultTypeInternal;
extern PB_CARDS_UNIT_CHAIRDefaultTypeInternal _PB_CARDS_UNIT_CHAIR_default_instance_;
class PB_CARD_TING_DETAIL;
class PB_CARD_TING_DETAILDefaultTypeInternal;
extern PB_CARD_TING_DETAILDefaultTypeInternal _PB_CARD_TING_DETAIL_default_instance_;
class PB_GAME_RETREAT_TABLE_INFO;
class PB_GAME_RETREAT_TABLE_INFODefaultTypeInternal;
extern PB_GAME_RETREAT_TABLE_INFODefaultTypeInternal _PB_GAME_RETREAT_TABLE_INFO_default_instance_;
class PB_GAME_TABLE_INFO;
class PB_GAME_TABLE_INFODefaultTypeInternal;
extern PB_GAME_TABLE_INFODefaultTypeInternal _PB_GAME_TABLE_INFO_default_instance_;
class PB_INT_CHAIR;
class PB_INT_CHAIRDefaultTypeInternal;
extern PB_INT_CHAIRDefaultTypeInternal _PB_INT_CHAIR_default_instance_;
class PB_MJ_PLAY_DATA;
class PB_MJ_PLAY_DATADefaultTypeInternal;
extern PB_MJ_PLAY_DATADefaultTypeInternal _PB_MJ_PLAY_DATA_default_instance_;
class PB_MJ_START_DATA;
class PB_MJ_START_DATADefaultTypeInternal;
extern PB_MJ_START_DATADefaultTypeInternal _PB_MJ_START_DATA_default_instance_;
class PB_NTF_SOMEONE_BUHUA;
class PB_NTF_SOMEONE_BUHUADefaultTypeInternal;
extern PB_NTF_SOMEONE_BUHUADefaultTypeInternal _PB_NTF_SOMEONE_BUHUA_default_instance_;
class PB_SENDER_INFO;
class PB_SENDER_INFODefaultTypeInternal;
extern PB_SENDER_INFODefaultTypeInternal _PB_SENDER_INFO_default_instance_;
class PB_SOLOPLAYER_HEAD;
class PB_SOLOPLAYER_HEADDefaultTypeInternal;
extern PB_SOLOPLAYER_HEADDefaultTypeInternal _PB_SOLOPLAYER_HEAD_default_instance_;
class PB_SOLO_PLAYER;
class PB_SOLO_PLAYERDefaultTypeInternal;
extern PB_SOLO_PLAYERDefaultTypeInternal _PB_SOLO_PLAYER_default_instance_;
class PB_TING_THROW_CARDS;
class PB_TING_THROW_CARDSDefaultTypeInternal;
extern PB_TING_THROW_CARDSDefaultTypeInternal _PB_TING_THROW_CARDS_default_instance_;
class QueryFlauntInfo;
class QueryFlauntInfoDefaultTypeInternal;
extern QueryFlauntInfoDefaultTypeInternal _QueryFlauntInfo_default_instance_;
class UpdateFlauntBout;
class UpdateFlauntBoutDefaultTypeInternal;
extern UpdateFlauntBoutDefaultTypeInternal _UpdateFlauntBout_default_instance_;
}  // namespace game
namespace game {

// ===================================================================

class PB_SENDER_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_SENDER_INFO) */
{
public:
    PB_SENDER_INFO();
    virtual ~PB_SENDER_INFO();

    PB_SENDER_INFO(const PB_SENDER_INFO& from);

    inline PB_SENDER_INFO& operator=(const PB_SENDER_INFO& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_SENDER_INFO(PB_SENDER_INFO&& from) noexcept
        : PB_SENDER_INFO()
    {
        *this = ::std::move(from);
    }

    inline PB_SENDER_INFO& operator=(PB_SENDER_INFO&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_SENDER_INFO& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_SENDER_INFO* internal_default_instance()
    {
        return reinterpret_cast<const PB_SENDER_INFO*>(
                &_PB_SENDER_INFO_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        0;

    void Swap(PB_SENDER_INFO* other);
    friend void swap(PB_SENDER_INFO& a, PB_SENDER_INFO& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_SENDER_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_SENDER_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_SENDER_INFO& from);
    void MergeFrom(const PB_SENDER_INFO& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_SENDER_INFO* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string sz_hardid = 4;
    bool has_sz_hardid() const;
    void clear_sz_hardid();
    static const int kSzHardidFieldNumber = 4;
    const ::std::string& sz_hardid() const;
    void set_sz_hardid(const ::std::string& value);
#if LANG_CXX11
    void set_sz_hardid(::std::string&& value);
#endif
    void set_sz_hardid(const char* value);
    void set_sz_hardid(const char* value, size_t size);
    ::std::string* mutable_sz_hardid();
    ::std::string* release_sz_hardid();
    void set_allocated_sz_hardid(::std::string* sz_hardid);

    // optional sint32 send_table = 1;
    bool has_send_table() const;
    void clear_send_table();
    static const int kSendTableFieldNumber = 1;
    ::google::protobuf::int32 send_table() const;
    void set_send_table(::google::protobuf::int32 value);

    // optional sint32 send_chair = 2;
    bool has_send_chair() const;
    void clear_send_chair();
    static const int kSendChairFieldNumber = 2;
    ::google::protobuf::int32 send_chair() const;
    void set_send_chair(::google::protobuf::int32 value);

    // optional sint32 send_user = 3;
    bool has_send_user() const;
    void clear_send_user();
    static const int kSendUserFieldNumber = 3;
    ::google::protobuf::int32 send_user() const;
    void set_send_user(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:game.PB_SENDER_INFO)
private:
    void set_has_send_table();
    void clear_has_send_table();
    void set_has_send_chair();
    void clear_has_send_chair();
    void set_has_send_user();
    void clear_has_send_user();
    void set_has_sz_hardid();
    void clear_has_sz_hardid();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr sz_hardid_;
    ::google::protobuf::int32 send_table_;
    ::google::protobuf::int32 send_chair_;
    ::google::protobuf::int32 send_user_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_SENDER_INFOImpl();
};
// -------------------------------------------------------------------

class PB_TING_THROW_CARDS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_TING_THROW_CARDS) */
{
public:
    PB_TING_THROW_CARDS();
    virtual ~PB_TING_THROW_CARDS();

    PB_TING_THROW_CARDS(const PB_TING_THROW_CARDS& from);

    inline PB_TING_THROW_CARDS& operator=(const PB_TING_THROW_CARDS& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_TING_THROW_CARDS(PB_TING_THROW_CARDS&& from) noexcept
        : PB_TING_THROW_CARDS()
    {
        *this = ::std::move(from);
    }

    inline PB_TING_THROW_CARDS& operator=(PB_TING_THROW_CARDS&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_TING_THROW_CARDS& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_TING_THROW_CARDS* internal_default_instance()
    {
        return reinterpret_cast<const PB_TING_THROW_CARDS*>(
                &_PB_TING_THROW_CARDS_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        1;

    void Swap(PB_TING_THROW_CARDS* other);
    friend void swap(PB_TING_THROW_CARDS& a, PB_TING_THROW_CARDS& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_TING_THROW_CARDS* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_TING_THROW_CARDS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_TING_THROW_CARDS& from);
    void MergeFrom(const PB_TING_THROW_CARDS& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_TING_THROW_CARDS* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated sint32 card_ids = 8;
    int card_ids_size() const;
    void clear_card_ids();
    static const int kCardIdsFieldNumber = 8;
    ::google::protobuf::int32 card_ids(int index) const;
    void set_card_ids(int index, ::google::protobuf::int32 value);
    void add_card_ids(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    card_ids() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_card_ids();

    // optional .game.PB_SENDER_INFO sender_info = 9;
    bool has_sender_info() const;
    void clear_sender_info();
    static const int kSenderInfoFieldNumber = 9;
    const ::game::PB_SENDER_INFO& sender_info() const;
    ::game::PB_SENDER_INFO* release_sender_info();
    ::game::PB_SENDER_INFO* mutable_sender_info();
    void set_allocated_sender_info(::game::PB_SENDER_INFO* sender_info);

    // optional sint32 user_id = 1;
    bool has_user_id() const;
    void clear_user_id();
    static const int kUserIdFieldNumber = 1;
    ::google::protobuf::int32 user_id() const;
    void set_user_id(::google::protobuf::int32 value);

    // optional sint32 room_id = 2;
    bool has_room_id() const;
    void clear_room_id();
    static const int kRoomIdFieldNumber = 2;
    ::google::protobuf::int32 room_id() const;
    void set_room_id(::google::protobuf::int32 value);

    // optional sint32 table_no = 3;
    bool has_table_no() const;
    void clear_table_no();
    static const int kTableNoFieldNumber = 3;
    ::google::protobuf::int32 table_no() const;
    void set_table_no(::google::protobuf::int32 value);

    // optional sint32 chair_no = 4;
    bool has_chair_no() const;
    void clear_chair_no();
    static const int kChairNoFieldNumber = 4;
    ::google::protobuf::int32 chair_no() const;
    void set_chair_no(::google::protobuf::int32 value);

    // optional sint32 passive = 5;
    bool has_passive() const;
    void clear_passive();
    static const int kPassiveFieldNumber = 5;
    ::google::protobuf::int32 passive() const;
    void set_passive(::google::protobuf::int32 value);

    // optional int32 cards_type = 6;
    bool has_cards_type() const;
    void clear_cards_type();
    static const int kCardsTypeFieldNumber = 6;
    ::google::protobuf::int32 cards_type() const;
    void set_cards_type(::google::protobuf::int32 value);

    // optional sint32 cards_cout = 7;
    bool has_cards_cout() const;
    void clear_cards_cout();
    static const int kCardsCoutFieldNumber = 7;
    ::google::protobuf::int32 cards_cout() const;
    void set_cards_cout(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:game.PB_TING_THROW_CARDS)
private:
    void set_has_user_id();
    void clear_has_user_id();
    void set_has_room_id();
    void clear_has_room_id();
    void set_has_table_no();
    void clear_has_table_no();
    void set_has_chair_no();
    void clear_has_chair_no();
    void set_has_passive();
    void clear_has_passive();
    void set_has_cards_type();
    void clear_has_cards_type();
    void set_has_cards_cout();
    void clear_has_cards_cout();
    void set_has_sender_info();
    void clear_has_sender_info();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_ids_;
    ::game::PB_SENDER_INFO* sender_info_;
    ::google::protobuf::int32 user_id_;
    ::google::protobuf::int32 room_id_;
    ::google::protobuf::int32 table_no_;
    ::google::protobuf::int32 chair_no_;
    ::google::protobuf::int32 passive_;
    ::google::protobuf::int32 cards_type_;
    ::google::protobuf::int32 cards_cout_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_TING_THROW_CARDSImpl();
};
// -------------------------------------------------------------------

class PB_MJ_START_DATA : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_MJ_START_DATA) */
{
public:
    PB_MJ_START_DATA();
    virtual ~PB_MJ_START_DATA();

    PB_MJ_START_DATA(const PB_MJ_START_DATA& from);

    inline PB_MJ_START_DATA& operator=(const PB_MJ_START_DATA& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_MJ_START_DATA(PB_MJ_START_DATA&& from) noexcept
        : PB_MJ_START_DATA()
    {
        *this = ::std::move(from);
    }

    inline PB_MJ_START_DATA& operator=(PB_MJ_START_DATA&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_MJ_START_DATA& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_MJ_START_DATA* internal_default_instance()
    {
        return reinterpret_cast<const PB_MJ_START_DATA*>(
                &_PB_MJ_START_DATA_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        2;

    void Swap(PB_MJ_START_DATA* other);
    friend void swap(PB_MJ_START_DATA& a, PB_MJ_START_DATA& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_MJ_START_DATA* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_MJ_START_DATA* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_MJ_START_DATA& from);
    void MergeFrom(const PB_MJ_START_DATA& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_MJ_START_DATA* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated sint32 nDices = 31;
    int ndices_size() const;
    void clear_ndices();
    static const int kNDicesFieldNumber = 31;
    ::google::protobuf::int32 ndices(int index) const;
    void set_ndices(int index, ::google::protobuf::int32 value);
    void add_ndices(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    ndices() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_ndices();

    // repeated sint32 nPreHuOneFeng13BKFlag = 33;
    int nprehuonefeng13bkflag_size() const;
    void clear_nprehuonefeng13bkflag();
    static const int kNPreHuOneFeng13BKFlagFieldNumber = 33;
    ::google::protobuf::int32 nprehuonefeng13bkflag(int index) const;
    void set_nprehuonefeng13bkflag(int index, ::google::protobuf::int32 value);
    void add_nprehuonefeng13bkflag(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nprehuonefeng13bkflag() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nprehuonefeng13bkflag();

    // repeated sint32 nAddGainsScore = 34;
    int naddgainsscore_size() const;
    void clear_naddgainsscore();
    static const int kNAddGainsScoreFieldNumber = 34;
    ::google::protobuf::int32 naddgainsscore(int index) const;
    void set_naddgainsscore(int index, ::google::protobuf::int32 value);
    void add_naddgainsscore(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    naddgainsscore() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_naddgainsscore();

    // optional string szSerialNO = 30;
    bool has_szserialno() const;
    void clear_szserialno();
    static const int kSzSerialNOFieldNumber = 30;
    const ::std::string& szserialno() const;
    void set_szserialno(const ::std::string& value);
#if LANG_CXX11
    void set_szserialno(::std::string&& value);
#endif
    void set_szserialno(const char* value);
    void set_szserialno(const char* value, size_t size);
    ::std::string* mutable_szserialno();
    ::std::string* release_szserialno();
    void set_allocated_szserialno(::std::string* szserialno);

    // optional sint32 nBoutCount = 1;
    bool has_nboutcount() const;
    void clear_nboutcount();
    static const int kNBoutCountFieldNumber = 1;
    ::google::protobuf::int32 nboutcount() const;
    void set_nboutcount(::google::protobuf::int32 value);

    // optional sint32 nBaseDeposit = 2;
    bool has_nbasedeposit() const;
    void clear_nbasedeposit();
    static const int kNBaseDepositFieldNumber = 2;
    ::google::protobuf::int32 nbasedeposit() const;
    void set_nbasedeposit(::google::protobuf::int32 value);

    // optional sint32 nBaseScore = 3;
    bool has_nbasescore() const;
    void clear_nbasescore();
    static const int kNBaseScoreFieldNumber = 3;
    ::google::protobuf::int32 nbasescore() const;
    void set_nbasescore(::google::protobuf::int32 value);

    // optional sint32 nBanker = 4;
    bool has_nbanker() const;
    void clear_nbanker();
    static const int kNBankerFieldNumber = 4;
    ::google::protobuf::int32 nbanker() const;
    void set_nbanker(::google::protobuf::int32 value);

    // optional sint32 nBankerHold = 5;
    bool has_nbankerhold() const;
    void clear_nbankerhold();
    static const int kNBankerHoldFieldNumber = 5;
    ::google::protobuf::int32 nbankerhold() const;
    void set_nbankerhold(::google::protobuf::int32 value);

    // optional sint32 nCurrentChair = 6;
    bool has_ncurrentchair() const;
    void clear_ncurrentchair();
    static const int kNCurrentChairFieldNumber = 6;
    ::google::protobuf::int32 ncurrentchair() const;
    void set_ncurrentchair(::google::protobuf::int32 value);

    // optional int32 dwStatus = 7;
    bool has_dwstatus() const;
    void clear_dwstatus();
    static const int kDwStatusFieldNumber = 7;
    ::google::protobuf::int32 dwstatus() const;
    void set_dwstatus(::google::protobuf::int32 value);

    // optional int32 dwCurrentFlags = 8;
    bool has_dwcurrentflags() const;
    void clear_dwcurrentflags();
    static const int kDwCurrentFlagsFieldNumber = 8;
    ::google::protobuf::int32 dwcurrentflags() const;
    void set_dwcurrentflags(::google::protobuf::int32 value);

    // optional sint32 nFirstCatch = 9;
    bool has_nfirstcatch() const;
    void clear_nfirstcatch();
    static const int kNFirstCatchFieldNumber = 9;
    ::google::protobuf::int32 nfirstcatch() const;
    void set_nfirstcatch(::google::protobuf::int32 value);

    // optional sint32 nFirstThrow = 10;
    bool has_nfirstthrow() const;
    void clear_nfirstthrow();
    static const int kNFirstThrowFieldNumber = 10;
    ::google::protobuf::int32 nfirstthrow() const;
    void set_nfirstthrow(::google::protobuf::int32 value);

    // optional sint32 nThrowWait = 11;
    bool has_nthrowwait() const;
    void clear_nthrowwait();
    static const int kNThrowWaitFieldNumber = 11;
    ::google::protobuf::int32 nthrowwait() const;
    void set_nthrowwait(::google::protobuf::int32 value);

    // optional sint32 nMaxAutoThrow = 12;
    bool has_nmaxautothrow() const;
    void clear_nmaxautothrow();
    static const int kNMaxAutoThrowFieldNumber = 12;
    ::google::protobuf::int32 nmaxautothrow() const;
    void set_nmaxautothrow(::google::protobuf::int32 value);

    // optional sint32 nEntrustWait = 13;
    bool has_nentrustwait() const;
    void clear_nentrustwait();
    static const int kNEntrustWaitFieldNumber = 13;
    ::google::protobuf::int32 nentrustwait() const;
    void set_nentrustwait(::google::protobuf::int32 value);

    // optional sint32 bNeedDeposit = 14;
    bool has_bneeddeposit() const;
    void clear_bneeddeposit();
    static const int kBNeedDepositFieldNumber = 14;
    ::google::protobuf::int32 bneeddeposit() const;
    void set_bneeddeposit(::google::protobuf::int32 value);

    // optional sint32 bForbidDesert = 15;
    bool has_bforbiddesert() const;
    void clear_bforbiddesert();
    static const int kBForbidDesertFieldNumber = 15;
    ::google::protobuf::int32 bforbiddesert() const;
    void set_bforbiddesert(::google::protobuf::int32 value);

    // optional sint32 bQuickCatch = 16;
    bool has_bquickcatch() const;
    void clear_bquickcatch();
    static const int kBQuickCatchFieldNumber = 16;
    ::google::protobuf::int32 bquickcatch() const;
    void set_bquickcatch(::google::protobuf::int32 value);

    // optional sint32 bAllowChi = 17;
    bool has_ballowchi() const;
    void clear_ballowchi();
    static const int kBAllowChiFieldNumber = 17;
    ::google::protobuf::int32 ballowchi() const;
    void set_ballowchi(::google::protobuf::int32 value);

    // optional sint32 bAnGangShow = 18;
    bool has_bangangshow() const;
    void clear_bangangshow();
    static const int kBAnGangShowFieldNumber = 18;
    ::google::protobuf::int32 bangangshow() const;
    void set_bangangshow(::google::protobuf::int32 value);

    // optional sint32 bJokerSortIn = 19;
    bool has_bjokersortin() const;
    void clear_bjokersortin();
    static const int kBJokerSortInFieldNumber = 19;
    ::google::protobuf::int32 bjokersortin() const;
    void set_bjokersortin(::google::protobuf::int32 value);

    // optional sint32 bBaibanNoSort = 20;
    bool has_bbaibannosort() const;
    void clear_bbaibannosort();
    static const int kBBaibanNoSortFieldNumber = 20;
    ::google::protobuf::int32 bbaibannosort() const;
    void set_bbaibannosort(::google::protobuf::int32 value);

    // optional sint32 nBeginNO = 21;
    bool has_nbeginno() const;
    void clear_nbeginno();
    static const int kNBeginNOFieldNumber = 21;
    ::google::protobuf::int32 nbeginno() const;
    void set_nbeginno(::google::protobuf::int32 value);

    // optional sint32 nJokerNO = 22;
    bool has_njokerno() const;
    void clear_njokerno();
    static const int kNJokerNOFieldNumber = 22;
    ::google::protobuf::int32 njokerno() const;
    void set_njokerno(::google::protobuf::int32 value);

    // optional sint32 nJokerID = 23;
    bool has_njokerid() const;
    void clear_njokerid();
    static const int kNJokerIDFieldNumber = 23;
    ::google::protobuf::int32 njokerid() const;
    void set_njokerid(::google::protobuf::int32 value);

    // optional sint32 nJokerID2 = 24;
    bool has_njokerid2() const;
    void clear_njokerid2();
    static const int kNJokerID2FieldNumber = 24;
    ::google::protobuf::int32 njokerid2() const;
    void set_njokerid2(::google::protobuf::int32 value);

    // optional sint32 nFanID = 25;
    bool has_nfanid() const;
    void clear_nfanid();
    static const int kNFanIDFieldNumber = 25;
    ::google::protobuf::int32 nfanid() const;
    void set_nfanid(::google::protobuf::int32 value);

    // optional sint32 nTailTaken = 26;
    bool has_ntailtaken() const;
    void clear_ntailtaken();
    static const int kNTailTakenFieldNumber = 26;
    ::google::protobuf::int32 ntailtaken() const;
    void set_ntailtaken(::google::protobuf::int32 value);

    // optional sint32 nCurrentCatch = 27;
    bool has_ncurrentcatch() const;
    void clear_ncurrentcatch();
    static const int kNCurrentCatchFieldNumber = 27;
    ::google::protobuf::int32 ncurrentcatch() const;
    void set_ncurrentcatch(::google::protobuf::int32 value);

    // optional sint32 nPGCHWait = 28;
    bool has_npgchwait() const;
    void clear_npgchwait();
    static const int kNPGCHWaitFieldNumber = 28;
    ::google::protobuf::int32 npgchwait() const;
    void set_npgchwait(::google::protobuf::int32 value);

    // optional sint32 nPGCHWaitEx = 29;
    bool has_npgchwaitex() const;
    void clear_npgchwaitex();
    static const int kNPGCHWaitExFieldNumber = 29;
    ::google::protobuf::int32 npgchwaitex() const;
    void set_npgchwaitex(::google::protobuf::int32 value);

    // optional sint32 nYqwAutoPlayWait = 32;
    bool has_nyqwautoplaywait() const;
    void clear_nyqwautoplaywait();
    static const int kNYqwAutoPlayWaitFieldNumber = 32;
    ::google::protobuf::int32 nyqwautoplaywait() const;
    void set_nyqwautoplaywait(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:game.PB_MJ_START_DATA)
private:
    void set_has_nboutcount();
    void clear_has_nboutcount();
    void set_has_nbasedeposit();
    void clear_has_nbasedeposit();
    void set_has_nbasescore();
    void clear_has_nbasescore();
    void set_has_nbanker();
    void clear_has_nbanker();
    void set_has_nbankerhold();
    void clear_has_nbankerhold();
    void set_has_ncurrentchair();
    void clear_has_ncurrentchair();
    void set_has_dwstatus();
    void clear_has_dwstatus();
    void set_has_dwcurrentflags();
    void clear_has_dwcurrentflags();
    void set_has_nfirstcatch();
    void clear_has_nfirstcatch();
    void set_has_nfirstthrow();
    void clear_has_nfirstthrow();
    void set_has_nthrowwait();
    void clear_has_nthrowwait();
    void set_has_nmaxautothrow();
    void clear_has_nmaxautothrow();
    void set_has_nentrustwait();
    void clear_has_nentrustwait();
    void set_has_bneeddeposit();
    void clear_has_bneeddeposit();
    void set_has_bforbiddesert();
    void clear_has_bforbiddesert();
    void set_has_bquickcatch();
    void clear_has_bquickcatch();
    void set_has_ballowchi();
    void clear_has_ballowchi();
    void set_has_bangangshow();
    void clear_has_bangangshow();
    void set_has_bjokersortin();
    void clear_has_bjokersortin();
    void set_has_bbaibannosort();
    void clear_has_bbaibannosort();
    void set_has_nbeginno();
    void clear_has_nbeginno();
    void set_has_njokerno();
    void clear_has_njokerno();
    void set_has_njokerid();
    void clear_has_njokerid();
    void set_has_njokerid2();
    void clear_has_njokerid2();
    void set_has_nfanid();
    void clear_has_nfanid();
    void set_has_ntailtaken();
    void clear_has_ntailtaken();
    void set_has_ncurrentcatch();
    void clear_has_ncurrentcatch();
    void set_has_npgchwait();
    void clear_has_npgchwait();
    void set_has_npgchwaitex();
    void clear_has_npgchwaitex();
    void set_has_szserialno();
    void clear_has_szserialno();
    void set_has_nyqwautoplaywait();
    void clear_has_nyqwautoplaywait();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ndices_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nprehuonefeng13bkflag_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > naddgainsscore_;
    ::google::protobuf::internal::ArenaStringPtr szserialno_;
    ::google::protobuf::int32 nboutcount_;
    ::google::protobuf::int32 nbasedeposit_;
    ::google::protobuf::int32 nbasescore_;
    ::google::protobuf::int32 nbanker_;
    ::google::protobuf::int32 nbankerhold_;
    ::google::protobuf::int32 ncurrentchair_;
    ::google::protobuf::int32 dwstatus_;
    ::google::protobuf::int32 dwcurrentflags_;
    ::google::protobuf::int32 nfirstcatch_;
    ::google::protobuf::int32 nfirstthrow_;
    ::google::protobuf::int32 nthrowwait_;
    ::google::protobuf::int32 nmaxautothrow_;
    ::google::protobuf::int32 nentrustwait_;
    ::google::protobuf::int32 bneeddeposit_;
    ::google::protobuf::int32 bforbiddesert_;
    ::google::protobuf::int32 bquickcatch_;
    ::google::protobuf::int32 ballowchi_;
    ::google::protobuf::int32 bangangshow_;
    ::google::protobuf::int32 bjokersortin_;
    ::google::protobuf::int32 bbaibannosort_;
    ::google::protobuf::int32 nbeginno_;
    ::google::protobuf::int32 njokerno_;
    ::google::protobuf::int32 njokerid_;
    ::google::protobuf::int32 njokerid2_;
    ::google::protobuf::int32 nfanid_;
    ::google::protobuf::int32 ntailtaken_;
    ::google::protobuf::int32 ncurrentcatch_;
    ::google::protobuf::int32 npgchwait_;
    ::google::protobuf::int32 npgchwaitex_;
    ::google::protobuf::int32 nyqwautoplaywait_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_MJ_START_DATAImpl();
};
// -------------------------------------------------------------------

class PB_CARDS_UNIT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_CARDS_UNIT) */
{
public:
    PB_CARDS_UNIT();
    virtual ~PB_CARDS_UNIT();

    PB_CARDS_UNIT(const PB_CARDS_UNIT& from);

    inline PB_CARDS_UNIT& operator=(const PB_CARDS_UNIT& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_CARDS_UNIT(PB_CARDS_UNIT&& from) noexcept
        : PB_CARDS_UNIT()
    {
        *this = ::std::move(from);
    }

    inline PB_CARDS_UNIT& operator=(PB_CARDS_UNIT&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_CARDS_UNIT& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_CARDS_UNIT* internal_default_instance()
    {
        return reinterpret_cast<const PB_CARDS_UNIT*>(
                &_PB_CARDS_UNIT_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        3;

    void Swap(PB_CARDS_UNIT* other);
    friend void swap(PB_CARDS_UNIT& a, PB_CARDS_UNIT& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_CARDS_UNIT* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_CARDS_UNIT* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_CARDS_UNIT& from);
    void MergeFrom(const PB_CARDS_UNIT& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_CARDS_UNIT* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated sint32 nCardIDs = 2;
    int ncardids_size() const;
    void clear_ncardids();
    static const int kNCardIDsFieldNumber = 2;
    ::google::protobuf::int32 ncardids(int index) const;
    void set_ncardids(int index, ::google::protobuf::int32 value);
    void add_ncardids(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    ncardids() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_ncardids();

    // optional sint32 nCardChair = 1;
    bool has_ncardchair() const;
    void clear_ncardchair();
    static const int kNCardChairFieldNumber = 1;
    ::google::protobuf::int32 ncardchair() const;
    void set_ncardchair(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:game.PB_CARDS_UNIT)
private:
    void set_has_ncardchair();
    void clear_has_ncardchair();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ncardids_;
    ::google::protobuf::int32 ncardchair_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_CARDS_UNITImpl();
};
// -------------------------------------------------------------------

class PB_CARDS_UNIT_CHAIR : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_CARDS_UNIT_CHAIR) */
{
public:
    PB_CARDS_UNIT_CHAIR();
    virtual ~PB_CARDS_UNIT_CHAIR();

    PB_CARDS_UNIT_CHAIR(const PB_CARDS_UNIT_CHAIR& from);

    inline PB_CARDS_UNIT_CHAIR& operator=(const PB_CARDS_UNIT_CHAIR& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_CARDS_UNIT_CHAIR(PB_CARDS_UNIT_CHAIR&& from) noexcept
        : PB_CARDS_UNIT_CHAIR()
    {
        *this = ::std::move(from);
    }

    inline PB_CARDS_UNIT_CHAIR& operator=(PB_CARDS_UNIT_CHAIR&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_CARDS_UNIT_CHAIR& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_CARDS_UNIT_CHAIR* internal_default_instance()
    {
        return reinterpret_cast<const PB_CARDS_UNIT_CHAIR*>(
                &_PB_CARDS_UNIT_CHAIR_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        4;

    void Swap(PB_CARDS_UNIT_CHAIR* other);
    friend void swap(PB_CARDS_UNIT_CHAIR& a, PB_CARDS_UNIT_CHAIR& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_CARDS_UNIT_CHAIR* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_CARDS_UNIT_CHAIR* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_CARDS_UNIT_CHAIR& from);
    void MergeFrom(const PB_CARDS_UNIT_CHAIR& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_CARDS_UNIT_CHAIR* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .game.PB_CARDS_UNIT chair_cardsunit = 1;
    int chair_cardsunit_size() const;
    void clear_chair_cardsunit();
    static const int kChairCardsunitFieldNumber = 1;
    const ::game::PB_CARDS_UNIT& chair_cardsunit(int index) const;
    ::game::PB_CARDS_UNIT* mutable_chair_cardsunit(int index);
    ::game::PB_CARDS_UNIT* add_chair_cardsunit();
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT >*
    mutable_chair_cardsunit();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT >&
    chair_cardsunit() const;

    // @@protoc_insertion_point(class_scope:game.PB_CARDS_UNIT_CHAIR)
private:

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT > chair_cardsunit_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_CARDS_UNIT_CHAIRImpl();
};
// -------------------------------------------------------------------

class PB_INT_CHAIR : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_INT_CHAIR) */
{
public:
    PB_INT_CHAIR();
    virtual ~PB_INT_CHAIR();

    PB_INT_CHAIR(const PB_INT_CHAIR& from);

    inline PB_INT_CHAIR& operator=(const PB_INT_CHAIR& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_INT_CHAIR(PB_INT_CHAIR&& from) noexcept
        : PB_INT_CHAIR()
    {
        *this = ::std::move(from);
    }

    inline PB_INT_CHAIR& operator=(PB_INT_CHAIR&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_INT_CHAIR& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_INT_CHAIR* internal_default_instance()
    {
        return reinterpret_cast<const PB_INT_CHAIR*>(
                &_PB_INT_CHAIR_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        5;

    void Swap(PB_INT_CHAIR* other);
    friend void swap(PB_INT_CHAIR& a, PB_INT_CHAIR& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_INT_CHAIR* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_INT_CHAIR* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_INT_CHAIR& from);
    void MergeFrom(const PB_INT_CHAIR& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_INT_CHAIR* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated sint32 nCardIDs = 1;
    int ncardids_size() const;
    void clear_ncardids();
    static const int kNCardIDsFieldNumber = 1;
    ::google::protobuf::int32 ncardids(int index) const;
    void set_ncardids(int index, ::google::protobuf::int32 value);
    void add_ncardids(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    ncardids() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_ncardids();

    // @@protoc_insertion_point(class_scope:game.PB_INT_CHAIR)
private:

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ncardids_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_INT_CHAIRImpl();
};
// -------------------------------------------------------------------

class PB_MJ_PLAY_DATA : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_MJ_PLAY_DATA) */
{
public:
    PB_MJ_PLAY_DATA();
    virtual ~PB_MJ_PLAY_DATA();

    PB_MJ_PLAY_DATA(const PB_MJ_PLAY_DATA& from);

    inline PB_MJ_PLAY_DATA& operator=(const PB_MJ_PLAY_DATA& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_MJ_PLAY_DATA(PB_MJ_PLAY_DATA&& from) noexcept
        : PB_MJ_PLAY_DATA()
    {
        *this = ::std::move(from);
    }

    inline PB_MJ_PLAY_DATA& operator=(PB_MJ_PLAY_DATA&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_MJ_PLAY_DATA& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_MJ_PLAY_DATA* internal_default_instance()
    {
        return reinterpret_cast<const PB_MJ_PLAY_DATA*>(
                &_PB_MJ_PLAY_DATA_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        6;

    void Swap(PB_MJ_PLAY_DATA* other);
    friend void swap(PB_MJ_PLAY_DATA& a, PB_MJ_PLAY_DATA& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_MJ_PLAY_DATA* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_MJ_PLAY_DATA* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_MJ_PLAY_DATA& from);
    void MergeFrom(const PB_MJ_PLAY_DATA& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_MJ_PLAY_DATA* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .game.PB_CARDS_UNIT_CHAIR PengCards = 1;
    int pengcards_size() const;
    void clear_pengcards();
    static const int kPengCardsFieldNumber = 1;
    const ::game::PB_CARDS_UNIT_CHAIR& pengcards(int index) const;
    ::game::PB_CARDS_UNIT_CHAIR* mutable_pengcards(int index);
    ::game::PB_CARDS_UNIT_CHAIR* add_pengcards();
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >*
    mutable_pengcards();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >&
    pengcards() const;

    // repeated sint32 nPengCount = 2;
    int npengcount_size() const;
    void clear_npengcount();
    static const int kNPengCountFieldNumber = 2;
    ::google::protobuf::int32 npengcount(int index) const;
    void set_npengcount(int index, ::google::protobuf::int32 value);
    void add_npengcount(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    npengcount() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_npengcount();

    // repeated .game.PB_CARDS_UNIT_CHAIR ChiCards = 3;
    int chicards_size() const;
    void clear_chicards();
    static const int kChiCardsFieldNumber = 3;
    const ::game::PB_CARDS_UNIT_CHAIR& chicards(int index) const;
    ::game::PB_CARDS_UNIT_CHAIR* mutable_chicards(int index);
    ::game::PB_CARDS_UNIT_CHAIR* add_chicards();
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >*
    mutable_chicards();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >&
    chicards() const;

    // repeated sint32 nChiCount = 4;
    int nchicount_size() const;
    void clear_nchicount();
    static const int kNChiCountFieldNumber = 4;
    ::google::protobuf::int32 nchicount(int index) const;
    void set_nchicount(int index, ::google::protobuf::int32 value);
    void add_nchicount(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nchicount() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nchicount();

    // repeated .game.PB_CARDS_UNIT_CHAIR MnGangCards = 5;
    int mngangcards_size() const;
    void clear_mngangcards();
    static const int kMnGangCardsFieldNumber = 5;
    const ::game::PB_CARDS_UNIT_CHAIR& mngangcards(int index) const;
    ::game::PB_CARDS_UNIT_CHAIR* mutable_mngangcards(int index);
    ::game::PB_CARDS_UNIT_CHAIR* add_mngangcards();
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >*
    mutable_mngangcards();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >&
    mngangcards() const;

    // repeated sint32 nMnGangCount = 6;
    int nmngangcount_size() const;
    void clear_nmngangcount();
    static const int kNMnGangCountFieldNumber = 6;
    ::google::protobuf::int32 nmngangcount(int index) const;
    void set_nmngangcount(int index, ::google::protobuf::int32 value);
    void add_nmngangcount(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nmngangcount() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nmngangcount();

    // repeated .game.PB_CARDS_UNIT_CHAIR AnGangCards = 7;
    int angangcards_size() const;
    void clear_angangcards();
    static const int kAnGangCardsFieldNumber = 7;
    const ::game::PB_CARDS_UNIT_CHAIR& angangcards(int index) const;
    ::game::PB_CARDS_UNIT_CHAIR* mutable_angangcards(int index);
    ::game::PB_CARDS_UNIT_CHAIR* add_angangcards();
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >*
    mutable_angangcards();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >&
    angangcards() const;

    // repeated sint32 nAnGangCount = 8;
    int nangangcount_size() const;
    void clear_nangangcount();
    static const int kNAnGangCountFieldNumber = 8;
    ::google::protobuf::int32 nangangcount(int index) const;
    void set_nangangcount(int index, ::google::protobuf::int32 value);
    void add_nangangcount(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nangangcount() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nangangcount();

    // repeated .game.PB_CARDS_UNIT_CHAIR PnGangCards = 9;
    int pngangcards_size() const;
    void clear_pngangcards();
    static const int kPnGangCardsFieldNumber = 9;
    const ::game::PB_CARDS_UNIT_CHAIR& pngangcards(int index) const;
    ::game::PB_CARDS_UNIT_CHAIR* mutable_pngangcards(int index);
    ::game::PB_CARDS_UNIT_CHAIR* add_pngangcards();
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >*
    mutable_pngangcards();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >&
    pngangcards() const;

    // repeated sint32 nPnGangCount = 10;
    int npngangcount_size() const;
    void clear_npngangcount();
    static const int kNPnGangCountFieldNumber = 10;
    ::google::protobuf::int32 npngangcount(int index) const;
    void set_npngangcount(int index, ::google::protobuf::int32 value);
    void add_npngangcount(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    npngangcount() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_npngangcount();

    // repeated .game.PB_INT_CHAIR nOutCards = 11;
    int noutcards_size() const;
    void clear_noutcards();
    static const int kNOutCardsFieldNumber = 11;
    const ::game::PB_INT_CHAIR& noutcards(int index) const;
    ::game::PB_INT_CHAIR* mutable_noutcards(int index);
    ::game::PB_INT_CHAIR* add_noutcards();
    ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >*
    mutable_noutcards();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >&
    noutcards() const;

    // repeated sint32 nOutCount = 12;
    int noutcount_size() const;
    void clear_noutcount();
    static const int kNOutCountFieldNumber = 12;
    ::google::protobuf::int32 noutcount(int index) const;
    void set_noutcount(int index, ::google::protobuf::int32 value);
    void add_noutcount(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    noutcount() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_noutcount();

    // repeated .game.PB_INT_CHAIR nHuaCards = 13;
    int nhuacards_size() const;
    void clear_nhuacards();
    static const int kNHuaCardsFieldNumber = 13;
    const ::game::PB_INT_CHAIR& nhuacards(int index) const;
    ::game::PB_INT_CHAIR* mutable_nhuacards(int index);
    ::game::PB_INT_CHAIR* add_nhuacards();
    ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >*
    mutable_nhuacards();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >&
    nhuacards() const;

    // repeated sint32 nHuaCount = 14;
    int nhuacount_size() const;
    void clear_nhuacount();
    static const int kNHuaCountFieldNumber = 14;
    ::google::protobuf::int32 nhuacount(int index) const;
    void set_nhuacount(int index, ::google::protobuf::int32 value);
    void add_nhuacount(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nhuacount() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nhuacount();

    // @@protoc_insertion_point(class_scope:game.PB_MJ_PLAY_DATA)
private:

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR > pengcards_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > npengcount_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR > chicards_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nchicount_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR > mngangcards_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nmngangcount_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR > angangcards_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nangangcount_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR > pngangcards_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > npngangcount_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR > noutcards_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > noutcount_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR > nhuacards_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nhuacount_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_MJ_PLAY_DATAImpl();
};
// -------------------------------------------------------------------

class PB_GAME_TABLE_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_GAME_TABLE_INFO) */
{
public:
    PB_GAME_TABLE_INFO();
    virtual ~PB_GAME_TABLE_INFO();

    PB_GAME_TABLE_INFO(const PB_GAME_TABLE_INFO& from);

    inline PB_GAME_TABLE_INFO& operator=(const PB_GAME_TABLE_INFO& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_GAME_TABLE_INFO(PB_GAME_TABLE_INFO&& from) noexcept
        : PB_GAME_TABLE_INFO()
    {
        *this = ::std::move(from);
    }

    inline PB_GAME_TABLE_INFO& operator=(PB_GAME_TABLE_INFO&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_GAME_TABLE_INFO& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_GAME_TABLE_INFO* internal_default_instance()
    {
        return reinterpret_cast<const PB_GAME_TABLE_INFO*>(
                &_PB_GAME_TABLE_INFO_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        7;

    void Swap(PB_GAME_TABLE_INFO* other);
    friend void swap(PB_GAME_TABLE_INFO& a, PB_GAME_TABLE_INFO& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_GAME_TABLE_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_GAME_TABLE_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_GAME_TABLE_INFO& from);
    void MergeFrom(const PB_GAME_TABLE_INFO& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_GAME_TABLE_INFO* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated int32 dwUserStatus = 6;
    int dwuserstatus_size() const;
    void clear_dwuserstatus();
    static const int kDwUserStatusFieldNumber = 6;
    ::google::protobuf::int32 dwuserstatus(int index) const;
    void set_dwuserstatus(int index, ::google::protobuf::int32 value);
    void add_dwuserstatus(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    dwuserstatus() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_dwuserstatus();

    // repeated sint32 nCardsCount = 7;
    int ncardscount_size() const;
    void clear_ncardscount();
    static const int kNCardsCountFieldNumber = 7;
    ::google::protobuf::int32 ncardscount(int index) const;
    void set_ncardscount(int index, ::google::protobuf::int32 value);
    void add_ncardscount(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    ncardscount() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_ncardscount();

    // repeated sint32 nChairCards = 8;
    int nchaircards_size() const;
    void clear_nchaircards();
    static const int kNChairCardsFieldNumber = 8;
    ::google::protobuf::int32 nchaircards(int index) const;
    void set_nchaircards(int index, ::google::protobuf::int32 value);
    void add_nchaircards(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nchaircards() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nchaircards();

    // repeated sint32 nAskExit = 9;
    int naskexit_size() const;
    void clear_naskexit();
    static const int kNAskExitFieldNumber = 9;
    ::google::protobuf::int32 naskexit(int index) const;
    void set_naskexit(int index, ::google::protobuf::int32 value);
    void add_naskexit(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    naskexit() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_naskexit();

    // repeated sint32 nResultDiff = 10;
    int nresultdiff_size() const;
    void clear_nresultdiff();
    static const int kNResultDiffFieldNumber = 10;
    ::google::protobuf::int32 nresultdiff(int index) const;
    void set_nresultdiff(int index, ::google::protobuf::int32 value);
    void add_nresultdiff(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nresultdiff() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nresultdiff();

    // repeated sint32 nTotalResult = 11;
    int ntotalresult_size() const;
    void clear_ntotalresult();
    static const int kNTotalResultFieldNumber = 11;
    ::google::protobuf::int32 ntotalresult(int index) const;
    void set_ntotalresult(int index, ::google::protobuf::int32 value);
    void add_ntotalresult(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    ntotalresult() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_ntotalresult();

    // repeated int32 dwPGCHFlags = 12;
    int dwpgchflags_size() const;
    void clear_dwpgchflags();
    static const int kDwPGCHFlagsFieldNumber = 12;
    ::google::protobuf::int32 dwpgchflags(int index) const;
    void set_dwpgchflags(int index, ::google::protobuf::int32 value);
    void add_dwpgchflags(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    dwpgchflags() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_dwpgchflags();

    // repeated sint32 nTingCardsDXXW = 17;
    int ntingcardsdxxw_size() const;
    void clear_ntingcardsdxxw();
    static const int kNTingCardsDXXWFieldNumber = 17;
    ::google::protobuf::int32 ntingcardsdxxw(int index) const;
    void set_ntingcardsdxxw(int index, ::google::protobuf::int32 value);
    void add_ntingcardsdxxw(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    ntingcardsdxxw() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_ntingcardsdxxw();

    // repeated sint32 bao_ting = 20;
    int bao_ting_size() const;
    void clear_bao_ting();
    static const int kBaoTingFieldNumber = 20;
    ::google::protobuf::int32 bao_ting(int index) const;
    void set_bao_ting(int index, ::google::protobuf::int32 value);
    void add_bao_ting(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    bao_ting() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_bao_ting();

    // optional .tc.MJTableInfo main = 1;
    bool has_main() const;
    void clear_main();
    static const int kMainFieldNumber = 1;
    const ::tc::MJTableInfo& main() const;
    ::tc::MJTableInfo* release_main();
    ::tc::MJTableInfo* mutable_main();
    void set_allocated_main(::tc::MJTableInfo* main);

    // optional .game.PB_MJ_START_DATA StartInfo = 2;
    bool has_startinfo() const;
    void clear_startinfo();
    static const int kStartInfoFieldNumber = 2;
    const ::game::PB_MJ_START_DATA& startinfo() const;
    ::game::PB_MJ_START_DATA* release_startinfo();
    ::game::PB_MJ_START_DATA* mutable_startinfo();
    void set_allocated_startinfo(::game::PB_MJ_START_DATA* startinfo);

    // optional .game.PB_MJ_PLAY_DATA PlayData = 3;
    bool has_playdata() const;
    void clear_playdata();
    static const int kPlayDataFieldNumber = 3;
    const ::game::PB_MJ_PLAY_DATA& playdata() const;
    ::game::PB_MJ_PLAY_DATA* release_playdata();
    ::game::PB_MJ_PLAY_DATA* mutable_playdata();
    void set_allocated_playdata(::game::PB_MJ_PLAY_DATA* playdata);

    // optional .game.PB_CARD_TING_DETAIL tingdetail = 16;
    bool has_tingdetail() const;
    void clear_tingdetail();
    static const int kTingdetailFieldNumber = 16;
    const ::game::PB_CARD_TING_DETAIL& tingdetail() const;
    ::game::PB_CARD_TING_DETAIL* release_tingdetail();
    ::game::PB_CARD_TING_DETAIL* mutable_tingdetail();
    void set_allocated_tingdetail(::game::PB_CARD_TING_DETAIL* tingdetail);

    // optional int32 dwGameFlags = 4;
    bool has_dwgameflags() const;
    void clear_dwgameflags();
    static const int kDwGameFlagsFieldNumber = 4;
    ::google::protobuf::int32 dwgameflags() const;
    void set_dwgameflags(::google::protobuf::int32 value);

    // optional sint32 nCurrentLeftOperateTime = 5;
    bool has_ncurrentleftoperatetime() const;
    void clear_ncurrentleftoperatetime();
    static const int kNCurrentLeftOperateTimeFieldNumber = 5;
    ::google::protobuf::int32 ncurrentleftoperatetime() const;
    void set_ncurrentleftoperatetime(::google::protobuf::int32 value);

    // optional sint32 nQghFlag = 13;
    bool has_nqghflag() const;
    void clear_nqghflag();
    static const int kNQghFlagFieldNumber = 13;
    ::google::protobuf::int32 nqghflag() const;
    void set_nqghflag(::google::protobuf::int32 value);

    // optional sint32 nQghID = 14;
    bool has_nqghid() const;
    void clear_nqghid();
    static const int kNQghIDFieldNumber = 14;
    ::google::protobuf::int32 nqghid() const;
    void set_nqghid(::google::protobuf::int32 value);

    // optional sint32 nQghChair = 15;
    bool has_nqghchair() const;
    void clear_nqghchair();
    static const int kNQghChairFieldNumber = 15;
    ::google::protobuf::int32 nqghchair() const;
    void set_nqghchair(::google::protobuf::int32 value);

    // optional sint32 dwTimeStamp = 18;
    bool has_dwtimestamp() const;
    void clear_dwtimestamp();
    static const int kDwTimeStampFieldNumber = 18;
    ::google::protobuf::int32 dwtimestamp() const;
    void set_dwtimestamp(::google::protobuf::int32 value);

    // optional int32 game_flags2 = 19;
    bool has_game_flags2() const;
    void clear_game_flags2();
    static const int kGameFlags2FieldNumber = 19;
    ::google::protobuf::int32 game_flags2() const;
    void set_game_flags2(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:game.PB_GAME_TABLE_INFO)
private:
    void set_has_main();
    void clear_has_main();
    void set_has_startinfo();
    void clear_has_startinfo();
    void set_has_playdata();
    void clear_has_playdata();
    void set_has_dwgameflags();
    void clear_has_dwgameflags();
    void set_has_ncurrentleftoperatetime();
    void clear_has_ncurrentleftoperatetime();
    void set_has_nqghflag();
    void clear_has_nqghflag();
    void set_has_nqghid();
    void clear_has_nqghid();
    void set_has_nqghchair();
    void clear_has_nqghchair();
    void set_has_tingdetail();
    void clear_has_tingdetail();
    void set_has_dwtimestamp();
    void clear_has_dwtimestamp();
    void set_has_game_flags2();
    void clear_has_game_flags2();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dwuserstatus_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ncardscount_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nchaircards_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > naskexit_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nresultdiff_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ntotalresult_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dwpgchflags_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ntingcardsdxxw_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bao_ting_;
    ::tc::MJTableInfo* main_;
    ::game::PB_MJ_START_DATA* startinfo_;
    ::game::PB_MJ_PLAY_DATA* playdata_;
    ::game::PB_CARD_TING_DETAIL* tingdetail_;
    ::google::protobuf::int32 dwgameflags_;
    ::google::protobuf::int32 ncurrentleftoperatetime_;
    ::google::protobuf::int32 nqghflag_;
    ::google::protobuf::int32 nqghid_;
    ::google::protobuf::int32 nqghchair_;
    ::google::protobuf::int32 dwtimestamp_;
    ::google::protobuf::int32 game_flags2_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_GAME_TABLE_INFOImpl();
};
// -------------------------------------------------------------------

class PB_SOLOPLAYER_HEAD : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_SOLOPLAYER_HEAD) */
{
public:
    PB_SOLOPLAYER_HEAD();
    virtual ~PB_SOLOPLAYER_HEAD();

    PB_SOLOPLAYER_HEAD(const PB_SOLOPLAYER_HEAD& from);

    inline PB_SOLOPLAYER_HEAD& operator=(const PB_SOLOPLAYER_HEAD& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_SOLOPLAYER_HEAD(PB_SOLOPLAYER_HEAD&& from) noexcept
        : PB_SOLOPLAYER_HEAD()
    {
        *this = ::std::move(from);
    }

    inline PB_SOLOPLAYER_HEAD& operator=(PB_SOLOPLAYER_HEAD&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_SOLOPLAYER_HEAD& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_SOLOPLAYER_HEAD* internal_default_instance()
    {
        return reinterpret_cast<const PB_SOLOPLAYER_HEAD*>(
                &_PB_SOLOPLAYER_HEAD_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        8;

    void Swap(PB_SOLOPLAYER_HEAD* other);
    friend void swap(PB_SOLOPLAYER_HEAD& a, PB_SOLOPLAYER_HEAD& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_SOLOPLAYER_HEAD* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_SOLOPLAYER_HEAD* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_SOLOPLAYER_HEAD& from);
    void MergeFrom(const PB_SOLOPLAYER_HEAD& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_SOLOPLAYER_HEAD* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated int32 dwUserStatus = 4;
    int dwuserstatus_size() const;
    void clear_dwuserstatus();
    static const int kDwUserStatusFieldNumber = 4;
    ::google::protobuf::int32 dwuserstatus(int index) const;
    void set_dwuserstatus(int index, ::google::protobuf::int32 value);
    void add_dwuserstatus(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    dwuserstatus() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_dwuserstatus();

    // optional sint32 nRoomID = 1;
    bool has_nroomid() const;
    void clear_nroomid();
    static const int kNRoomIDFieldNumber = 1;
    ::google::protobuf::int32 nroomid() const;
    void set_nroomid(::google::protobuf::int32 value);

    // optional sint32 nTableNO = 2;
    bool has_ntableno() const;
    void clear_ntableno();
    static const int kNTableNOFieldNumber = 2;
    ::google::protobuf::int32 ntableno() const;
    void set_ntableno(::google::protobuf::int32 value);

    // optional sint32 nPlayerCount = 3;
    bool has_nplayercount() const;
    void clear_nplayercount();
    static const int kNPlayerCountFieldNumber = 3;
    ::google::protobuf::int32 nplayercount() const;
    void set_nplayercount(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:game.PB_SOLOPLAYER_HEAD)
private:
    void set_has_nroomid();
    void clear_has_nroomid();
    void set_has_ntableno();
    void clear_has_ntableno();
    void set_has_nplayercount();
    void clear_has_nplayercount();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dwuserstatus_;
    ::google::protobuf::int32 nroomid_;
    ::google::protobuf::int32 ntableno_;
    ::google::protobuf::int32 nplayercount_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_SOLOPLAYER_HEADImpl();
};
// -------------------------------------------------------------------

class PB_SOLO_PLAYER : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_SOLO_PLAYER) */
{
public:
    PB_SOLO_PLAYER();
    virtual ~PB_SOLO_PLAYER();

    PB_SOLO_PLAYER(const PB_SOLO_PLAYER& from);

    inline PB_SOLO_PLAYER& operator=(const PB_SOLO_PLAYER& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_SOLO_PLAYER(PB_SOLO_PLAYER&& from) noexcept
        : PB_SOLO_PLAYER()
    {
        *this = ::std::move(from);
    }

    inline PB_SOLO_PLAYER& operator=(PB_SOLO_PLAYER&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_SOLO_PLAYER& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_SOLO_PLAYER* internal_default_instance()
    {
        return reinterpret_cast<const PB_SOLO_PLAYER*>(
                &_PB_SOLO_PLAYER_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        9;

    void Swap(PB_SOLO_PLAYER* other);
    friend void swap(PB_SOLO_PLAYER& a, PB_SOLO_PLAYER& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_SOLO_PLAYER* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_SOLO_PLAYER* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_SOLO_PLAYER& from);
    void MergeFrom(const PB_SOLO_PLAYER& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_SOLO_PLAYER* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string szUsername = 20;
    bool has_szusername() const;
    void clear_szusername();
    static const int kSzUsernameFieldNumber = 20;
    const ::std::string& szusername() const;
    void set_szusername(const ::std::string& value);
#if LANG_CXX11
    void set_szusername(::std::string&& value);
#endif
    void set_szusername(const char* value);
    void set_szusername(const char* value, size_t size);
    ::std::string* mutable_szusername();
    ::std::string* release_szusername();
    void set_allocated_szusername(::std::string* szusername);

    // optional string szNickName = 21;
    bool has_sznickname() const;
    void clear_sznickname();
    static const int kSzNickNameFieldNumber = 21;
    const ::std::string& sznickname() const;
    void set_sznickname(const ::std::string& value);
#if LANG_CXX11
    void set_sznickname(::std::string&& value);
#endif
    void set_sznickname(const char* value);
    void set_sznickname(const char* value, size_t size);
    ::std::string* mutable_sznickname();
    ::std::string* release_sznickname();
    void set_allocated_sznickname(::std::string* sznickname);

    // optional sint32 nUserID = 1;
    bool has_nuserid() const;
    void clear_nuserid();
    static const int kNUserIDFieldNumber = 1;
    ::google::protobuf::int32 nuserid() const;
    void set_nuserid(::google::protobuf::int32 value);

    // optional sint32 nUserType = 2;
    bool has_nusertype() const;
    void clear_nusertype();
    static const int kNUserTypeFieldNumber = 2;
    ::google::protobuf::int32 nusertype() const;
    void set_nusertype(::google::protobuf::int32 value);

    // optional sint32 nStatus = 3;
    bool has_nstatus() const;
    void clear_nstatus();
    static const int kNStatusFieldNumber = 3;
    ::google::protobuf::int32 nstatus() const;
    void set_nstatus(::google::protobuf::int32 value);

    // optional sint32 nTableNO = 4;
    bool has_ntableno() const;
    void clear_ntableno();
    static const int kNTableNOFieldNumber = 4;
    ::google::protobuf::int32 ntableno() const;
    void set_ntableno(::google::protobuf::int32 value);

    // optional sint32 nChairNO = 5;
    bool has_nchairno() const;
    void clear_nchairno();
    static const int kNChairNOFieldNumber = 5;
    ::google::protobuf::int32 nchairno() const;
    void set_nchairno(::google::protobuf::int32 value);

    // optional sint32 nNickSex = 6;
    bool has_nnicksex() const;
    void clear_nnicksex();
    static const int kNNickSexFieldNumber = 6;
    ::google::protobuf::int32 nnicksex() const;
    void set_nnicksex(::google::protobuf::int32 value);

    // optional sint32 nPortrait = 7;
    bool has_nportrait() const;
    void clear_nportrait();
    static const int kNPortraitFieldNumber = 7;
    ::google::protobuf::int32 nportrait() const;
    void set_nportrait(::google::protobuf::int32 value);

    // optional sint32 nNetSpeed = 8;
    bool has_nnetspeed() const;
    void clear_nnetspeed();
    static const int kNNetSpeedFieldNumber = 8;
    ::google::protobuf::int32 nnetspeed() const;
    void set_nnetspeed(::google::protobuf::int32 value);

    // optional sint32 nClothingID = 9;
    bool has_nclothingid() const;
    void clear_nclothingid();
    static const int kNClothingIDFieldNumber = 9;
    ::google::protobuf::int32 nclothingid() const;
    void set_nclothingid(::google::protobuf::int32 value);

    // optional sint32 nDeposit = 10;
    bool has_ndeposit() const;
    void clear_ndeposit();
    static const int kNDepositFieldNumber = 10;
    ::google::protobuf::int32 ndeposit() const;
    void set_ndeposit(::google::protobuf::int32 value);

    // optional sint32 nPlayerLevel = 11;
    bool has_nplayerlevel() const;
    void clear_nplayerlevel();
    static const int kNPlayerLevelFieldNumber = 11;
    ::google::protobuf::int32 nplayerlevel() const;
    void set_nplayerlevel(::google::protobuf::int32 value);

    // optional sint32 nScore = 12;
    bool has_nscore() const;
    void clear_nscore();
    static const int kNScoreFieldNumber = 12;
    ::google::protobuf::int32 nscore() const;
    void set_nscore(::google::protobuf::int32 value);

    // optional sint32 nBreakOff = 13;
    bool has_nbreakoff() const;
    void clear_nbreakoff();
    static const int kNBreakOffFieldNumber = 13;
    ::google::protobuf::int32 nbreakoff() const;
    void set_nbreakoff(::google::protobuf::int32 value);

    // optional sint32 nWin = 14;
    bool has_nwin() const;
    void clear_nwin();
    static const int kNWinFieldNumber = 14;
    ::google::protobuf::int32 nwin() const;
    void set_nwin(::google::protobuf::int32 value);

    // optional sint32 nLoss = 15;
    bool has_nloss() const;
    void clear_nloss();
    static const int kNLossFieldNumber = 15;
    ::google::protobuf::int32 nloss() const;
    void set_nloss(::google::protobuf::int32 value);

    // optional sint32 nStandOff = 16;
    bool has_nstandoff() const;
    void clear_nstandoff();
    static const int kNStandOffFieldNumber = 16;
    ::google::protobuf::int32 nstandoff() const;
    void set_nstandoff(::google::protobuf::int32 value);

    // optional sint32 nBout = 17;
    bool has_nbout() const;
    void clear_nbout();
    static const int kNBoutFieldNumber = 17;
    ::google::protobuf::int32 nbout() const;
    void set_nbout(::google::protobuf::int32 value);

    // optional sint32 nTimeCost = 18;
    bool has_ntimecost() const;
    void clear_ntimecost();
    static const int kNTimeCostFieldNumber = 18;
    ::google::protobuf::int32 ntimecost() const;
    void set_ntimecost(::google::protobuf::int32 value);

    // optional sint32 bRefuse = 19;
    bool has_brefuse() const;
    void clear_brefuse();
    static const int kBRefuseFieldNumber = 19;
    ::google::protobuf::int32 brefuse() const;
    void set_brefuse(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:game.PB_SOLO_PLAYER)
private:
    void set_has_nuserid();
    void clear_has_nuserid();
    void set_has_nusertype();
    void clear_has_nusertype();
    void set_has_nstatus();
    void clear_has_nstatus();
    void set_has_ntableno();
    void clear_has_ntableno();
    void set_has_nchairno();
    void clear_has_nchairno();
    void set_has_nnicksex();
    void clear_has_nnicksex();
    void set_has_nportrait();
    void clear_has_nportrait();
    void set_has_nnetspeed();
    void clear_has_nnetspeed();
    void set_has_nclothingid();
    void clear_has_nclothingid();
    void set_has_ndeposit();
    void clear_has_ndeposit();
    void set_has_nplayerlevel();
    void clear_has_nplayerlevel();
    void set_has_nscore();
    void clear_has_nscore();
    void set_has_nbreakoff();
    void clear_has_nbreakoff();
    void set_has_nwin();
    void clear_has_nwin();
    void set_has_nloss();
    void clear_has_nloss();
    void set_has_nstandoff();
    void clear_has_nstandoff();
    void set_has_nbout();
    void clear_has_nbout();
    void set_has_ntimecost();
    void clear_has_ntimecost();
    void set_has_brefuse();
    void clear_has_brefuse();
    void set_has_szusername();
    void clear_has_szusername();
    void set_has_sznickname();
    void clear_has_sznickname();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr szusername_;
    ::google::protobuf::internal::ArenaStringPtr sznickname_;
    ::google::protobuf::int32 nuserid_;
    ::google::protobuf::int32 nusertype_;
    ::google::protobuf::int32 nstatus_;
    ::google::protobuf::int32 ntableno_;
    ::google::protobuf::int32 nchairno_;
    ::google::protobuf::int32 nnicksex_;
    ::google::protobuf::int32 nportrait_;
    ::google::protobuf::int32 nnetspeed_;
    ::google::protobuf::int32 nclothingid_;
    ::google::protobuf::int32 ndeposit_;
    ::google::protobuf::int32 nplayerlevel_;
    ::google::protobuf::int32 nscore_;
    ::google::protobuf::int32 nbreakoff_;
    ::google::protobuf::int32 nwin_;
    ::google::protobuf::int32 nloss_;
    ::google::protobuf::int32 nstandoff_;
    ::google::protobuf::int32 nbout_;
    ::google::protobuf::int32 ntimecost_;
    ::google::protobuf::int32 brefuse_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_SOLO_PLAYERImpl();
};
// -------------------------------------------------------------------

class PB_CARDSLAY : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_CARDSLAY) */
{
public:
    PB_CARDSLAY();
    virtual ~PB_CARDSLAY();

    PB_CARDSLAY(const PB_CARDSLAY& from);

    inline PB_CARDSLAY& operator=(const PB_CARDSLAY& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_CARDSLAY(PB_CARDSLAY&& from) noexcept
        : PB_CARDSLAY()
    {
        *this = ::std::move(from);
    }

    inline PB_CARDSLAY& operator=(PB_CARDSLAY&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_CARDSLAY& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_CARDSLAY* internal_default_instance()
    {
        return reinterpret_cast<const PB_CARDSLAY*>(
                &_PB_CARDSLAY_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        10;

    void Swap(PB_CARDSLAY* other);
    friend void swap(PB_CARDSLAY& a, PB_CARDSLAY& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_CARDSLAY* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_CARDSLAY* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_CARDSLAY& from);
    void MergeFrom(const PB_CARDSLAY& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_CARDSLAY* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated sint32 cardsLay = 1;
    int cardslay_size() const;
    void clear_cardslay();
    static const int kCardsLayFieldNumber = 1;
    ::google::protobuf::int32 cardslay(int index) const;
    void set_cardslay(int index, ::google::protobuf::int32 value);
    void add_cardslay(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    cardslay() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_cardslay();

    // @@protoc_insertion_point(class_scope:game.PB_CARDSLAY)
private:

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cardslay_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_CARDSLAYImpl();
};
// -------------------------------------------------------------------

class PB_CARD_TING_DETAIL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_CARD_TING_DETAIL) */
{
public:
    PB_CARD_TING_DETAIL();
    virtual ~PB_CARD_TING_DETAIL();

    PB_CARD_TING_DETAIL(const PB_CARD_TING_DETAIL& from);

    inline PB_CARD_TING_DETAIL& operator=(const PB_CARD_TING_DETAIL& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_CARD_TING_DETAIL(PB_CARD_TING_DETAIL&& from) noexcept
        : PB_CARD_TING_DETAIL()
    {
        *this = ::std::move(from);
    }

    inline PB_CARD_TING_DETAIL& operator=(PB_CARD_TING_DETAIL&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_CARD_TING_DETAIL& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_CARD_TING_DETAIL* internal_default_instance()
    {
        return reinterpret_cast<const PB_CARD_TING_DETAIL*>(
                &_PB_CARD_TING_DETAIL_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        11;

    void Swap(PB_CARD_TING_DETAIL* other);
    friend void swap(PB_CARD_TING_DETAIL& a, PB_CARD_TING_DETAIL& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_CARD_TING_DETAIL* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_CARD_TING_DETAIL* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_CARD_TING_DETAIL& from);
    void MergeFrom(const PB_CARD_TING_DETAIL& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_CARD_TING_DETAIL* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated sint32 nThrowCardsTing = 3;
    int nthrowcardsting_size() const;
    void clear_nthrowcardsting();
    static const int kNThrowCardsTingFieldNumber = 3;
    ::google::protobuf::int32 nthrowcardsting(int index) const;
    void set_nthrowcardsting(int index, ::google::protobuf::int32 value);
    void add_nthrowcardsting(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nthrowcardsting() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nthrowcardsting();

    // repeated .game.PB_CARDSLAY nThrowCardsTingLays = 4;
    int nthrowcardstinglays_size() const;
    void clear_nthrowcardstinglays();
    static const int kNThrowCardsTingLaysFieldNumber = 4;
    const ::game::PB_CARDSLAY& nthrowcardstinglays(int index) const;
    ::game::PB_CARDSLAY* mutable_nthrowcardstinglays(int index);
    ::game::PB_CARDSLAY* add_nthrowcardstinglays();
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDSLAY >*
    mutable_nthrowcardstinglays();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDSLAY >&
    nthrowcardstinglays() const;

    // repeated .game.PB_CARDSLAY nThrowCardsTingRemain = 5;
    int nthrowcardstingremain_size() const;
    void clear_nthrowcardstingremain();
    static const int kNThrowCardsTingRemainFieldNumber = 5;
    const ::game::PB_CARDSLAY& nthrowcardstingremain(int index) const;
    ::game::PB_CARDSLAY* mutable_nthrowcardstingremain(int index);
    ::game::PB_CARDSLAY* add_nthrowcardstingremain();
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDSLAY >*
    mutable_nthrowcardstingremain();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDSLAY >&
    nthrowcardstingremain() const;

    // optional int32 dwflags = 1;
    bool has_dwflags() const;
    void clear_dwflags();
    static const int kDwflagsFieldNumber = 1;
    ::google::protobuf::int32 dwflags() const;
    void set_dwflags(::google::protobuf::int32 value);

    // optional sint32 nChairNO = 2;
    bool has_nchairno() const;
    void clear_nchairno();
    static const int kNChairNOFieldNumber = 2;
    ::google::protobuf::int32 nchairno() const;
    void set_nchairno(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:game.PB_CARD_TING_DETAIL)
private:
    void set_has_dwflags();
    void clear_has_dwflags();
    void set_has_nchairno();
    void clear_has_nchairno();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nthrowcardsting_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDSLAY > nthrowcardstinglays_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_CARDSLAY > nthrowcardstingremain_;
    ::google::protobuf::int32 dwflags_;
    ::google::protobuf::int32 nchairno_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_CARD_TING_DETAILImpl();
};
// -------------------------------------------------------------------

class PB_GAME_RETREAT_TABLE_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_GAME_RETREAT_TABLE_INFO) */
{
public:
    PB_GAME_RETREAT_TABLE_INFO();
    virtual ~PB_GAME_RETREAT_TABLE_INFO();

    PB_GAME_RETREAT_TABLE_INFO(const PB_GAME_RETREAT_TABLE_INFO& from);

    inline PB_GAME_RETREAT_TABLE_INFO& operator=(const PB_GAME_RETREAT_TABLE_INFO& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_GAME_RETREAT_TABLE_INFO(PB_GAME_RETREAT_TABLE_INFO&& from) noexcept
        : PB_GAME_RETREAT_TABLE_INFO()
    {
        *this = ::std::move(from);
    }

    inline PB_GAME_RETREAT_TABLE_INFO& operator=(PB_GAME_RETREAT_TABLE_INFO&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_GAME_RETREAT_TABLE_INFO& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_GAME_RETREAT_TABLE_INFO* internal_default_instance()
    {
        return reinterpret_cast<const PB_GAME_RETREAT_TABLE_INFO*>(
                &_PB_GAME_RETREAT_TABLE_INFO_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        12;

    void Swap(PB_GAME_RETREAT_TABLE_INFO* other);
    friend void swap(PB_GAME_RETREAT_TABLE_INFO& a, PB_GAME_RETREAT_TABLE_INFO& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_GAME_RETREAT_TABLE_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_GAME_RETREAT_TABLE_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_GAME_RETREAT_TABLE_INFO& from);
    void MergeFrom(const PB_GAME_RETREAT_TABLE_INFO& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_GAME_RETREAT_TABLE_INFO* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .game.PB_SOLO_PLAYER solo_player = 2;
    int solo_player_size() const;
    void clear_solo_player();
    static const int kSoloPlayerFieldNumber = 2;
    const ::game::PB_SOLO_PLAYER& solo_player(int index) const;
    ::game::PB_SOLO_PLAYER* mutable_solo_player(int index);
    ::game::PB_SOLO_PLAYER* add_solo_player();
    ::google::protobuf::RepeatedPtrField< ::game::PB_SOLO_PLAYER >*
    mutable_solo_player();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_SOLO_PLAYER >&
    solo_player() const;

    // optional .game.PB_SOLOPLAYER_HEAD solo_player_head = 1;
    bool has_solo_player_head() const;
    void clear_solo_player_head();
    static const int kSoloPlayerHeadFieldNumber = 1;
    const ::game::PB_SOLOPLAYER_HEAD& solo_player_head() const;
    ::game::PB_SOLOPLAYER_HEAD* release_solo_player_head();
    ::game::PB_SOLOPLAYER_HEAD* mutable_solo_player_head();
    void set_allocated_solo_player_head(::game::PB_SOLOPLAYER_HEAD* solo_player_head);

    // optional .game.PB_GAME_TABLE_INFO tableinfo = 3;
    bool has_tableinfo() const;
    void clear_tableinfo();
    static const int kTableinfoFieldNumber = 3;
    const ::game::PB_GAME_TABLE_INFO& tableinfo() const;
    ::game::PB_GAME_TABLE_INFO* release_tableinfo();
    ::game::PB_GAME_TABLE_INFO* mutable_tableinfo();
    void set_allocated_tableinfo(::game::PB_GAME_TABLE_INFO* tableinfo);

    // @@protoc_insertion_point(class_scope:game.PB_GAME_RETREAT_TABLE_INFO)
private:
    void set_has_solo_player_head();
    void clear_has_solo_player_head();
    void set_has_tableinfo();
    void clear_has_tableinfo();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_SOLO_PLAYER > solo_player_;
    ::game::PB_SOLOPLAYER_HEAD* solo_player_head_;
    ::game::PB_GAME_TABLE_INFO* tableinfo_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_GAME_RETREAT_TABLE_INFOImpl();
};
// -------------------------------------------------------------------

class PB_NTF_SOMEONE_BUHUA : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.PB_NTF_SOMEONE_BUHUA) */
{
public:
    PB_NTF_SOMEONE_BUHUA();
    virtual ~PB_NTF_SOMEONE_BUHUA();

    PB_NTF_SOMEONE_BUHUA(const PB_NTF_SOMEONE_BUHUA& from);

    inline PB_NTF_SOMEONE_BUHUA& operator=(const PB_NTF_SOMEONE_BUHUA& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    PB_NTF_SOMEONE_BUHUA(PB_NTF_SOMEONE_BUHUA&& from) noexcept
        : PB_NTF_SOMEONE_BUHUA()
    {
        *this = ::std::move(from);
    }

    inline PB_NTF_SOMEONE_BUHUA& operator=(PB_NTF_SOMEONE_BUHUA&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const PB_NTF_SOMEONE_BUHUA& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const PB_NTF_SOMEONE_BUHUA* internal_default_instance()
    {
        return reinterpret_cast<const PB_NTF_SOMEONE_BUHUA*>(
                &_PB_NTF_SOMEONE_BUHUA_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        13;

    void Swap(PB_NTF_SOMEONE_BUHUA* other);
    friend void swap(PB_NTF_SOMEONE_BUHUA& a, PB_NTF_SOMEONE_BUHUA& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline PB_NTF_SOMEONE_BUHUA* New() const PROTOBUF_FINAL { return New(NULL); }

    PB_NTF_SOMEONE_BUHUA* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const PB_NTF_SOMEONE_BUHUA& from);
    void MergeFrom(const PB_NTF_SOMEONE_BUHUA& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(PB_NTF_SOMEONE_BUHUA* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .game.PB_INT_CHAIR nHuaCards = 1;
    int nhuacards_size() const;
    void clear_nhuacards();
    static const int kNHuaCardsFieldNumber = 1;
    const ::game::PB_INT_CHAIR& nhuacards(int index) const;
    ::game::PB_INT_CHAIR* mutable_nhuacards(int index);
    ::game::PB_INT_CHAIR* add_nhuacards();
    ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >*
    mutable_nhuacards();
    const ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >&
    nhuacards() const;

    // repeated sint32 nHuaCount = 2;
    int nhuacount_size() const;
    void clear_nhuacount();
    static const int kNHuaCountFieldNumber = 2;
    ::google::protobuf::int32 nhuacount(int index) const;
    void set_nhuacount(int index, ::google::protobuf::int32 value);
    void add_nhuacount(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nhuacount() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nhuacount();

    // @@protoc_insertion_point(class_scope:game.PB_NTF_SOMEONE_BUHUA)
private:

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR > nhuacards_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nhuacount_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsPB_NTF_SOMEONE_BUHUAImpl();
};
// -------------------------------------------------------------------

class QueryFlauntInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.QueryFlauntInfo) */
{
public:
    QueryFlauntInfo();
    virtual ~QueryFlauntInfo();

    QueryFlauntInfo(const QueryFlauntInfo& from);

    inline QueryFlauntInfo& operator=(const QueryFlauntInfo& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    QueryFlauntInfo(QueryFlauntInfo&& from) noexcept
        : QueryFlauntInfo()
    {
        *this = ::std::move(from);
    }

    inline QueryFlauntInfo& operator=(QueryFlauntInfo&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const QueryFlauntInfo& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const QueryFlauntInfo* internal_default_instance()
    {
        return reinterpret_cast<const QueryFlauntInfo*>(
                &_QueryFlauntInfo_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        14;

    void Swap(QueryFlauntInfo* other);
    friend void swap(QueryFlauntInfo& a, QueryFlauntInfo& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline QueryFlauntInfo* New() const PROTOBUF_FINAL { return New(NULL); }

    QueryFlauntInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const QueryFlauntInfo& from);
    void MergeFrom(const QueryFlauntInfo& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(QueryFlauntInfo* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated sint32 nReserved = 4;
    int nreserved_size() const;
    void clear_nreserved();
    static const int kNReservedFieldNumber = 4;
    ::google::protobuf::int32 nreserved(int index) const;
    void set_nreserved(int index, ::google::protobuf::int32 value);
    void add_nreserved(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nreserved() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nreserved();

    // optional sint32 nUserID = 1;
    bool has_nuserid() const;
    void clear_nuserid();
    static const int kNUserIDFieldNumber = 1;
    ::google::protobuf::int32 nuserid() const;
    void set_nuserid(::google::protobuf::int32 value);

    // optional sint32 nRepeatWinBout = 2;
    bool has_nrepeatwinbout() const;
    void clear_nrepeatwinbout();
    static const int kNRepeatWinBoutFieldNumber = 2;
    ::google::protobuf::int32 nrepeatwinbout() const;
    void set_nrepeatwinbout(::google::protobuf::int32 value);

    // optional sint32 nRepeatLoseBout = 3;
    bool has_nrepeatlosebout() const;
    void clear_nrepeatlosebout();
    static const int kNRepeatLoseBoutFieldNumber = 3;
    ::google::protobuf::int32 nrepeatlosebout() const;
    void set_nrepeatlosebout(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:game.QueryFlauntInfo)
private:
    void set_has_nuserid();
    void clear_has_nuserid();
    void set_has_nrepeatwinbout();
    void clear_has_nrepeatwinbout();
    void set_has_nrepeatlosebout();
    void clear_has_nrepeatlosebout();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nreserved_;
    ::google::protobuf::int32 nuserid_;
    ::google::protobuf::int32 nrepeatwinbout_;
    ::google::protobuf::int32 nrepeatlosebout_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsQueryFlauntInfoImpl();
};
// -------------------------------------------------------------------

class UpdateFlauntBout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.UpdateFlauntBout) */
{
public:
    UpdateFlauntBout();
    virtual ~UpdateFlauntBout();

    UpdateFlauntBout(const UpdateFlauntBout& from);

    inline UpdateFlauntBout& operator=(const UpdateFlauntBout& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    UpdateFlauntBout(UpdateFlauntBout&& from) noexcept
        : UpdateFlauntBout()
    {
        *this = ::std::move(from);
    }

    inline UpdateFlauntBout& operator=(UpdateFlauntBout&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
            {
                InternalSwap(&from);
            }
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const UpdateFlauntBout& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const UpdateFlauntBout* internal_default_instance()
    {
        return reinterpret_cast<const UpdateFlauntBout*>(
                &_UpdateFlauntBout_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
        15;

    void Swap(UpdateFlauntBout* other);
    friend void swap(UpdateFlauntBout& a, UpdateFlauntBout& b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline UpdateFlauntBout* New() const PROTOBUF_FINAL { return New(NULL); }

    UpdateFlauntBout* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const UpdateFlauntBout& from);
    void MergeFrom(const UpdateFlauntBout& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(UpdateFlauntBout* other);
private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void* MaybeArenaPtr() const
    {
        return NULL;
    }
public:

    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated sint32 nReserved = 3;
    int nreserved_size() const;
    void clear_nreserved();
    static const int kNReservedFieldNumber = 3;
    ::google::protobuf::int32 nreserved(int index) const;
    void set_nreserved(int index, ::google::protobuf::int32 value);
    void add_nreserved(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
    nreserved() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
    mutable_nreserved();

    // optional sint32 nUserID = 1;
    bool has_nuserid() const;
    void clear_nuserid();
    static const int kNUserIDFieldNumber = 1;
    ::google::protobuf::int32 nuserid() const;
    void set_nuserid(::google::protobuf::int32 value);

    // optional sint32 bWin = 2;
    bool has_bwin() const;
    void clear_bwin();
    static const int kBWinFieldNumber = 2;
    ::google::protobuf::int32 bwin() const;
    void set_bwin(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:game.UpdateFlauntBout)
private:
    void set_has_nuserid();
    void clear_has_nuserid();
    void set_has_bwin();
    void clear_has_bwin();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable int _cached_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nreserved_;
    ::google::protobuf::int32 nuserid_;
    ::google::protobuf::int32 bwin_;
    friend struct ::protobuf_game_2eproto::TableStruct;
    friend void ::protobuf_game_2eproto::InitDefaultsUpdateFlauntBoutImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PB_SENDER_INFO

// optional sint32 send_table = 1;
inline bool PB_SENDER_INFO::has_send_table() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_SENDER_INFO::set_has_send_table()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PB_SENDER_INFO::clear_has_send_table()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PB_SENDER_INFO::clear_send_table()
{
    send_table_ = 0;
    clear_has_send_table();
}
inline ::google::protobuf::int32 PB_SENDER_INFO::send_table() const
{
    // @@protoc_insertion_point(field_get:game.PB_SENDER_INFO.send_table)
    return send_table_;
}
inline void PB_SENDER_INFO::set_send_table(::google::protobuf::int32 value)
{
    set_has_send_table();
    send_table_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SENDER_INFO.send_table)
}

// optional sint32 send_chair = 2;
inline bool PB_SENDER_INFO::has_send_chair() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_SENDER_INFO::set_has_send_chair()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void PB_SENDER_INFO::clear_has_send_chair()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void PB_SENDER_INFO::clear_send_chair()
{
    send_chair_ = 0;
    clear_has_send_chair();
}
inline ::google::protobuf::int32 PB_SENDER_INFO::send_chair() const
{
    // @@protoc_insertion_point(field_get:game.PB_SENDER_INFO.send_chair)
    return send_chair_;
}
inline void PB_SENDER_INFO::set_send_chair(::google::protobuf::int32 value)
{
    set_has_send_chair();
    send_chair_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SENDER_INFO.send_chair)
}

// optional sint32 send_user = 3;
inline bool PB_SENDER_INFO::has_send_user() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_SENDER_INFO::set_has_send_user()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void PB_SENDER_INFO::clear_has_send_user()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void PB_SENDER_INFO::clear_send_user()
{
    send_user_ = 0;
    clear_has_send_user();
}
inline ::google::protobuf::int32 PB_SENDER_INFO::send_user() const
{
    // @@protoc_insertion_point(field_get:game.PB_SENDER_INFO.send_user)
    return send_user_;
}
inline void PB_SENDER_INFO::set_send_user(::google::protobuf::int32 value)
{
    set_has_send_user();
    send_user_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SENDER_INFO.send_user)
}

// optional string sz_hardid = 4;
inline bool PB_SENDER_INFO::has_sz_hardid() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_SENDER_INFO::set_has_sz_hardid()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PB_SENDER_INFO::clear_has_sz_hardid()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PB_SENDER_INFO::clear_sz_hardid()
{
    sz_hardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_sz_hardid();
}
inline const ::std::string& PB_SENDER_INFO::sz_hardid() const
{
    // @@protoc_insertion_point(field_get:game.PB_SENDER_INFO.sz_hardid)
    return sz_hardid_.GetNoArena();
}
inline void PB_SENDER_INFO::set_sz_hardid(const ::std::string& value)
{
    set_has_sz_hardid();
    sz_hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:game.PB_SENDER_INFO.sz_hardid)
}
#if LANG_CXX11
inline void PB_SENDER_INFO::set_sz_hardid(::std::string&& value)
{
    set_has_sz_hardid();
    sz_hardid_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:game.PB_SENDER_INFO.sz_hardid)
}
#endif
inline void PB_SENDER_INFO::set_sz_hardid(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_sz_hardid();
    sz_hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:game.PB_SENDER_INFO.sz_hardid)
}
inline void PB_SENDER_INFO::set_sz_hardid(const char* value, size_t size)
{
    set_has_sz_hardid();
    sz_hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:game.PB_SENDER_INFO.sz_hardid)
}
inline ::std::string* PB_SENDER_INFO::mutable_sz_hardid()
{
    set_has_sz_hardid();
    // @@protoc_insertion_point(field_mutable:game.PB_SENDER_INFO.sz_hardid)
    return sz_hardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PB_SENDER_INFO::release_sz_hardid()
{
    // @@protoc_insertion_point(field_release:game.PB_SENDER_INFO.sz_hardid)
    clear_has_sz_hardid();
    return sz_hardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PB_SENDER_INFO::set_allocated_sz_hardid(::std::string* sz_hardid)
{
    if (sz_hardid != NULL)
    {
        set_has_sz_hardid();
    }
    else
    {
        clear_has_sz_hardid();
    }
    sz_hardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sz_hardid);
    // @@protoc_insertion_point(field_set_allocated:game.PB_SENDER_INFO.sz_hardid)
}

// -------------------------------------------------------------------

// PB_TING_THROW_CARDS

// optional sint32 user_id = 1;
inline bool PB_TING_THROW_CARDS::has_user_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_TING_THROW_CARDS::set_has_user_id()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PB_TING_THROW_CARDS::clear_has_user_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PB_TING_THROW_CARDS::clear_user_id()
{
    user_id_ = 0;
    clear_has_user_id();
}
inline ::google::protobuf::int32 PB_TING_THROW_CARDS::user_id() const
{
    // @@protoc_insertion_point(field_get:game.PB_TING_THROW_CARDS.user_id)
    return user_id_;
}
inline void PB_TING_THROW_CARDS::set_user_id(::google::protobuf::int32 value)
{
    set_has_user_id();
    user_id_ = value;
    // @@protoc_insertion_point(field_set:game.PB_TING_THROW_CARDS.user_id)
}

// optional sint32 room_id = 2;
inline bool PB_TING_THROW_CARDS::has_room_id() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_TING_THROW_CARDS::set_has_room_id()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void PB_TING_THROW_CARDS::clear_has_room_id()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void PB_TING_THROW_CARDS::clear_room_id()
{
    room_id_ = 0;
    clear_has_room_id();
}
inline ::google::protobuf::int32 PB_TING_THROW_CARDS::room_id() const
{
    // @@protoc_insertion_point(field_get:game.PB_TING_THROW_CARDS.room_id)
    return room_id_;
}
inline void PB_TING_THROW_CARDS::set_room_id(::google::protobuf::int32 value)
{
    set_has_room_id();
    room_id_ = value;
    // @@protoc_insertion_point(field_set:game.PB_TING_THROW_CARDS.room_id)
}

// optional sint32 table_no = 3;
inline bool PB_TING_THROW_CARDS::has_table_no() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_TING_THROW_CARDS::set_has_table_no()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void PB_TING_THROW_CARDS::clear_has_table_no()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void PB_TING_THROW_CARDS::clear_table_no()
{
    table_no_ = 0;
    clear_has_table_no();
}
inline ::google::protobuf::int32 PB_TING_THROW_CARDS::table_no() const
{
    // @@protoc_insertion_point(field_get:game.PB_TING_THROW_CARDS.table_no)
    return table_no_;
}
inline void PB_TING_THROW_CARDS::set_table_no(::google::protobuf::int32 value)
{
    set_has_table_no();
    table_no_ = value;
    // @@protoc_insertion_point(field_set:game.PB_TING_THROW_CARDS.table_no)
}

// optional sint32 chair_no = 4;
inline bool PB_TING_THROW_CARDS::has_chair_no() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_TING_THROW_CARDS::set_has_chair_no()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void PB_TING_THROW_CARDS::clear_has_chair_no()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void PB_TING_THROW_CARDS::clear_chair_no()
{
    chair_no_ = 0;
    clear_has_chair_no();
}
inline ::google::protobuf::int32 PB_TING_THROW_CARDS::chair_no() const
{
    // @@protoc_insertion_point(field_get:game.PB_TING_THROW_CARDS.chair_no)
    return chair_no_;
}
inline void PB_TING_THROW_CARDS::set_chair_no(::google::protobuf::int32 value)
{
    set_has_chair_no();
    chair_no_ = value;
    // @@protoc_insertion_point(field_set:game.PB_TING_THROW_CARDS.chair_no)
}

// optional sint32 passive = 5;
inline bool PB_TING_THROW_CARDS::has_passive() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_TING_THROW_CARDS::set_has_passive()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void PB_TING_THROW_CARDS::clear_has_passive()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void PB_TING_THROW_CARDS::clear_passive()
{
    passive_ = 0;
    clear_has_passive();
}
inline ::google::protobuf::int32 PB_TING_THROW_CARDS::passive() const
{
    // @@protoc_insertion_point(field_get:game.PB_TING_THROW_CARDS.passive)
    return passive_;
}
inline void PB_TING_THROW_CARDS::set_passive(::google::protobuf::int32 value)
{
    set_has_passive();
    passive_ = value;
    // @@protoc_insertion_point(field_set:game.PB_TING_THROW_CARDS.passive)
}

// optional int32 cards_type = 6;
inline bool PB_TING_THROW_CARDS::has_cards_type() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_TING_THROW_CARDS::set_has_cards_type()
{
    _has_bits_[0] |= 0x00000040u;
}
inline void PB_TING_THROW_CARDS::clear_has_cards_type()
{
    _has_bits_[0] &= ~0x00000040u;
}
inline void PB_TING_THROW_CARDS::clear_cards_type()
{
    cards_type_ = 0;
    clear_has_cards_type();
}
inline ::google::protobuf::int32 PB_TING_THROW_CARDS::cards_type() const
{
    // @@protoc_insertion_point(field_get:game.PB_TING_THROW_CARDS.cards_type)
    return cards_type_;
}
inline void PB_TING_THROW_CARDS::set_cards_type(::google::protobuf::int32 value)
{
    set_has_cards_type();
    cards_type_ = value;
    // @@protoc_insertion_point(field_set:game.PB_TING_THROW_CARDS.cards_type)
}

// optional sint32 cards_cout = 7;
inline bool PB_TING_THROW_CARDS::has_cards_cout() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_TING_THROW_CARDS::set_has_cards_cout()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void PB_TING_THROW_CARDS::clear_has_cards_cout()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void PB_TING_THROW_CARDS::clear_cards_cout()
{
    cards_cout_ = 0;
    clear_has_cards_cout();
}
inline ::google::protobuf::int32 PB_TING_THROW_CARDS::cards_cout() const
{
    // @@protoc_insertion_point(field_get:game.PB_TING_THROW_CARDS.cards_cout)
    return cards_cout_;
}
inline void PB_TING_THROW_CARDS::set_cards_cout(::google::protobuf::int32 value)
{
    set_has_cards_cout();
    cards_cout_ = value;
    // @@protoc_insertion_point(field_set:game.PB_TING_THROW_CARDS.cards_cout)
}

// repeated sint32 card_ids = 8;
inline int PB_TING_THROW_CARDS::card_ids_size() const
{
    return card_ids_.size();
}
inline void PB_TING_THROW_CARDS::clear_card_ids()
{
    card_ids_.Clear();
}
inline ::google::protobuf::int32 PB_TING_THROW_CARDS::card_ids(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_TING_THROW_CARDS.card_ids)
    return card_ids_.Get(index);
}
inline void PB_TING_THROW_CARDS::set_card_ids(int index, ::google::protobuf::int32 value)
{
    card_ids_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_TING_THROW_CARDS.card_ids)
}
inline void PB_TING_THROW_CARDS::add_card_ids(::google::protobuf::int32 value)
{
    card_ids_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_TING_THROW_CARDS.card_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_TING_THROW_CARDS::card_ids() const
{
    // @@protoc_insertion_point(field_list:game.PB_TING_THROW_CARDS.card_ids)
    return card_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_TING_THROW_CARDS::mutable_card_ids()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_TING_THROW_CARDS.card_ids)
    return &card_ids_;
}

// optional .game.PB_SENDER_INFO sender_info = 9;
inline bool PB_TING_THROW_CARDS::has_sender_info() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_TING_THROW_CARDS::set_has_sender_info()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PB_TING_THROW_CARDS::clear_has_sender_info()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PB_TING_THROW_CARDS::clear_sender_info()
{
    if (sender_info_ != NULL)
    {
        sender_info_->Clear();
    }
    clear_has_sender_info();
}
inline const ::game::PB_SENDER_INFO& PB_TING_THROW_CARDS::sender_info() const
{
    const ::game::PB_SENDER_INFO* p = sender_info_;
    // @@protoc_insertion_point(field_get:game.PB_TING_THROW_CARDS.sender_info)
    return p != NULL ? *p : *reinterpret_cast<const ::game::PB_SENDER_INFO*>(
            &::game::_PB_SENDER_INFO_default_instance_);
}
inline ::game::PB_SENDER_INFO* PB_TING_THROW_CARDS::release_sender_info()
{
    // @@protoc_insertion_point(field_release:game.PB_TING_THROW_CARDS.sender_info)
    clear_has_sender_info();
    ::game::PB_SENDER_INFO* temp = sender_info_;
    sender_info_ = NULL;
    return temp;
}
inline ::game::PB_SENDER_INFO* PB_TING_THROW_CARDS::mutable_sender_info()
{
    set_has_sender_info();
    if (sender_info_ == NULL)
    {
        sender_info_ = new ::game::PB_SENDER_INFO;
    }
    // @@protoc_insertion_point(field_mutable:game.PB_TING_THROW_CARDS.sender_info)
    return sender_info_;
}
inline void PB_TING_THROW_CARDS::set_allocated_sender_info(::game::PB_SENDER_INFO* sender_info)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete sender_info_;
    }
    if (sender_info)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            sender_info = ::google::protobuf::internal::GetOwnedMessage(
                    message_arena, sender_info, submessage_arena);
        }
        set_has_sender_info();
    }
    else
    {
        clear_has_sender_info();
    }
    sender_info_ = sender_info;
    // @@protoc_insertion_point(field_set_allocated:game.PB_TING_THROW_CARDS.sender_info)
}

// -------------------------------------------------------------------

// PB_MJ_START_DATA

// optional sint32 nBoutCount = 1;
inline bool PB_MJ_START_DATA::has_nboutcount() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nboutcount()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PB_MJ_START_DATA::clear_has_nboutcount()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PB_MJ_START_DATA::clear_nboutcount()
{
    nboutcount_ = 0;
    clear_has_nboutcount();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nboutcount() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nBoutCount)
    return nboutcount_;
}
inline void PB_MJ_START_DATA::set_nboutcount(::google::protobuf::int32 value)
{
    set_has_nboutcount();
    nboutcount_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nBoutCount)
}

// optional sint32 nBaseDeposit = 2;
inline bool PB_MJ_START_DATA::has_nbasedeposit() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nbasedeposit()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void PB_MJ_START_DATA::clear_has_nbasedeposit()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void PB_MJ_START_DATA::clear_nbasedeposit()
{
    nbasedeposit_ = 0;
    clear_has_nbasedeposit();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nbasedeposit() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nBaseDeposit)
    return nbasedeposit_;
}
inline void PB_MJ_START_DATA::set_nbasedeposit(::google::protobuf::int32 value)
{
    set_has_nbasedeposit();
    nbasedeposit_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nBaseDeposit)
}

// optional sint32 nBaseScore = 3;
inline bool PB_MJ_START_DATA::has_nbasescore() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nbasescore()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void PB_MJ_START_DATA::clear_has_nbasescore()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void PB_MJ_START_DATA::clear_nbasescore()
{
    nbasescore_ = 0;
    clear_has_nbasescore();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nbasescore() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nBaseScore)
    return nbasescore_;
}
inline void PB_MJ_START_DATA::set_nbasescore(::google::protobuf::int32 value)
{
    set_has_nbasescore();
    nbasescore_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nBaseScore)
}

// optional sint32 nBanker = 4;
inline bool PB_MJ_START_DATA::has_nbanker() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nbanker()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void PB_MJ_START_DATA::clear_has_nbanker()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void PB_MJ_START_DATA::clear_nbanker()
{
    nbanker_ = 0;
    clear_has_nbanker();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nbanker() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nBanker)
    return nbanker_;
}
inline void PB_MJ_START_DATA::set_nbanker(::google::protobuf::int32 value)
{
    set_has_nbanker();
    nbanker_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nBanker)
}

// optional sint32 nBankerHold = 5;
inline bool PB_MJ_START_DATA::has_nbankerhold() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nbankerhold()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void PB_MJ_START_DATA::clear_has_nbankerhold()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void PB_MJ_START_DATA::clear_nbankerhold()
{
    nbankerhold_ = 0;
    clear_has_nbankerhold();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nbankerhold() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nBankerHold)
    return nbankerhold_;
}
inline void PB_MJ_START_DATA::set_nbankerhold(::google::protobuf::int32 value)
{
    set_has_nbankerhold();
    nbankerhold_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nBankerHold)
}

// optional sint32 nCurrentChair = 6;
inline bool PB_MJ_START_DATA::has_ncurrentchair() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_MJ_START_DATA::set_has_ncurrentchair()
{
    _has_bits_[0] |= 0x00000040u;
}
inline void PB_MJ_START_DATA::clear_has_ncurrentchair()
{
    _has_bits_[0] &= ~0x00000040u;
}
inline void PB_MJ_START_DATA::clear_ncurrentchair()
{
    ncurrentchair_ = 0;
    clear_has_ncurrentchair();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::ncurrentchair() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nCurrentChair)
    return ncurrentchair_;
}
inline void PB_MJ_START_DATA::set_ncurrentchair(::google::protobuf::int32 value)
{
    set_has_ncurrentchair();
    ncurrentchair_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nCurrentChair)
}

// optional int32 dwStatus = 7;
inline bool PB_MJ_START_DATA::has_dwstatus() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_MJ_START_DATA::set_has_dwstatus()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void PB_MJ_START_DATA::clear_has_dwstatus()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void PB_MJ_START_DATA::clear_dwstatus()
{
    dwstatus_ = 0;
    clear_has_dwstatus();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::dwstatus() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.dwStatus)
    return dwstatus_;
}
inline void PB_MJ_START_DATA::set_dwstatus(::google::protobuf::int32 value)
{
    set_has_dwstatus();
    dwstatus_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.dwStatus)
}

// optional int32 dwCurrentFlags = 8;
inline bool PB_MJ_START_DATA::has_dwcurrentflags() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_MJ_START_DATA::set_has_dwcurrentflags()
{
    _has_bits_[0] |= 0x00000100u;
}
inline void PB_MJ_START_DATA::clear_has_dwcurrentflags()
{
    _has_bits_[0] &= ~0x00000100u;
}
inline void PB_MJ_START_DATA::clear_dwcurrentflags()
{
    dwcurrentflags_ = 0;
    clear_has_dwcurrentflags();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::dwcurrentflags() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.dwCurrentFlags)
    return dwcurrentflags_;
}
inline void PB_MJ_START_DATA::set_dwcurrentflags(::google::protobuf::int32 value)
{
    set_has_dwcurrentflags();
    dwcurrentflags_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.dwCurrentFlags)
}

// optional sint32 nFirstCatch = 9;
inline bool PB_MJ_START_DATA::has_nfirstcatch() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nfirstcatch()
{
    _has_bits_[0] |= 0x00000200u;
}
inline void PB_MJ_START_DATA::clear_has_nfirstcatch()
{
    _has_bits_[0] &= ~0x00000200u;
}
inline void PB_MJ_START_DATA::clear_nfirstcatch()
{
    nfirstcatch_ = 0;
    clear_has_nfirstcatch();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nfirstcatch() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nFirstCatch)
    return nfirstcatch_;
}
inline void PB_MJ_START_DATA::set_nfirstcatch(::google::protobuf::int32 value)
{
    set_has_nfirstcatch();
    nfirstcatch_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nFirstCatch)
}

// optional sint32 nFirstThrow = 10;
inline bool PB_MJ_START_DATA::has_nfirstthrow() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nfirstthrow()
{
    _has_bits_[0] |= 0x00000400u;
}
inline void PB_MJ_START_DATA::clear_has_nfirstthrow()
{
    _has_bits_[0] &= ~0x00000400u;
}
inline void PB_MJ_START_DATA::clear_nfirstthrow()
{
    nfirstthrow_ = 0;
    clear_has_nfirstthrow();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nfirstthrow() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nFirstThrow)
    return nfirstthrow_;
}
inline void PB_MJ_START_DATA::set_nfirstthrow(::google::protobuf::int32 value)
{
    set_has_nfirstthrow();
    nfirstthrow_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nFirstThrow)
}

// optional sint32 nThrowWait = 11;
inline bool PB_MJ_START_DATA::has_nthrowwait() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nthrowwait()
{
    _has_bits_[0] |= 0x00000800u;
}
inline void PB_MJ_START_DATA::clear_has_nthrowwait()
{
    _has_bits_[0] &= ~0x00000800u;
}
inline void PB_MJ_START_DATA::clear_nthrowwait()
{
    nthrowwait_ = 0;
    clear_has_nthrowwait();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nthrowwait() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nThrowWait)
    return nthrowwait_;
}
inline void PB_MJ_START_DATA::set_nthrowwait(::google::protobuf::int32 value)
{
    set_has_nthrowwait();
    nthrowwait_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nThrowWait)
}

// optional sint32 nMaxAutoThrow = 12;
inline bool PB_MJ_START_DATA::has_nmaxautothrow() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nmaxautothrow()
{
    _has_bits_[0] |= 0x00001000u;
}
inline void PB_MJ_START_DATA::clear_has_nmaxautothrow()
{
    _has_bits_[0] &= ~0x00001000u;
}
inline void PB_MJ_START_DATA::clear_nmaxautothrow()
{
    nmaxautothrow_ = 0;
    clear_has_nmaxautothrow();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nmaxautothrow() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nMaxAutoThrow)
    return nmaxautothrow_;
}
inline void PB_MJ_START_DATA::set_nmaxautothrow(::google::protobuf::int32 value)
{
    set_has_nmaxautothrow();
    nmaxautothrow_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nMaxAutoThrow)
}

// optional sint32 nEntrustWait = 13;
inline bool PB_MJ_START_DATA::has_nentrustwait() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nentrustwait()
{
    _has_bits_[0] |= 0x00002000u;
}
inline void PB_MJ_START_DATA::clear_has_nentrustwait()
{
    _has_bits_[0] &= ~0x00002000u;
}
inline void PB_MJ_START_DATA::clear_nentrustwait()
{
    nentrustwait_ = 0;
    clear_has_nentrustwait();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nentrustwait() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nEntrustWait)
    return nentrustwait_;
}
inline void PB_MJ_START_DATA::set_nentrustwait(::google::protobuf::int32 value)
{
    set_has_nentrustwait();
    nentrustwait_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nEntrustWait)
}

// optional sint32 bNeedDeposit = 14;
inline bool PB_MJ_START_DATA::has_bneeddeposit() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_bneeddeposit()
{
    _has_bits_[0] |= 0x00004000u;
}
inline void PB_MJ_START_DATA::clear_has_bneeddeposit()
{
    _has_bits_[0] &= ~0x00004000u;
}
inline void PB_MJ_START_DATA::clear_bneeddeposit()
{
    bneeddeposit_ = 0;
    clear_has_bneeddeposit();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::bneeddeposit() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.bNeedDeposit)
    return bneeddeposit_;
}
inline void PB_MJ_START_DATA::set_bneeddeposit(::google::protobuf::int32 value)
{
    set_has_bneeddeposit();
    bneeddeposit_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.bNeedDeposit)
}

// optional sint32 bForbidDesert = 15;
inline bool PB_MJ_START_DATA::has_bforbiddesert() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_bforbiddesert()
{
    _has_bits_[0] |= 0x00008000u;
}
inline void PB_MJ_START_DATA::clear_has_bforbiddesert()
{
    _has_bits_[0] &= ~0x00008000u;
}
inline void PB_MJ_START_DATA::clear_bforbiddesert()
{
    bforbiddesert_ = 0;
    clear_has_bforbiddesert();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::bforbiddesert() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.bForbidDesert)
    return bforbiddesert_;
}
inline void PB_MJ_START_DATA::set_bforbiddesert(::google::protobuf::int32 value)
{
    set_has_bforbiddesert();
    bforbiddesert_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.bForbidDesert)
}

// optional sint32 bQuickCatch = 16;
inline bool PB_MJ_START_DATA::has_bquickcatch() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_bquickcatch()
{
    _has_bits_[0] |= 0x00010000u;
}
inline void PB_MJ_START_DATA::clear_has_bquickcatch()
{
    _has_bits_[0] &= ~0x00010000u;
}
inline void PB_MJ_START_DATA::clear_bquickcatch()
{
    bquickcatch_ = 0;
    clear_has_bquickcatch();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::bquickcatch() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.bQuickCatch)
    return bquickcatch_;
}
inline void PB_MJ_START_DATA::set_bquickcatch(::google::protobuf::int32 value)
{
    set_has_bquickcatch();
    bquickcatch_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.bQuickCatch)
}

// optional sint32 bAllowChi = 17;
inline bool PB_MJ_START_DATA::has_ballowchi() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_ballowchi()
{
    _has_bits_[0] |= 0x00020000u;
}
inline void PB_MJ_START_DATA::clear_has_ballowchi()
{
    _has_bits_[0] &= ~0x00020000u;
}
inline void PB_MJ_START_DATA::clear_ballowchi()
{
    ballowchi_ = 0;
    clear_has_ballowchi();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::ballowchi() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.bAllowChi)
    return ballowchi_;
}
inline void PB_MJ_START_DATA::set_ballowchi(::google::protobuf::int32 value)
{
    set_has_ballowchi();
    ballowchi_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.bAllowChi)
}

// optional sint32 bAnGangShow = 18;
inline bool PB_MJ_START_DATA::has_bangangshow() const
{
    return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_bangangshow()
{
    _has_bits_[0] |= 0x00040000u;
}
inline void PB_MJ_START_DATA::clear_has_bangangshow()
{
    _has_bits_[0] &= ~0x00040000u;
}
inline void PB_MJ_START_DATA::clear_bangangshow()
{
    bangangshow_ = 0;
    clear_has_bangangshow();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::bangangshow() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.bAnGangShow)
    return bangangshow_;
}
inline void PB_MJ_START_DATA::set_bangangshow(::google::protobuf::int32 value)
{
    set_has_bangangshow();
    bangangshow_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.bAnGangShow)
}

// optional sint32 bJokerSortIn = 19;
inline bool PB_MJ_START_DATA::has_bjokersortin() const
{
    return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_bjokersortin()
{
    _has_bits_[0] |= 0x00080000u;
}
inline void PB_MJ_START_DATA::clear_has_bjokersortin()
{
    _has_bits_[0] &= ~0x00080000u;
}
inline void PB_MJ_START_DATA::clear_bjokersortin()
{
    bjokersortin_ = 0;
    clear_has_bjokersortin();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::bjokersortin() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.bJokerSortIn)
    return bjokersortin_;
}
inline void PB_MJ_START_DATA::set_bjokersortin(::google::protobuf::int32 value)
{
    set_has_bjokersortin();
    bjokersortin_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.bJokerSortIn)
}

// optional sint32 bBaibanNoSort = 20;
inline bool PB_MJ_START_DATA::has_bbaibannosort() const
{
    return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_bbaibannosort()
{
    _has_bits_[0] |= 0x00100000u;
}
inline void PB_MJ_START_DATA::clear_has_bbaibannosort()
{
    _has_bits_[0] &= ~0x00100000u;
}
inline void PB_MJ_START_DATA::clear_bbaibannosort()
{
    bbaibannosort_ = 0;
    clear_has_bbaibannosort();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::bbaibannosort() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.bBaibanNoSort)
    return bbaibannosort_;
}
inline void PB_MJ_START_DATA::set_bbaibannosort(::google::protobuf::int32 value)
{
    set_has_bbaibannosort();
    bbaibannosort_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.bBaibanNoSort)
}

// optional sint32 nBeginNO = 21;
inline bool PB_MJ_START_DATA::has_nbeginno() const
{
    return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nbeginno()
{
    _has_bits_[0] |= 0x00200000u;
}
inline void PB_MJ_START_DATA::clear_has_nbeginno()
{
    _has_bits_[0] &= ~0x00200000u;
}
inline void PB_MJ_START_DATA::clear_nbeginno()
{
    nbeginno_ = 0;
    clear_has_nbeginno();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nbeginno() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nBeginNO)
    return nbeginno_;
}
inline void PB_MJ_START_DATA::set_nbeginno(::google::protobuf::int32 value)
{
    set_has_nbeginno();
    nbeginno_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nBeginNO)
}

// optional sint32 nJokerNO = 22;
inline bool PB_MJ_START_DATA::has_njokerno() const
{
    return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_njokerno()
{
    _has_bits_[0] |= 0x00400000u;
}
inline void PB_MJ_START_DATA::clear_has_njokerno()
{
    _has_bits_[0] &= ~0x00400000u;
}
inline void PB_MJ_START_DATA::clear_njokerno()
{
    njokerno_ = 0;
    clear_has_njokerno();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::njokerno() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nJokerNO)
    return njokerno_;
}
inline void PB_MJ_START_DATA::set_njokerno(::google::protobuf::int32 value)
{
    set_has_njokerno();
    njokerno_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nJokerNO)
}

// optional sint32 nJokerID = 23;
inline bool PB_MJ_START_DATA::has_njokerid() const
{
    return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_njokerid()
{
    _has_bits_[0] |= 0x00800000u;
}
inline void PB_MJ_START_DATA::clear_has_njokerid()
{
    _has_bits_[0] &= ~0x00800000u;
}
inline void PB_MJ_START_DATA::clear_njokerid()
{
    njokerid_ = 0;
    clear_has_njokerid();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::njokerid() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nJokerID)
    return njokerid_;
}
inline void PB_MJ_START_DATA::set_njokerid(::google::protobuf::int32 value)
{
    set_has_njokerid();
    njokerid_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nJokerID)
}

// optional sint32 nJokerID2 = 24;
inline bool PB_MJ_START_DATA::has_njokerid2() const
{
    return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_njokerid2()
{
    _has_bits_[0] |= 0x01000000u;
}
inline void PB_MJ_START_DATA::clear_has_njokerid2()
{
    _has_bits_[0] &= ~0x01000000u;
}
inline void PB_MJ_START_DATA::clear_njokerid2()
{
    njokerid2_ = 0;
    clear_has_njokerid2();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::njokerid2() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nJokerID2)
    return njokerid2_;
}
inline void PB_MJ_START_DATA::set_njokerid2(::google::protobuf::int32 value)
{
    set_has_njokerid2();
    njokerid2_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nJokerID2)
}

// optional sint32 nFanID = 25;
inline bool PB_MJ_START_DATA::has_nfanid() const
{
    return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nfanid()
{
    _has_bits_[0] |= 0x02000000u;
}
inline void PB_MJ_START_DATA::clear_has_nfanid()
{
    _has_bits_[0] &= ~0x02000000u;
}
inline void PB_MJ_START_DATA::clear_nfanid()
{
    nfanid_ = 0;
    clear_has_nfanid();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nfanid() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nFanID)
    return nfanid_;
}
inline void PB_MJ_START_DATA::set_nfanid(::google::protobuf::int32 value)
{
    set_has_nfanid();
    nfanid_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nFanID)
}

// optional sint32 nTailTaken = 26;
inline bool PB_MJ_START_DATA::has_ntailtaken() const
{
    return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_ntailtaken()
{
    _has_bits_[0] |= 0x04000000u;
}
inline void PB_MJ_START_DATA::clear_has_ntailtaken()
{
    _has_bits_[0] &= ~0x04000000u;
}
inline void PB_MJ_START_DATA::clear_ntailtaken()
{
    ntailtaken_ = 0;
    clear_has_ntailtaken();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::ntailtaken() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nTailTaken)
    return ntailtaken_;
}
inline void PB_MJ_START_DATA::set_ntailtaken(::google::protobuf::int32 value)
{
    set_has_ntailtaken();
    ntailtaken_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nTailTaken)
}

// optional sint32 nCurrentCatch = 27;
inline bool PB_MJ_START_DATA::has_ncurrentcatch() const
{
    return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_ncurrentcatch()
{
    _has_bits_[0] |= 0x08000000u;
}
inline void PB_MJ_START_DATA::clear_has_ncurrentcatch()
{
    _has_bits_[0] &= ~0x08000000u;
}
inline void PB_MJ_START_DATA::clear_ncurrentcatch()
{
    ncurrentcatch_ = 0;
    clear_has_ncurrentcatch();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::ncurrentcatch() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nCurrentCatch)
    return ncurrentcatch_;
}
inline void PB_MJ_START_DATA::set_ncurrentcatch(::google::protobuf::int32 value)
{
    set_has_ncurrentcatch();
    ncurrentcatch_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nCurrentCatch)
}

// optional sint32 nPGCHWait = 28;
inline bool PB_MJ_START_DATA::has_npgchwait() const
{
    return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_npgchwait()
{
    _has_bits_[0] |= 0x10000000u;
}
inline void PB_MJ_START_DATA::clear_has_npgchwait()
{
    _has_bits_[0] &= ~0x10000000u;
}
inline void PB_MJ_START_DATA::clear_npgchwait()
{
    npgchwait_ = 0;
    clear_has_npgchwait();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::npgchwait() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nPGCHWait)
    return npgchwait_;
}
inline void PB_MJ_START_DATA::set_npgchwait(::google::protobuf::int32 value)
{
    set_has_npgchwait();
    npgchwait_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nPGCHWait)
}

// optional sint32 nPGCHWaitEx = 29;
inline bool PB_MJ_START_DATA::has_npgchwaitex() const
{
    return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_npgchwaitex()
{
    _has_bits_[0] |= 0x20000000u;
}
inline void PB_MJ_START_DATA::clear_has_npgchwaitex()
{
    _has_bits_[0] &= ~0x20000000u;
}
inline void PB_MJ_START_DATA::clear_npgchwaitex()
{
    npgchwaitex_ = 0;
    clear_has_npgchwaitex();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::npgchwaitex() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nPGCHWaitEx)
    return npgchwaitex_;
}
inline void PB_MJ_START_DATA::set_npgchwaitex(::google::protobuf::int32 value)
{
    set_has_npgchwaitex();
    npgchwaitex_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nPGCHWaitEx)
}

// optional string szSerialNO = 30;
inline bool PB_MJ_START_DATA::has_szserialno() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_MJ_START_DATA::set_has_szserialno()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PB_MJ_START_DATA::clear_has_szserialno()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PB_MJ_START_DATA::clear_szserialno()
{
    szserialno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_szserialno();
}
inline const ::std::string& PB_MJ_START_DATA::szserialno() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.szSerialNO)
    return szserialno_.GetNoArena();
}
inline void PB_MJ_START_DATA::set_szserialno(const ::std::string& value)
{
    set_has_szserialno();
    szserialno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.szSerialNO)
}
#if LANG_CXX11
inline void PB_MJ_START_DATA::set_szserialno(::std::string&& value)
{
    set_has_szserialno();
    szserialno_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:game.PB_MJ_START_DATA.szSerialNO)
}
#endif
inline void PB_MJ_START_DATA::set_szserialno(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_szserialno();
    szserialno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:game.PB_MJ_START_DATA.szSerialNO)
}
inline void PB_MJ_START_DATA::set_szserialno(const char* value, size_t size)
{
    set_has_szserialno();
    szserialno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:game.PB_MJ_START_DATA.szSerialNO)
}
inline ::std::string* PB_MJ_START_DATA::mutable_szserialno()
{
    set_has_szserialno();
    // @@protoc_insertion_point(field_mutable:game.PB_MJ_START_DATA.szSerialNO)
    return szserialno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PB_MJ_START_DATA::release_szserialno()
{
    // @@protoc_insertion_point(field_release:game.PB_MJ_START_DATA.szSerialNO)
    clear_has_szserialno();
    return szserialno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PB_MJ_START_DATA::set_allocated_szserialno(::std::string* szserialno)
{
    if (szserialno != NULL)
    {
        set_has_szserialno();
    }
    else
    {
        clear_has_szserialno();
    }
    szserialno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szserialno);
    // @@protoc_insertion_point(field_set_allocated:game.PB_MJ_START_DATA.szSerialNO)
}

// repeated sint32 nDices = 31;
inline int PB_MJ_START_DATA::ndices_size() const
{
    return ndices_.size();
}
inline void PB_MJ_START_DATA::clear_ndices()
{
    ndices_.Clear();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::ndices(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nDices)
    return ndices_.Get(index);
}
inline void PB_MJ_START_DATA::set_ndices(int index, ::google::protobuf::int32 value)
{
    ndices_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nDices)
}
inline void PB_MJ_START_DATA::add_ndices(::google::protobuf::int32 value)
{
    ndices_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_MJ_START_DATA.nDices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_MJ_START_DATA::ndices() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_START_DATA.nDices)
    return ndices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_MJ_START_DATA::mutable_ndices()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_START_DATA.nDices)
    return &ndices_;
}

// optional sint32 nYqwAutoPlayWait = 32;
inline bool PB_MJ_START_DATA::has_nyqwautoplaywait() const
{
    return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PB_MJ_START_DATA::set_has_nyqwautoplaywait()
{
    _has_bits_[0] |= 0x40000000u;
}
inline void PB_MJ_START_DATA::clear_has_nyqwautoplaywait()
{
    _has_bits_[0] &= ~0x40000000u;
}
inline void PB_MJ_START_DATA::clear_nyqwautoplaywait()
{
    nyqwautoplaywait_ = 0;
    clear_has_nyqwautoplaywait();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nyqwautoplaywait() const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nYqwAutoPlayWait)
    return nyqwautoplaywait_;
}
inline void PB_MJ_START_DATA::set_nyqwautoplaywait(::google::protobuf::int32 value)
{
    set_has_nyqwautoplaywait();
    nyqwautoplaywait_ = value;
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nYqwAutoPlayWait)
}

// repeated sint32 nPreHuOneFeng13BKFlag = 33;
inline int PB_MJ_START_DATA::nprehuonefeng13bkflag_size() const
{
    return nprehuonefeng13bkflag_.size();
}
inline void PB_MJ_START_DATA::clear_nprehuonefeng13bkflag()
{
    nprehuonefeng13bkflag_.Clear();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::nprehuonefeng13bkflag(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nPreHuOneFeng13BKFlag)
    return nprehuonefeng13bkflag_.Get(index);
}
inline void PB_MJ_START_DATA::set_nprehuonefeng13bkflag(int index, ::google::protobuf::int32 value)
{
    nprehuonefeng13bkflag_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nPreHuOneFeng13BKFlag)
}
inline void PB_MJ_START_DATA::add_nprehuonefeng13bkflag(::google::protobuf::int32 value)
{
    nprehuonefeng13bkflag_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_MJ_START_DATA.nPreHuOneFeng13BKFlag)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_MJ_START_DATA::nprehuonefeng13bkflag() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_START_DATA.nPreHuOneFeng13BKFlag)
    return nprehuonefeng13bkflag_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_MJ_START_DATA::mutable_nprehuonefeng13bkflag()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_START_DATA.nPreHuOneFeng13BKFlag)
    return &nprehuonefeng13bkflag_;
}

// repeated sint32 nAddGainsScore = 34;
inline int PB_MJ_START_DATA::naddgainsscore_size() const
{
    return naddgainsscore_.size();
}
inline void PB_MJ_START_DATA::clear_naddgainsscore()
{
    naddgainsscore_.Clear();
}
inline ::google::protobuf::int32 PB_MJ_START_DATA::naddgainsscore(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_START_DATA.nAddGainsScore)
    return naddgainsscore_.Get(index);
}
inline void PB_MJ_START_DATA::set_naddgainsscore(int index, ::google::protobuf::int32 value)
{
    naddgainsscore_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_START_DATA.nAddGainsScore)
}
inline void PB_MJ_START_DATA::add_naddgainsscore(::google::protobuf::int32 value)
{
    naddgainsscore_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_MJ_START_DATA.nAddGainsScore)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_MJ_START_DATA::naddgainsscore() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_START_DATA.nAddGainsScore)
    return naddgainsscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_MJ_START_DATA::mutable_naddgainsscore()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_START_DATA.nAddGainsScore)
    return &naddgainsscore_;
}

// -------------------------------------------------------------------

// PB_CARDS_UNIT

// optional sint32 nCardChair = 1;
inline bool PB_CARDS_UNIT::has_ncardchair() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_CARDS_UNIT::set_has_ncardchair()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PB_CARDS_UNIT::clear_has_ncardchair()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PB_CARDS_UNIT::clear_ncardchair()
{
    ncardchair_ = 0;
    clear_has_ncardchair();
}
inline ::google::protobuf::int32 PB_CARDS_UNIT::ncardchair() const
{
    // @@protoc_insertion_point(field_get:game.PB_CARDS_UNIT.nCardChair)
    return ncardchair_;
}
inline void PB_CARDS_UNIT::set_ncardchair(::google::protobuf::int32 value)
{
    set_has_ncardchair();
    ncardchair_ = value;
    // @@protoc_insertion_point(field_set:game.PB_CARDS_UNIT.nCardChair)
}

// repeated sint32 nCardIDs = 2;
inline int PB_CARDS_UNIT::ncardids_size() const
{
    return ncardids_.size();
}
inline void PB_CARDS_UNIT::clear_ncardids()
{
    ncardids_.Clear();
}
inline ::google::protobuf::int32 PB_CARDS_UNIT::ncardids(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_CARDS_UNIT.nCardIDs)
    return ncardids_.Get(index);
}
inline void PB_CARDS_UNIT::set_ncardids(int index, ::google::protobuf::int32 value)
{
    ncardids_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_CARDS_UNIT.nCardIDs)
}
inline void PB_CARDS_UNIT::add_ncardids(::google::protobuf::int32 value)
{
    ncardids_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_CARDS_UNIT.nCardIDs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_CARDS_UNIT::ncardids() const
{
    // @@protoc_insertion_point(field_list:game.PB_CARDS_UNIT.nCardIDs)
    return ncardids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_CARDS_UNIT::mutable_ncardids()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_CARDS_UNIT.nCardIDs)
    return &ncardids_;
}

// -------------------------------------------------------------------

// PB_CARDS_UNIT_CHAIR

// repeated .game.PB_CARDS_UNIT chair_cardsunit = 1;
inline int PB_CARDS_UNIT_CHAIR::chair_cardsunit_size() const
{
    return chair_cardsunit_.size();
}
inline void PB_CARDS_UNIT_CHAIR::clear_chair_cardsunit()
{
    chair_cardsunit_.Clear();
}
inline const ::game::PB_CARDS_UNIT& PB_CARDS_UNIT_CHAIR::chair_cardsunit(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_CARDS_UNIT_CHAIR.chair_cardsunit)
    return chair_cardsunit_.Get(index);
}
inline ::game::PB_CARDS_UNIT* PB_CARDS_UNIT_CHAIR::mutable_chair_cardsunit(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_CARDS_UNIT_CHAIR.chair_cardsunit)
    return chair_cardsunit_.Mutable(index);
}
inline ::game::PB_CARDS_UNIT* PB_CARDS_UNIT_CHAIR::add_chair_cardsunit()
{
    // @@protoc_insertion_point(field_add:game.PB_CARDS_UNIT_CHAIR.chair_cardsunit)
    return chair_cardsunit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT >*
PB_CARDS_UNIT_CHAIR::mutable_chair_cardsunit()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_CARDS_UNIT_CHAIR.chair_cardsunit)
    return &chair_cardsunit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT >&
PB_CARDS_UNIT_CHAIR::chair_cardsunit() const
{
    // @@protoc_insertion_point(field_list:game.PB_CARDS_UNIT_CHAIR.chair_cardsunit)
    return chair_cardsunit_;
}

// -------------------------------------------------------------------

// PB_INT_CHAIR

// repeated sint32 nCardIDs = 1;
inline int PB_INT_CHAIR::ncardids_size() const
{
    return ncardids_.size();
}
inline void PB_INT_CHAIR::clear_ncardids()
{
    ncardids_.Clear();
}
inline ::google::protobuf::int32 PB_INT_CHAIR::ncardids(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_INT_CHAIR.nCardIDs)
    return ncardids_.Get(index);
}
inline void PB_INT_CHAIR::set_ncardids(int index, ::google::protobuf::int32 value)
{
    ncardids_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_INT_CHAIR.nCardIDs)
}
inline void PB_INT_CHAIR::add_ncardids(::google::protobuf::int32 value)
{
    ncardids_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_INT_CHAIR.nCardIDs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_INT_CHAIR::ncardids() const
{
    // @@protoc_insertion_point(field_list:game.PB_INT_CHAIR.nCardIDs)
    return ncardids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_INT_CHAIR::mutable_ncardids()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_INT_CHAIR.nCardIDs)
    return &ncardids_;
}

// -------------------------------------------------------------------

// PB_MJ_PLAY_DATA

// repeated .game.PB_CARDS_UNIT_CHAIR PengCards = 1;
inline int PB_MJ_PLAY_DATA::pengcards_size() const
{
    return pengcards_.size();
}
inline void PB_MJ_PLAY_DATA::clear_pengcards()
{
    pengcards_.Clear();
}
inline const ::game::PB_CARDS_UNIT_CHAIR& PB_MJ_PLAY_DATA::pengcards(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.PengCards)
    return pengcards_.Get(index);
}
inline ::game::PB_CARDS_UNIT_CHAIR* PB_MJ_PLAY_DATA::mutable_pengcards(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_MJ_PLAY_DATA.PengCards)
    return pengcards_.Mutable(index);
}
inline ::game::PB_CARDS_UNIT_CHAIR* PB_MJ_PLAY_DATA::add_pengcards()
{
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.PengCards)
    return pengcards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >*
PB_MJ_PLAY_DATA::mutable_pengcards()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.PengCards)
    return &pengcards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >&
PB_MJ_PLAY_DATA::pengcards() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.PengCards)
    return pengcards_;
}

// repeated sint32 nPengCount = 2;
inline int PB_MJ_PLAY_DATA::npengcount_size() const
{
    return npengcount_.size();
}
inline void PB_MJ_PLAY_DATA::clear_npengcount()
{
    npengcount_.Clear();
}
inline ::google::protobuf::int32 PB_MJ_PLAY_DATA::npengcount(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.nPengCount)
    return npengcount_.Get(index);
}
inline void PB_MJ_PLAY_DATA::set_npengcount(int index, ::google::protobuf::int32 value)
{
    npengcount_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_PLAY_DATA.nPengCount)
}
inline void PB_MJ_PLAY_DATA::add_npengcount(::google::protobuf::int32 value)
{
    npengcount_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.nPengCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_MJ_PLAY_DATA::npengcount() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.nPengCount)
    return npengcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_MJ_PLAY_DATA::mutable_npengcount()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.nPengCount)
    return &npengcount_;
}

// repeated .game.PB_CARDS_UNIT_CHAIR ChiCards = 3;
inline int PB_MJ_PLAY_DATA::chicards_size() const
{
    return chicards_.size();
}
inline void PB_MJ_PLAY_DATA::clear_chicards()
{
    chicards_.Clear();
}
inline const ::game::PB_CARDS_UNIT_CHAIR& PB_MJ_PLAY_DATA::chicards(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.ChiCards)
    return chicards_.Get(index);
}
inline ::game::PB_CARDS_UNIT_CHAIR* PB_MJ_PLAY_DATA::mutable_chicards(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_MJ_PLAY_DATA.ChiCards)
    return chicards_.Mutable(index);
}
inline ::game::PB_CARDS_UNIT_CHAIR* PB_MJ_PLAY_DATA::add_chicards()
{
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.ChiCards)
    return chicards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >*
PB_MJ_PLAY_DATA::mutable_chicards()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.ChiCards)
    return &chicards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >&
PB_MJ_PLAY_DATA::chicards() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.ChiCards)
    return chicards_;
}

// repeated sint32 nChiCount = 4;
inline int PB_MJ_PLAY_DATA::nchicount_size() const
{
    return nchicount_.size();
}
inline void PB_MJ_PLAY_DATA::clear_nchicount()
{
    nchicount_.Clear();
}
inline ::google::protobuf::int32 PB_MJ_PLAY_DATA::nchicount(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.nChiCount)
    return nchicount_.Get(index);
}
inline void PB_MJ_PLAY_DATA::set_nchicount(int index, ::google::protobuf::int32 value)
{
    nchicount_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_PLAY_DATA.nChiCount)
}
inline void PB_MJ_PLAY_DATA::add_nchicount(::google::protobuf::int32 value)
{
    nchicount_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.nChiCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_MJ_PLAY_DATA::nchicount() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.nChiCount)
    return nchicount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_MJ_PLAY_DATA::mutable_nchicount()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.nChiCount)
    return &nchicount_;
}

// repeated .game.PB_CARDS_UNIT_CHAIR MnGangCards = 5;
inline int PB_MJ_PLAY_DATA::mngangcards_size() const
{
    return mngangcards_.size();
}
inline void PB_MJ_PLAY_DATA::clear_mngangcards()
{
    mngangcards_.Clear();
}
inline const ::game::PB_CARDS_UNIT_CHAIR& PB_MJ_PLAY_DATA::mngangcards(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.MnGangCards)
    return mngangcards_.Get(index);
}
inline ::game::PB_CARDS_UNIT_CHAIR* PB_MJ_PLAY_DATA::mutable_mngangcards(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_MJ_PLAY_DATA.MnGangCards)
    return mngangcards_.Mutable(index);
}
inline ::game::PB_CARDS_UNIT_CHAIR* PB_MJ_PLAY_DATA::add_mngangcards()
{
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.MnGangCards)
    return mngangcards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >*
PB_MJ_PLAY_DATA::mutable_mngangcards()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.MnGangCards)
    return &mngangcards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >&
PB_MJ_PLAY_DATA::mngangcards() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.MnGangCards)
    return mngangcards_;
}

// repeated sint32 nMnGangCount = 6;
inline int PB_MJ_PLAY_DATA::nmngangcount_size() const
{
    return nmngangcount_.size();
}
inline void PB_MJ_PLAY_DATA::clear_nmngangcount()
{
    nmngangcount_.Clear();
}
inline ::google::protobuf::int32 PB_MJ_PLAY_DATA::nmngangcount(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.nMnGangCount)
    return nmngangcount_.Get(index);
}
inline void PB_MJ_PLAY_DATA::set_nmngangcount(int index, ::google::protobuf::int32 value)
{
    nmngangcount_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_PLAY_DATA.nMnGangCount)
}
inline void PB_MJ_PLAY_DATA::add_nmngangcount(::google::protobuf::int32 value)
{
    nmngangcount_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.nMnGangCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_MJ_PLAY_DATA::nmngangcount() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.nMnGangCount)
    return nmngangcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_MJ_PLAY_DATA::mutable_nmngangcount()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.nMnGangCount)
    return &nmngangcount_;
}

// repeated .game.PB_CARDS_UNIT_CHAIR AnGangCards = 7;
inline int PB_MJ_PLAY_DATA::angangcards_size() const
{
    return angangcards_.size();
}
inline void PB_MJ_PLAY_DATA::clear_angangcards()
{
    angangcards_.Clear();
}
inline const ::game::PB_CARDS_UNIT_CHAIR& PB_MJ_PLAY_DATA::angangcards(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.AnGangCards)
    return angangcards_.Get(index);
}
inline ::game::PB_CARDS_UNIT_CHAIR* PB_MJ_PLAY_DATA::mutable_angangcards(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_MJ_PLAY_DATA.AnGangCards)
    return angangcards_.Mutable(index);
}
inline ::game::PB_CARDS_UNIT_CHAIR* PB_MJ_PLAY_DATA::add_angangcards()
{
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.AnGangCards)
    return angangcards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >*
PB_MJ_PLAY_DATA::mutable_angangcards()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.AnGangCards)
    return &angangcards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >&
PB_MJ_PLAY_DATA::angangcards() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.AnGangCards)
    return angangcards_;
}

// repeated sint32 nAnGangCount = 8;
inline int PB_MJ_PLAY_DATA::nangangcount_size() const
{
    return nangangcount_.size();
}
inline void PB_MJ_PLAY_DATA::clear_nangangcount()
{
    nangangcount_.Clear();
}
inline ::google::protobuf::int32 PB_MJ_PLAY_DATA::nangangcount(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.nAnGangCount)
    return nangangcount_.Get(index);
}
inline void PB_MJ_PLAY_DATA::set_nangangcount(int index, ::google::protobuf::int32 value)
{
    nangangcount_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_PLAY_DATA.nAnGangCount)
}
inline void PB_MJ_PLAY_DATA::add_nangangcount(::google::protobuf::int32 value)
{
    nangangcount_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.nAnGangCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_MJ_PLAY_DATA::nangangcount() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.nAnGangCount)
    return nangangcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_MJ_PLAY_DATA::mutable_nangangcount()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.nAnGangCount)
    return &nangangcount_;
}

// repeated .game.PB_CARDS_UNIT_CHAIR PnGangCards = 9;
inline int PB_MJ_PLAY_DATA::pngangcards_size() const
{
    return pngangcards_.size();
}
inline void PB_MJ_PLAY_DATA::clear_pngangcards()
{
    pngangcards_.Clear();
}
inline const ::game::PB_CARDS_UNIT_CHAIR& PB_MJ_PLAY_DATA::pngangcards(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.PnGangCards)
    return pngangcards_.Get(index);
}
inline ::game::PB_CARDS_UNIT_CHAIR* PB_MJ_PLAY_DATA::mutable_pngangcards(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_MJ_PLAY_DATA.PnGangCards)
    return pngangcards_.Mutable(index);
}
inline ::game::PB_CARDS_UNIT_CHAIR* PB_MJ_PLAY_DATA::add_pngangcards()
{
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.PnGangCards)
    return pngangcards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >*
PB_MJ_PLAY_DATA::mutable_pngangcards()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.PnGangCards)
    return &pngangcards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDS_UNIT_CHAIR >&
PB_MJ_PLAY_DATA::pngangcards() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.PnGangCards)
    return pngangcards_;
}

// repeated sint32 nPnGangCount = 10;
inline int PB_MJ_PLAY_DATA::npngangcount_size() const
{
    return npngangcount_.size();
}
inline void PB_MJ_PLAY_DATA::clear_npngangcount()
{
    npngangcount_.Clear();
}
inline ::google::protobuf::int32 PB_MJ_PLAY_DATA::npngangcount(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.nPnGangCount)
    return npngangcount_.Get(index);
}
inline void PB_MJ_PLAY_DATA::set_npngangcount(int index, ::google::protobuf::int32 value)
{
    npngangcount_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_PLAY_DATA.nPnGangCount)
}
inline void PB_MJ_PLAY_DATA::add_npngangcount(::google::protobuf::int32 value)
{
    npngangcount_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.nPnGangCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_MJ_PLAY_DATA::npngangcount() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.nPnGangCount)
    return npngangcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_MJ_PLAY_DATA::mutable_npngangcount()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.nPnGangCount)
    return &npngangcount_;
}

// repeated .game.PB_INT_CHAIR nOutCards = 11;
inline int PB_MJ_PLAY_DATA::noutcards_size() const
{
    return noutcards_.size();
}
inline void PB_MJ_PLAY_DATA::clear_noutcards()
{
    noutcards_.Clear();
}
inline const ::game::PB_INT_CHAIR& PB_MJ_PLAY_DATA::noutcards(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.nOutCards)
    return noutcards_.Get(index);
}
inline ::game::PB_INT_CHAIR* PB_MJ_PLAY_DATA::mutable_noutcards(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_MJ_PLAY_DATA.nOutCards)
    return noutcards_.Mutable(index);
}
inline ::game::PB_INT_CHAIR* PB_MJ_PLAY_DATA::add_noutcards()
{
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.nOutCards)
    return noutcards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >*
PB_MJ_PLAY_DATA::mutable_noutcards()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.nOutCards)
    return &noutcards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >&
PB_MJ_PLAY_DATA::noutcards() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.nOutCards)
    return noutcards_;
}

// repeated sint32 nOutCount = 12;
inline int PB_MJ_PLAY_DATA::noutcount_size() const
{
    return noutcount_.size();
}
inline void PB_MJ_PLAY_DATA::clear_noutcount()
{
    noutcount_.Clear();
}
inline ::google::protobuf::int32 PB_MJ_PLAY_DATA::noutcount(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.nOutCount)
    return noutcount_.Get(index);
}
inline void PB_MJ_PLAY_DATA::set_noutcount(int index, ::google::protobuf::int32 value)
{
    noutcount_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_PLAY_DATA.nOutCount)
}
inline void PB_MJ_PLAY_DATA::add_noutcount(::google::protobuf::int32 value)
{
    noutcount_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.nOutCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_MJ_PLAY_DATA::noutcount() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.nOutCount)
    return noutcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_MJ_PLAY_DATA::mutable_noutcount()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.nOutCount)
    return &noutcount_;
}

// repeated .game.PB_INT_CHAIR nHuaCards = 13;
inline int PB_MJ_PLAY_DATA::nhuacards_size() const
{
    return nhuacards_.size();
}
inline void PB_MJ_PLAY_DATA::clear_nhuacards()
{
    nhuacards_.Clear();
}
inline const ::game::PB_INT_CHAIR& PB_MJ_PLAY_DATA::nhuacards(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.nHuaCards)
    return nhuacards_.Get(index);
}
inline ::game::PB_INT_CHAIR* PB_MJ_PLAY_DATA::mutable_nhuacards(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_MJ_PLAY_DATA.nHuaCards)
    return nhuacards_.Mutable(index);
}
inline ::game::PB_INT_CHAIR* PB_MJ_PLAY_DATA::add_nhuacards()
{
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.nHuaCards)
    return nhuacards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >*
PB_MJ_PLAY_DATA::mutable_nhuacards()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.nHuaCards)
    return &nhuacards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >&
PB_MJ_PLAY_DATA::nhuacards() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.nHuaCards)
    return nhuacards_;
}

// repeated sint32 nHuaCount = 14;
inline int PB_MJ_PLAY_DATA::nhuacount_size() const
{
    return nhuacount_.size();
}
inline void PB_MJ_PLAY_DATA::clear_nhuacount()
{
    nhuacount_.Clear();
}
inline ::google::protobuf::int32 PB_MJ_PLAY_DATA::nhuacount(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_MJ_PLAY_DATA.nHuaCount)
    return nhuacount_.Get(index);
}
inline void PB_MJ_PLAY_DATA::set_nhuacount(int index, ::google::protobuf::int32 value)
{
    nhuacount_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_MJ_PLAY_DATA.nHuaCount)
}
inline void PB_MJ_PLAY_DATA::add_nhuacount(::google::protobuf::int32 value)
{
    nhuacount_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_MJ_PLAY_DATA.nHuaCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_MJ_PLAY_DATA::nhuacount() const
{
    // @@protoc_insertion_point(field_list:game.PB_MJ_PLAY_DATA.nHuaCount)
    return nhuacount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_MJ_PLAY_DATA::mutable_nhuacount()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_MJ_PLAY_DATA.nHuaCount)
    return &nhuacount_;
}

// -------------------------------------------------------------------

// PB_GAME_TABLE_INFO

// optional .tc.MJTableInfo main = 1;
inline bool PB_GAME_TABLE_INFO::has_main() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_main()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PB_GAME_TABLE_INFO::clear_has_main()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline const ::tc::MJTableInfo& PB_GAME_TABLE_INFO::main() const
{
    const ::tc::MJTableInfo* p = main_;
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.main)
    return p != NULL ? *p : *reinterpret_cast<const ::tc::MJTableInfo*>(
            &::tc::_MJTableInfo_default_instance_);
}
inline ::tc::MJTableInfo* PB_GAME_TABLE_INFO::release_main()
{
    // @@protoc_insertion_point(field_release:game.PB_GAME_TABLE_INFO.main)
    clear_has_main();
    ::tc::MJTableInfo* temp = main_;
    main_ = NULL;
    return temp;
}
inline ::tc::MJTableInfo* PB_GAME_TABLE_INFO::mutable_main()
{
    set_has_main();
    if (main_ == NULL)
    {
        main_ = new ::tc::MJTableInfo;
    }
    // @@protoc_insertion_point(field_mutable:game.PB_GAME_TABLE_INFO.main)
    return main_;
}
inline void PB_GAME_TABLE_INFO::set_allocated_main(::tc::MJTableInfo* main)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete reinterpret_cast< ::google::protobuf::MessageLite*>(main_);
    }
    if (main)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            main = ::google::protobuf::internal::GetOwnedMessage(
                    message_arena, main, submessage_arena);
        }
        set_has_main();
    }
    else
    {
        clear_has_main();
    }
    main_ = main;
    // @@protoc_insertion_point(field_set_allocated:game.PB_GAME_TABLE_INFO.main)
}

// optional .game.PB_MJ_START_DATA StartInfo = 2;
inline bool PB_GAME_TABLE_INFO::has_startinfo() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_startinfo()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PB_GAME_TABLE_INFO::clear_has_startinfo()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PB_GAME_TABLE_INFO::clear_startinfo()
{
    if (startinfo_ != NULL)
    {
        startinfo_->Clear();
    }
    clear_has_startinfo();
}
inline const ::game::PB_MJ_START_DATA& PB_GAME_TABLE_INFO::startinfo() const
{
    const ::game::PB_MJ_START_DATA* p = startinfo_;
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.StartInfo)
    return p != NULL ? *p : *reinterpret_cast<const ::game::PB_MJ_START_DATA*>(
            &::game::_PB_MJ_START_DATA_default_instance_);
}
inline ::game::PB_MJ_START_DATA* PB_GAME_TABLE_INFO::release_startinfo()
{
    // @@protoc_insertion_point(field_release:game.PB_GAME_TABLE_INFO.StartInfo)
    clear_has_startinfo();
    ::game::PB_MJ_START_DATA* temp = startinfo_;
    startinfo_ = NULL;
    return temp;
}
inline ::game::PB_MJ_START_DATA* PB_GAME_TABLE_INFO::mutable_startinfo()
{
    set_has_startinfo();
    if (startinfo_ == NULL)
    {
        startinfo_ = new ::game::PB_MJ_START_DATA;
    }
    // @@protoc_insertion_point(field_mutable:game.PB_GAME_TABLE_INFO.StartInfo)
    return startinfo_;
}
inline void PB_GAME_TABLE_INFO::set_allocated_startinfo(::game::PB_MJ_START_DATA* startinfo)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete startinfo_;
    }
    if (startinfo)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            startinfo = ::google::protobuf::internal::GetOwnedMessage(
                    message_arena, startinfo, submessage_arena);
        }
        set_has_startinfo();
    }
    else
    {
        clear_has_startinfo();
    }
    startinfo_ = startinfo;
    // @@protoc_insertion_point(field_set_allocated:game.PB_GAME_TABLE_INFO.StartInfo)
}

// optional .game.PB_MJ_PLAY_DATA PlayData = 3;
inline bool PB_GAME_TABLE_INFO::has_playdata() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_playdata()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void PB_GAME_TABLE_INFO::clear_has_playdata()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void PB_GAME_TABLE_INFO::clear_playdata()
{
    if (playdata_ != NULL)
    {
        playdata_->Clear();
    }
    clear_has_playdata();
}
inline const ::game::PB_MJ_PLAY_DATA& PB_GAME_TABLE_INFO::playdata() const
{
    const ::game::PB_MJ_PLAY_DATA* p = playdata_;
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.PlayData)
    return p != NULL ? *p : *reinterpret_cast<const ::game::PB_MJ_PLAY_DATA*>(
            &::game::_PB_MJ_PLAY_DATA_default_instance_);
}
inline ::game::PB_MJ_PLAY_DATA* PB_GAME_TABLE_INFO::release_playdata()
{
    // @@protoc_insertion_point(field_release:game.PB_GAME_TABLE_INFO.PlayData)
    clear_has_playdata();
    ::game::PB_MJ_PLAY_DATA* temp = playdata_;
    playdata_ = NULL;
    return temp;
}
inline ::game::PB_MJ_PLAY_DATA* PB_GAME_TABLE_INFO::mutable_playdata()
{
    set_has_playdata();
    if (playdata_ == NULL)
    {
        playdata_ = new ::game::PB_MJ_PLAY_DATA;
    }
    // @@protoc_insertion_point(field_mutable:game.PB_GAME_TABLE_INFO.PlayData)
    return playdata_;
}
inline void PB_GAME_TABLE_INFO::set_allocated_playdata(::game::PB_MJ_PLAY_DATA* playdata)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete playdata_;
    }
    if (playdata)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            playdata = ::google::protobuf::internal::GetOwnedMessage(
                    message_arena, playdata, submessage_arena);
        }
        set_has_playdata();
    }
    else
    {
        clear_has_playdata();
    }
    playdata_ = playdata;
    // @@protoc_insertion_point(field_set_allocated:game.PB_GAME_TABLE_INFO.PlayData)
}

// optional int32 dwGameFlags = 4;
inline bool PB_GAME_TABLE_INFO::has_dwgameflags() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_dwgameflags()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void PB_GAME_TABLE_INFO::clear_has_dwgameflags()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void PB_GAME_TABLE_INFO::clear_dwgameflags()
{
    dwgameflags_ = 0;
    clear_has_dwgameflags();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::dwgameflags() const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.dwGameFlags)
    return dwgameflags_;
}
inline void PB_GAME_TABLE_INFO::set_dwgameflags(::google::protobuf::int32 value)
{
    set_has_dwgameflags();
    dwgameflags_ = value;
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.dwGameFlags)
}

// optional sint32 nCurrentLeftOperateTime = 5;
inline bool PB_GAME_TABLE_INFO::has_ncurrentleftoperatetime() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_ncurrentleftoperatetime()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void PB_GAME_TABLE_INFO::clear_has_ncurrentleftoperatetime()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void PB_GAME_TABLE_INFO::clear_ncurrentleftoperatetime()
{
    ncurrentleftoperatetime_ = 0;
    clear_has_ncurrentleftoperatetime();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::ncurrentleftoperatetime() const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.nCurrentLeftOperateTime)
    return ncurrentleftoperatetime_;
}
inline void PB_GAME_TABLE_INFO::set_ncurrentleftoperatetime(::google::protobuf::int32 value)
{
    set_has_ncurrentleftoperatetime();
    ncurrentleftoperatetime_ = value;
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.nCurrentLeftOperateTime)
}

// repeated int32 dwUserStatus = 6;
inline int PB_GAME_TABLE_INFO::dwuserstatus_size() const
{
    return dwuserstatus_.size();
}
inline void PB_GAME_TABLE_INFO::clear_dwuserstatus()
{
    dwuserstatus_.Clear();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::dwuserstatus(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.dwUserStatus)
    return dwuserstatus_.Get(index);
}
inline void PB_GAME_TABLE_INFO::set_dwuserstatus(int index, ::google::protobuf::int32 value)
{
    dwuserstatus_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.dwUserStatus)
}
inline void PB_GAME_TABLE_INFO::add_dwuserstatus(::google::protobuf::int32 value)
{
    dwuserstatus_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_GAME_TABLE_INFO.dwUserStatus)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_GAME_TABLE_INFO::dwuserstatus() const
{
    // @@protoc_insertion_point(field_list:game.PB_GAME_TABLE_INFO.dwUserStatus)
    return dwuserstatus_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_GAME_TABLE_INFO::mutable_dwuserstatus()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_GAME_TABLE_INFO.dwUserStatus)
    return &dwuserstatus_;
}

// repeated sint32 nCardsCount = 7;
inline int PB_GAME_TABLE_INFO::ncardscount_size() const
{
    return ncardscount_.size();
}
inline void PB_GAME_TABLE_INFO::clear_ncardscount()
{
    ncardscount_.Clear();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::ncardscount(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.nCardsCount)
    return ncardscount_.Get(index);
}
inline void PB_GAME_TABLE_INFO::set_ncardscount(int index, ::google::protobuf::int32 value)
{
    ncardscount_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.nCardsCount)
}
inline void PB_GAME_TABLE_INFO::add_ncardscount(::google::protobuf::int32 value)
{
    ncardscount_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_GAME_TABLE_INFO.nCardsCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_GAME_TABLE_INFO::ncardscount() const
{
    // @@protoc_insertion_point(field_list:game.PB_GAME_TABLE_INFO.nCardsCount)
    return ncardscount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_GAME_TABLE_INFO::mutable_ncardscount()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_GAME_TABLE_INFO.nCardsCount)
    return &ncardscount_;
}

// repeated sint32 nChairCards = 8;
inline int PB_GAME_TABLE_INFO::nchaircards_size() const
{
    return nchaircards_.size();
}
inline void PB_GAME_TABLE_INFO::clear_nchaircards()
{
    nchaircards_.Clear();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::nchaircards(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.nChairCards)
    return nchaircards_.Get(index);
}
inline void PB_GAME_TABLE_INFO::set_nchaircards(int index, ::google::protobuf::int32 value)
{
    nchaircards_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.nChairCards)
}
inline void PB_GAME_TABLE_INFO::add_nchaircards(::google::protobuf::int32 value)
{
    nchaircards_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_GAME_TABLE_INFO.nChairCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_GAME_TABLE_INFO::nchaircards() const
{
    // @@protoc_insertion_point(field_list:game.PB_GAME_TABLE_INFO.nChairCards)
    return nchaircards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_GAME_TABLE_INFO::mutable_nchaircards()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_GAME_TABLE_INFO.nChairCards)
    return &nchaircards_;
}

// repeated sint32 nAskExit = 9;
inline int PB_GAME_TABLE_INFO::naskexit_size() const
{
    return naskexit_.size();
}
inline void PB_GAME_TABLE_INFO::clear_naskexit()
{
    naskexit_.Clear();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::naskexit(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.nAskExit)
    return naskexit_.Get(index);
}
inline void PB_GAME_TABLE_INFO::set_naskexit(int index, ::google::protobuf::int32 value)
{
    naskexit_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.nAskExit)
}
inline void PB_GAME_TABLE_INFO::add_naskexit(::google::protobuf::int32 value)
{
    naskexit_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_GAME_TABLE_INFO.nAskExit)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_GAME_TABLE_INFO::naskexit() const
{
    // @@protoc_insertion_point(field_list:game.PB_GAME_TABLE_INFO.nAskExit)
    return naskexit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_GAME_TABLE_INFO::mutable_naskexit()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_GAME_TABLE_INFO.nAskExit)
    return &naskexit_;
}

// repeated sint32 nResultDiff = 10;
inline int PB_GAME_TABLE_INFO::nresultdiff_size() const
{
    return nresultdiff_.size();
}
inline void PB_GAME_TABLE_INFO::clear_nresultdiff()
{
    nresultdiff_.Clear();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::nresultdiff(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.nResultDiff)
    return nresultdiff_.Get(index);
}
inline void PB_GAME_TABLE_INFO::set_nresultdiff(int index, ::google::protobuf::int32 value)
{
    nresultdiff_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.nResultDiff)
}
inline void PB_GAME_TABLE_INFO::add_nresultdiff(::google::protobuf::int32 value)
{
    nresultdiff_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_GAME_TABLE_INFO.nResultDiff)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_GAME_TABLE_INFO::nresultdiff() const
{
    // @@protoc_insertion_point(field_list:game.PB_GAME_TABLE_INFO.nResultDiff)
    return nresultdiff_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_GAME_TABLE_INFO::mutable_nresultdiff()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_GAME_TABLE_INFO.nResultDiff)
    return &nresultdiff_;
}

// repeated sint32 nTotalResult = 11;
inline int PB_GAME_TABLE_INFO::ntotalresult_size() const
{
    return ntotalresult_.size();
}
inline void PB_GAME_TABLE_INFO::clear_ntotalresult()
{
    ntotalresult_.Clear();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::ntotalresult(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.nTotalResult)
    return ntotalresult_.Get(index);
}
inline void PB_GAME_TABLE_INFO::set_ntotalresult(int index, ::google::protobuf::int32 value)
{
    ntotalresult_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.nTotalResult)
}
inline void PB_GAME_TABLE_INFO::add_ntotalresult(::google::protobuf::int32 value)
{
    ntotalresult_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_GAME_TABLE_INFO.nTotalResult)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_GAME_TABLE_INFO::ntotalresult() const
{
    // @@protoc_insertion_point(field_list:game.PB_GAME_TABLE_INFO.nTotalResult)
    return ntotalresult_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_GAME_TABLE_INFO::mutable_ntotalresult()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_GAME_TABLE_INFO.nTotalResult)
    return &ntotalresult_;
}

// repeated int32 dwPGCHFlags = 12;
inline int PB_GAME_TABLE_INFO::dwpgchflags_size() const
{
    return dwpgchflags_.size();
}
inline void PB_GAME_TABLE_INFO::clear_dwpgchflags()
{
    dwpgchflags_.Clear();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::dwpgchflags(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.dwPGCHFlags)
    return dwpgchflags_.Get(index);
}
inline void PB_GAME_TABLE_INFO::set_dwpgchflags(int index, ::google::protobuf::int32 value)
{
    dwpgchflags_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.dwPGCHFlags)
}
inline void PB_GAME_TABLE_INFO::add_dwpgchflags(::google::protobuf::int32 value)
{
    dwpgchflags_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_GAME_TABLE_INFO.dwPGCHFlags)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_GAME_TABLE_INFO::dwpgchflags() const
{
    // @@protoc_insertion_point(field_list:game.PB_GAME_TABLE_INFO.dwPGCHFlags)
    return dwpgchflags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_GAME_TABLE_INFO::mutable_dwpgchflags()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_GAME_TABLE_INFO.dwPGCHFlags)
    return &dwpgchflags_;
}

// optional sint32 nQghFlag = 13;
inline bool PB_GAME_TABLE_INFO::has_nqghflag() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_nqghflag()
{
    _has_bits_[0] |= 0x00000040u;
}
inline void PB_GAME_TABLE_INFO::clear_has_nqghflag()
{
    _has_bits_[0] &= ~0x00000040u;
}
inline void PB_GAME_TABLE_INFO::clear_nqghflag()
{
    nqghflag_ = 0;
    clear_has_nqghflag();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::nqghflag() const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.nQghFlag)
    return nqghflag_;
}
inline void PB_GAME_TABLE_INFO::set_nqghflag(::google::protobuf::int32 value)
{
    set_has_nqghflag();
    nqghflag_ = value;
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.nQghFlag)
}

// optional sint32 nQghID = 14;
inline bool PB_GAME_TABLE_INFO::has_nqghid() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_nqghid()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void PB_GAME_TABLE_INFO::clear_has_nqghid()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void PB_GAME_TABLE_INFO::clear_nqghid()
{
    nqghid_ = 0;
    clear_has_nqghid();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::nqghid() const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.nQghID)
    return nqghid_;
}
inline void PB_GAME_TABLE_INFO::set_nqghid(::google::protobuf::int32 value)
{
    set_has_nqghid();
    nqghid_ = value;
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.nQghID)
}

// optional sint32 nQghChair = 15;
inline bool PB_GAME_TABLE_INFO::has_nqghchair() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_nqghchair()
{
    _has_bits_[0] |= 0x00000100u;
}
inline void PB_GAME_TABLE_INFO::clear_has_nqghchair()
{
    _has_bits_[0] &= ~0x00000100u;
}
inline void PB_GAME_TABLE_INFO::clear_nqghchair()
{
    nqghchair_ = 0;
    clear_has_nqghchair();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::nqghchair() const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.nQghChair)
    return nqghchair_;
}
inline void PB_GAME_TABLE_INFO::set_nqghchair(::google::protobuf::int32 value)
{
    set_has_nqghchair();
    nqghchair_ = value;
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.nQghChair)
}

// optional .game.PB_CARD_TING_DETAIL tingdetail = 16;
inline bool PB_GAME_TABLE_INFO::has_tingdetail() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_tingdetail()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void PB_GAME_TABLE_INFO::clear_has_tingdetail()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void PB_GAME_TABLE_INFO::clear_tingdetail()
{
    if (tingdetail_ != NULL)
    {
        tingdetail_->Clear();
    }
    clear_has_tingdetail();
}
inline const ::game::PB_CARD_TING_DETAIL& PB_GAME_TABLE_INFO::tingdetail() const
{
    const ::game::PB_CARD_TING_DETAIL* p = tingdetail_;
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.tingdetail)
    return p != NULL ? *p : *reinterpret_cast<const ::game::PB_CARD_TING_DETAIL*>(
            &::game::_PB_CARD_TING_DETAIL_default_instance_);
}
inline ::game::PB_CARD_TING_DETAIL* PB_GAME_TABLE_INFO::release_tingdetail()
{
    // @@protoc_insertion_point(field_release:game.PB_GAME_TABLE_INFO.tingdetail)
    clear_has_tingdetail();
    ::game::PB_CARD_TING_DETAIL* temp = tingdetail_;
    tingdetail_ = NULL;
    return temp;
}
inline ::game::PB_CARD_TING_DETAIL* PB_GAME_TABLE_INFO::mutable_tingdetail()
{
    set_has_tingdetail();
    if (tingdetail_ == NULL)
    {
        tingdetail_ = new ::game::PB_CARD_TING_DETAIL;
    }
    // @@protoc_insertion_point(field_mutable:game.PB_GAME_TABLE_INFO.tingdetail)
    return tingdetail_;
}
inline void PB_GAME_TABLE_INFO::set_allocated_tingdetail(::game::PB_CARD_TING_DETAIL* tingdetail)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete tingdetail_;
    }
    if (tingdetail)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            tingdetail = ::google::protobuf::internal::GetOwnedMessage(
                    message_arena, tingdetail, submessage_arena);
        }
        set_has_tingdetail();
    }
    else
    {
        clear_has_tingdetail();
    }
    tingdetail_ = tingdetail;
    // @@protoc_insertion_point(field_set_allocated:game.PB_GAME_TABLE_INFO.tingdetail)
}

// repeated sint32 nTingCardsDXXW = 17;
inline int PB_GAME_TABLE_INFO::ntingcardsdxxw_size() const
{
    return ntingcardsdxxw_.size();
}
inline void PB_GAME_TABLE_INFO::clear_ntingcardsdxxw()
{
    ntingcardsdxxw_.Clear();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::ntingcardsdxxw(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.nTingCardsDXXW)
    return ntingcardsdxxw_.Get(index);
}
inline void PB_GAME_TABLE_INFO::set_ntingcardsdxxw(int index, ::google::protobuf::int32 value)
{
    ntingcardsdxxw_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.nTingCardsDXXW)
}
inline void PB_GAME_TABLE_INFO::add_ntingcardsdxxw(::google::protobuf::int32 value)
{
    ntingcardsdxxw_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_GAME_TABLE_INFO.nTingCardsDXXW)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_GAME_TABLE_INFO::ntingcardsdxxw() const
{
    // @@protoc_insertion_point(field_list:game.PB_GAME_TABLE_INFO.nTingCardsDXXW)
    return ntingcardsdxxw_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_GAME_TABLE_INFO::mutable_ntingcardsdxxw()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_GAME_TABLE_INFO.nTingCardsDXXW)
    return &ntingcardsdxxw_;
}

// optional sint32 dwTimeStamp = 18;
inline bool PB_GAME_TABLE_INFO::has_dwtimestamp() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_dwtimestamp()
{
    _has_bits_[0] |= 0x00000200u;
}
inline void PB_GAME_TABLE_INFO::clear_has_dwtimestamp()
{
    _has_bits_[0] &= ~0x00000200u;
}
inline void PB_GAME_TABLE_INFO::clear_dwtimestamp()
{
    dwtimestamp_ = 0;
    clear_has_dwtimestamp();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::dwtimestamp() const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.dwTimeStamp)
    return dwtimestamp_;
}
inline void PB_GAME_TABLE_INFO::set_dwtimestamp(::google::protobuf::int32 value)
{
    set_has_dwtimestamp();
    dwtimestamp_ = value;
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.dwTimeStamp)
}

// optional int32 game_flags2 = 19;
inline bool PB_GAME_TABLE_INFO::has_game_flags2() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PB_GAME_TABLE_INFO::set_has_game_flags2()
{
    _has_bits_[0] |= 0x00000400u;
}
inline void PB_GAME_TABLE_INFO::clear_has_game_flags2()
{
    _has_bits_[0] &= ~0x00000400u;
}
inline void PB_GAME_TABLE_INFO::clear_game_flags2()
{
    game_flags2_ = 0;
    clear_has_game_flags2();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::game_flags2() const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.game_flags2)
    return game_flags2_;
}
inline void PB_GAME_TABLE_INFO::set_game_flags2(::google::protobuf::int32 value)
{
    set_has_game_flags2();
    game_flags2_ = value;
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.game_flags2)
}

// repeated sint32 bao_ting = 20;
inline int PB_GAME_TABLE_INFO::bao_ting_size() const
{
    return bao_ting_.size();
}
inline void PB_GAME_TABLE_INFO::clear_bao_ting()
{
    bao_ting_.Clear();
}
inline ::google::protobuf::int32 PB_GAME_TABLE_INFO::bao_ting(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_TABLE_INFO.bao_ting)
    return bao_ting_.Get(index);
}
inline void PB_GAME_TABLE_INFO::set_bao_ting(int index, ::google::protobuf::int32 value)
{
    bao_ting_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_GAME_TABLE_INFO.bao_ting)
}
inline void PB_GAME_TABLE_INFO::add_bao_ting(::google::protobuf::int32 value)
{
    bao_ting_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_GAME_TABLE_INFO.bao_ting)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_GAME_TABLE_INFO::bao_ting() const
{
    // @@protoc_insertion_point(field_list:game.PB_GAME_TABLE_INFO.bao_ting)
    return bao_ting_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_GAME_TABLE_INFO::mutable_bao_ting()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_GAME_TABLE_INFO.bao_ting)
    return &bao_ting_;
}

// -------------------------------------------------------------------

// PB_SOLOPLAYER_HEAD

// optional sint32 nRoomID = 1;
inline bool PB_SOLOPLAYER_HEAD::has_nroomid() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_SOLOPLAYER_HEAD::set_has_nroomid()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PB_SOLOPLAYER_HEAD::clear_has_nroomid()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PB_SOLOPLAYER_HEAD::clear_nroomid()
{
    nroomid_ = 0;
    clear_has_nroomid();
}
inline ::google::protobuf::int32 PB_SOLOPLAYER_HEAD::nroomid() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLOPLAYER_HEAD.nRoomID)
    return nroomid_;
}
inline void PB_SOLOPLAYER_HEAD::set_nroomid(::google::protobuf::int32 value)
{
    set_has_nroomid();
    nroomid_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLOPLAYER_HEAD.nRoomID)
}

// optional sint32 nTableNO = 2;
inline bool PB_SOLOPLAYER_HEAD::has_ntableno() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_SOLOPLAYER_HEAD::set_has_ntableno()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PB_SOLOPLAYER_HEAD::clear_has_ntableno()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PB_SOLOPLAYER_HEAD::clear_ntableno()
{
    ntableno_ = 0;
    clear_has_ntableno();
}
inline ::google::protobuf::int32 PB_SOLOPLAYER_HEAD::ntableno() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLOPLAYER_HEAD.nTableNO)
    return ntableno_;
}
inline void PB_SOLOPLAYER_HEAD::set_ntableno(::google::protobuf::int32 value)
{
    set_has_ntableno();
    ntableno_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLOPLAYER_HEAD.nTableNO)
}

// optional sint32 nPlayerCount = 3;
inline bool PB_SOLOPLAYER_HEAD::has_nplayercount() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_SOLOPLAYER_HEAD::set_has_nplayercount()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void PB_SOLOPLAYER_HEAD::clear_has_nplayercount()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void PB_SOLOPLAYER_HEAD::clear_nplayercount()
{
    nplayercount_ = 0;
    clear_has_nplayercount();
}
inline ::google::protobuf::int32 PB_SOLOPLAYER_HEAD::nplayercount() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLOPLAYER_HEAD.nPlayerCount)
    return nplayercount_;
}
inline void PB_SOLOPLAYER_HEAD::set_nplayercount(::google::protobuf::int32 value)
{
    set_has_nplayercount();
    nplayercount_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLOPLAYER_HEAD.nPlayerCount)
}

// repeated int32 dwUserStatus = 4;
inline int PB_SOLOPLAYER_HEAD::dwuserstatus_size() const
{
    return dwuserstatus_.size();
}
inline void PB_SOLOPLAYER_HEAD::clear_dwuserstatus()
{
    dwuserstatus_.Clear();
}
inline ::google::protobuf::int32 PB_SOLOPLAYER_HEAD::dwuserstatus(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLOPLAYER_HEAD.dwUserStatus)
    return dwuserstatus_.Get(index);
}
inline void PB_SOLOPLAYER_HEAD::set_dwuserstatus(int index, ::google::protobuf::int32 value)
{
    dwuserstatus_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_SOLOPLAYER_HEAD.dwUserStatus)
}
inline void PB_SOLOPLAYER_HEAD::add_dwuserstatus(::google::protobuf::int32 value)
{
    dwuserstatus_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_SOLOPLAYER_HEAD.dwUserStatus)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_SOLOPLAYER_HEAD::dwuserstatus() const
{
    // @@protoc_insertion_point(field_list:game.PB_SOLOPLAYER_HEAD.dwUserStatus)
    return dwuserstatus_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_SOLOPLAYER_HEAD::mutable_dwuserstatus()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_SOLOPLAYER_HEAD.dwUserStatus)
    return &dwuserstatus_;
}

// -------------------------------------------------------------------

// PB_SOLO_PLAYER

// optional sint32 nUserID = 1;
inline bool PB_SOLO_PLAYER::has_nuserid() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nuserid()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void PB_SOLO_PLAYER::clear_has_nuserid()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void PB_SOLO_PLAYER::clear_nuserid()
{
    nuserid_ = 0;
    clear_has_nuserid();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nuserid() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nUserID)
    return nuserid_;
}
inline void PB_SOLO_PLAYER::set_nuserid(::google::protobuf::int32 value)
{
    set_has_nuserid();
    nuserid_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nUserID)
}

// optional sint32 nUserType = 2;
inline bool PB_SOLO_PLAYER::has_nusertype() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nusertype()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void PB_SOLO_PLAYER::clear_has_nusertype()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void PB_SOLO_PLAYER::clear_nusertype()
{
    nusertype_ = 0;
    clear_has_nusertype();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nusertype() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nUserType)
    return nusertype_;
}
inline void PB_SOLO_PLAYER::set_nusertype(::google::protobuf::int32 value)
{
    set_has_nusertype();
    nusertype_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nUserType)
}

// optional sint32 nStatus = 3;
inline bool PB_SOLO_PLAYER::has_nstatus() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nstatus()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void PB_SOLO_PLAYER::clear_has_nstatus()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void PB_SOLO_PLAYER::clear_nstatus()
{
    nstatus_ = 0;
    clear_has_nstatus();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nstatus() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nStatus)
    return nstatus_;
}
inline void PB_SOLO_PLAYER::set_nstatus(::google::protobuf::int32 value)
{
    set_has_nstatus();
    nstatus_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nStatus)
}

// optional sint32 nTableNO = 4;
inline bool PB_SOLO_PLAYER::has_ntableno() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_ntableno()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void PB_SOLO_PLAYER::clear_has_ntableno()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void PB_SOLO_PLAYER::clear_ntableno()
{
    ntableno_ = 0;
    clear_has_ntableno();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::ntableno() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nTableNO)
    return ntableno_;
}
inline void PB_SOLO_PLAYER::set_ntableno(::google::protobuf::int32 value)
{
    set_has_ntableno();
    ntableno_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nTableNO)
}

// optional sint32 nChairNO = 5;
inline bool PB_SOLO_PLAYER::has_nchairno() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nchairno()
{
    _has_bits_[0] |= 0x00000040u;
}
inline void PB_SOLO_PLAYER::clear_has_nchairno()
{
    _has_bits_[0] &= ~0x00000040u;
}
inline void PB_SOLO_PLAYER::clear_nchairno()
{
    nchairno_ = 0;
    clear_has_nchairno();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nchairno() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nChairNO)
    return nchairno_;
}
inline void PB_SOLO_PLAYER::set_nchairno(::google::protobuf::int32 value)
{
    set_has_nchairno();
    nchairno_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nChairNO)
}

// optional sint32 nNickSex = 6;
inline bool PB_SOLO_PLAYER::has_nnicksex() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nnicksex()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void PB_SOLO_PLAYER::clear_has_nnicksex()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void PB_SOLO_PLAYER::clear_nnicksex()
{
    nnicksex_ = 0;
    clear_has_nnicksex();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nnicksex() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nNickSex)
    return nnicksex_;
}
inline void PB_SOLO_PLAYER::set_nnicksex(::google::protobuf::int32 value)
{
    set_has_nnicksex();
    nnicksex_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nNickSex)
}

// optional sint32 nPortrait = 7;
inline bool PB_SOLO_PLAYER::has_nportrait() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nportrait()
{
    _has_bits_[0] |= 0x00000100u;
}
inline void PB_SOLO_PLAYER::clear_has_nportrait()
{
    _has_bits_[0] &= ~0x00000100u;
}
inline void PB_SOLO_PLAYER::clear_nportrait()
{
    nportrait_ = 0;
    clear_has_nportrait();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nportrait() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nPortrait)
    return nportrait_;
}
inline void PB_SOLO_PLAYER::set_nportrait(::google::protobuf::int32 value)
{
    set_has_nportrait();
    nportrait_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nPortrait)
}

// optional sint32 nNetSpeed = 8;
inline bool PB_SOLO_PLAYER::has_nnetspeed() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nnetspeed()
{
    _has_bits_[0] |= 0x00000200u;
}
inline void PB_SOLO_PLAYER::clear_has_nnetspeed()
{
    _has_bits_[0] &= ~0x00000200u;
}
inline void PB_SOLO_PLAYER::clear_nnetspeed()
{
    nnetspeed_ = 0;
    clear_has_nnetspeed();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nnetspeed() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nNetSpeed)
    return nnetspeed_;
}
inline void PB_SOLO_PLAYER::set_nnetspeed(::google::protobuf::int32 value)
{
    set_has_nnetspeed();
    nnetspeed_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nNetSpeed)
}

// optional sint32 nClothingID = 9;
inline bool PB_SOLO_PLAYER::has_nclothingid() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nclothingid()
{
    _has_bits_[0] |= 0x00000400u;
}
inline void PB_SOLO_PLAYER::clear_has_nclothingid()
{
    _has_bits_[0] &= ~0x00000400u;
}
inline void PB_SOLO_PLAYER::clear_nclothingid()
{
    nclothingid_ = 0;
    clear_has_nclothingid();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nclothingid() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nClothingID)
    return nclothingid_;
}
inline void PB_SOLO_PLAYER::set_nclothingid(::google::protobuf::int32 value)
{
    set_has_nclothingid();
    nclothingid_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nClothingID)
}

// optional sint32 nDeposit = 10;
inline bool PB_SOLO_PLAYER::has_ndeposit() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_ndeposit()
{
    _has_bits_[0] |= 0x00000800u;
}
inline void PB_SOLO_PLAYER::clear_has_ndeposit()
{
    _has_bits_[0] &= ~0x00000800u;
}
inline void PB_SOLO_PLAYER::clear_ndeposit()
{
    ndeposit_ = 0;
    clear_has_ndeposit();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::ndeposit() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nDeposit)
    return ndeposit_;
}
inline void PB_SOLO_PLAYER::set_ndeposit(::google::protobuf::int32 value)
{
    set_has_ndeposit();
    ndeposit_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nDeposit)
}

// optional sint32 nPlayerLevel = 11;
inline bool PB_SOLO_PLAYER::has_nplayerlevel() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nplayerlevel()
{
    _has_bits_[0] |= 0x00001000u;
}
inline void PB_SOLO_PLAYER::clear_has_nplayerlevel()
{
    _has_bits_[0] &= ~0x00001000u;
}
inline void PB_SOLO_PLAYER::clear_nplayerlevel()
{
    nplayerlevel_ = 0;
    clear_has_nplayerlevel();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nplayerlevel() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nPlayerLevel)
    return nplayerlevel_;
}
inline void PB_SOLO_PLAYER::set_nplayerlevel(::google::protobuf::int32 value)
{
    set_has_nplayerlevel();
    nplayerlevel_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nPlayerLevel)
}

// optional sint32 nScore = 12;
inline bool PB_SOLO_PLAYER::has_nscore() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nscore()
{
    _has_bits_[0] |= 0x00002000u;
}
inline void PB_SOLO_PLAYER::clear_has_nscore()
{
    _has_bits_[0] &= ~0x00002000u;
}
inline void PB_SOLO_PLAYER::clear_nscore()
{
    nscore_ = 0;
    clear_has_nscore();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nscore() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nScore)
    return nscore_;
}
inline void PB_SOLO_PLAYER::set_nscore(::google::protobuf::int32 value)
{
    set_has_nscore();
    nscore_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nScore)
}

// optional sint32 nBreakOff = 13;
inline bool PB_SOLO_PLAYER::has_nbreakoff() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nbreakoff()
{
    _has_bits_[0] |= 0x00004000u;
}
inline void PB_SOLO_PLAYER::clear_has_nbreakoff()
{
    _has_bits_[0] &= ~0x00004000u;
}
inline void PB_SOLO_PLAYER::clear_nbreakoff()
{
    nbreakoff_ = 0;
    clear_has_nbreakoff();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nbreakoff() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nBreakOff)
    return nbreakoff_;
}
inline void PB_SOLO_PLAYER::set_nbreakoff(::google::protobuf::int32 value)
{
    set_has_nbreakoff();
    nbreakoff_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nBreakOff)
}

// optional sint32 nWin = 14;
inline bool PB_SOLO_PLAYER::has_nwin() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nwin()
{
    _has_bits_[0] |= 0x00008000u;
}
inline void PB_SOLO_PLAYER::clear_has_nwin()
{
    _has_bits_[0] &= ~0x00008000u;
}
inline void PB_SOLO_PLAYER::clear_nwin()
{
    nwin_ = 0;
    clear_has_nwin();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nwin() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nWin)
    return nwin_;
}
inline void PB_SOLO_PLAYER::set_nwin(::google::protobuf::int32 value)
{
    set_has_nwin();
    nwin_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nWin)
}

// optional sint32 nLoss = 15;
inline bool PB_SOLO_PLAYER::has_nloss() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nloss()
{
    _has_bits_[0] |= 0x00010000u;
}
inline void PB_SOLO_PLAYER::clear_has_nloss()
{
    _has_bits_[0] &= ~0x00010000u;
}
inline void PB_SOLO_PLAYER::clear_nloss()
{
    nloss_ = 0;
    clear_has_nloss();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nloss() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nLoss)
    return nloss_;
}
inline void PB_SOLO_PLAYER::set_nloss(::google::protobuf::int32 value)
{
    set_has_nloss();
    nloss_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nLoss)
}

// optional sint32 nStandOff = 16;
inline bool PB_SOLO_PLAYER::has_nstandoff() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nstandoff()
{
    _has_bits_[0] |= 0x00020000u;
}
inline void PB_SOLO_PLAYER::clear_has_nstandoff()
{
    _has_bits_[0] &= ~0x00020000u;
}
inline void PB_SOLO_PLAYER::clear_nstandoff()
{
    nstandoff_ = 0;
    clear_has_nstandoff();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nstandoff() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nStandOff)
    return nstandoff_;
}
inline void PB_SOLO_PLAYER::set_nstandoff(::google::protobuf::int32 value)
{
    set_has_nstandoff();
    nstandoff_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nStandOff)
}

// optional sint32 nBout = 17;
inline bool PB_SOLO_PLAYER::has_nbout() const
{
    return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_nbout()
{
    _has_bits_[0] |= 0x00040000u;
}
inline void PB_SOLO_PLAYER::clear_has_nbout()
{
    _has_bits_[0] &= ~0x00040000u;
}
inline void PB_SOLO_PLAYER::clear_nbout()
{
    nbout_ = 0;
    clear_has_nbout();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::nbout() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nBout)
    return nbout_;
}
inline void PB_SOLO_PLAYER::set_nbout(::google::protobuf::int32 value)
{
    set_has_nbout();
    nbout_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nBout)
}

// optional sint32 nTimeCost = 18;
inline bool PB_SOLO_PLAYER::has_ntimecost() const
{
    return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_ntimecost()
{
    _has_bits_[0] |= 0x00080000u;
}
inline void PB_SOLO_PLAYER::clear_has_ntimecost()
{
    _has_bits_[0] &= ~0x00080000u;
}
inline void PB_SOLO_PLAYER::clear_ntimecost()
{
    ntimecost_ = 0;
    clear_has_ntimecost();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::ntimecost() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.nTimeCost)
    return ntimecost_;
}
inline void PB_SOLO_PLAYER::set_ntimecost(::google::protobuf::int32 value)
{
    set_has_ntimecost();
    ntimecost_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.nTimeCost)
}

// optional sint32 bRefuse = 19;
inline bool PB_SOLO_PLAYER::has_brefuse() const
{
    return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_brefuse()
{
    _has_bits_[0] |= 0x00100000u;
}
inline void PB_SOLO_PLAYER::clear_has_brefuse()
{
    _has_bits_[0] &= ~0x00100000u;
}
inline void PB_SOLO_PLAYER::clear_brefuse()
{
    brefuse_ = 0;
    clear_has_brefuse();
}
inline ::google::protobuf::int32 PB_SOLO_PLAYER::brefuse() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.bRefuse)
    return brefuse_;
}
inline void PB_SOLO_PLAYER::set_brefuse(::google::protobuf::int32 value)
{
    set_has_brefuse();
    brefuse_ = value;
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.bRefuse)
}

// optional string szUsername = 20;
inline bool PB_SOLO_PLAYER::has_szusername() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_szusername()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PB_SOLO_PLAYER::clear_has_szusername()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PB_SOLO_PLAYER::clear_szusername()
{
    szusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_szusername();
}
inline const ::std::string& PB_SOLO_PLAYER::szusername() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.szUsername)
    return szusername_.GetNoArena();
}
inline void PB_SOLO_PLAYER::set_szusername(const ::std::string& value)
{
    set_has_szusername();
    szusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.szUsername)
}
#if LANG_CXX11
inline void PB_SOLO_PLAYER::set_szusername(::std::string&& value)
{
    set_has_szusername();
    szusername_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:game.PB_SOLO_PLAYER.szUsername)
}
#endif
inline void PB_SOLO_PLAYER::set_szusername(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_szusername();
    szusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:game.PB_SOLO_PLAYER.szUsername)
}
inline void PB_SOLO_PLAYER::set_szusername(const char* value, size_t size)
{
    set_has_szusername();
    szusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:game.PB_SOLO_PLAYER.szUsername)
}
inline ::std::string* PB_SOLO_PLAYER::mutable_szusername()
{
    set_has_szusername();
    // @@protoc_insertion_point(field_mutable:game.PB_SOLO_PLAYER.szUsername)
    return szusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PB_SOLO_PLAYER::release_szusername()
{
    // @@protoc_insertion_point(field_release:game.PB_SOLO_PLAYER.szUsername)
    clear_has_szusername();
    return szusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PB_SOLO_PLAYER::set_allocated_szusername(::std::string* szusername)
{
    if (szusername != NULL)
    {
        set_has_szusername();
    }
    else
    {
        clear_has_szusername();
    }
    szusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szusername);
    // @@protoc_insertion_point(field_set_allocated:game.PB_SOLO_PLAYER.szUsername)
}

// optional string szNickName = 21;
inline bool PB_SOLO_PLAYER::has_sznickname() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_SOLO_PLAYER::set_has_sznickname()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PB_SOLO_PLAYER::clear_has_sznickname()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PB_SOLO_PLAYER::clear_sznickname()
{
    sznickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_sznickname();
}
inline const ::std::string& PB_SOLO_PLAYER::sznickname() const
{
    // @@protoc_insertion_point(field_get:game.PB_SOLO_PLAYER.szNickName)
    return sznickname_.GetNoArena();
}
inline void PB_SOLO_PLAYER::set_sznickname(const ::std::string& value)
{
    set_has_sznickname();
    sznickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:game.PB_SOLO_PLAYER.szNickName)
}
#if LANG_CXX11
inline void PB_SOLO_PLAYER::set_sznickname(::std::string&& value)
{
    set_has_sznickname();
    sznickname_.SetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:game.PB_SOLO_PLAYER.szNickName)
}
#endif
inline void PB_SOLO_PLAYER::set_sznickname(const char* value)
{
    GOOGLE_DCHECK(value != NULL);
    set_has_sznickname();
    sznickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:game.PB_SOLO_PLAYER.szNickName)
}
inline void PB_SOLO_PLAYER::set_sznickname(const char* value, size_t size)
{
    set_has_sznickname();
    sznickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:game.PB_SOLO_PLAYER.szNickName)
}
inline ::std::string* PB_SOLO_PLAYER::mutable_sznickname()
{
    set_has_sznickname();
    // @@protoc_insertion_point(field_mutable:game.PB_SOLO_PLAYER.szNickName)
    return sznickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PB_SOLO_PLAYER::release_sznickname()
{
    // @@protoc_insertion_point(field_release:game.PB_SOLO_PLAYER.szNickName)
    clear_has_sznickname();
    return sznickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PB_SOLO_PLAYER::set_allocated_sznickname(::std::string* sznickname)
{
    if (sznickname != NULL)
    {
        set_has_sznickname();
    }
    else
    {
        clear_has_sznickname();
    }
    sznickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sznickname);
    // @@protoc_insertion_point(field_set_allocated:game.PB_SOLO_PLAYER.szNickName)
}

// -------------------------------------------------------------------

// PB_CARDSLAY

// repeated sint32 cardsLay = 1;
inline int PB_CARDSLAY::cardslay_size() const
{
    return cardslay_.size();
}
inline void PB_CARDSLAY::clear_cardslay()
{
    cardslay_.Clear();
}
inline ::google::protobuf::int32 PB_CARDSLAY::cardslay(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_CARDSLAY.cardsLay)
    return cardslay_.Get(index);
}
inline void PB_CARDSLAY::set_cardslay(int index, ::google::protobuf::int32 value)
{
    cardslay_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_CARDSLAY.cardsLay)
}
inline void PB_CARDSLAY::add_cardslay(::google::protobuf::int32 value)
{
    cardslay_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_CARDSLAY.cardsLay)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_CARDSLAY::cardslay() const
{
    // @@protoc_insertion_point(field_list:game.PB_CARDSLAY.cardsLay)
    return cardslay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_CARDSLAY::mutable_cardslay()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_CARDSLAY.cardsLay)
    return &cardslay_;
}

// -------------------------------------------------------------------

// PB_CARD_TING_DETAIL

// optional int32 dwflags = 1;
inline bool PB_CARD_TING_DETAIL::has_dwflags() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_CARD_TING_DETAIL::set_has_dwflags()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PB_CARD_TING_DETAIL::clear_has_dwflags()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PB_CARD_TING_DETAIL::clear_dwflags()
{
    dwflags_ = 0;
    clear_has_dwflags();
}
inline ::google::protobuf::int32 PB_CARD_TING_DETAIL::dwflags() const
{
    // @@protoc_insertion_point(field_get:game.PB_CARD_TING_DETAIL.dwflags)
    return dwflags_;
}
inline void PB_CARD_TING_DETAIL::set_dwflags(::google::protobuf::int32 value)
{
    set_has_dwflags();
    dwflags_ = value;
    // @@protoc_insertion_point(field_set:game.PB_CARD_TING_DETAIL.dwflags)
}

// optional sint32 nChairNO = 2;
inline bool PB_CARD_TING_DETAIL::has_nchairno() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_CARD_TING_DETAIL::set_has_nchairno()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PB_CARD_TING_DETAIL::clear_has_nchairno()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PB_CARD_TING_DETAIL::clear_nchairno()
{
    nchairno_ = 0;
    clear_has_nchairno();
}
inline ::google::protobuf::int32 PB_CARD_TING_DETAIL::nchairno() const
{
    // @@protoc_insertion_point(field_get:game.PB_CARD_TING_DETAIL.nChairNO)
    return nchairno_;
}
inline void PB_CARD_TING_DETAIL::set_nchairno(::google::protobuf::int32 value)
{
    set_has_nchairno();
    nchairno_ = value;
    // @@protoc_insertion_point(field_set:game.PB_CARD_TING_DETAIL.nChairNO)
}

// repeated sint32 nThrowCardsTing = 3;
inline int PB_CARD_TING_DETAIL::nthrowcardsting_size() const
{
    return nthrowcardsting_.size();
}
inline void PB_CARD_TING_DETAIL::clear_nthrowcardsting()
{
    nthrowcardsting_.Clear();
}
inline ::google::protobuf::int32 PB_CARD_TING_DETAIL::nthrowcardsting(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_CARD_TING_DETAIL.nThrowCardsTing)
    return nthrowcardsting_.Get(index);
}
inline void PB_CARD_TING_DETAIL::set_nthrowcardsting(int index, ::google::protobuf::int32 value)
{
    nthrowcardsting_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_CARD_TING_DETAIL.nThrowCardsTing)
}
inline void PB_CARD_TING_DETAIL::add_nthrowcardsting(::google::protobuf::int32 value)
{
    nthrowcardsting_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_CARD_TING_DETAIL.nThrowCardsTing)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_CARD_TING_DETAIL::nthrowcardsting() const
{
    // @@protoc_insertion_point(field_list:game.PB_CARD_TING_DETAIL.nThrowCardsTing)
    return nthrowcardsting_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_CARD_TING_DETAIL::mutable_nthrowcardsting()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_CARD_TING_DETAIL.nThrowCardsTing)
    return &nthrowcardsting_;
}

// repeated .game.PB_CARDSLAY nThrowCardsTingLays = 4;
inline int PB_CARD_TING_DETAIL::nthrowcardstinglays_size() const
{
    return nthrowcardstinglays_.size();
}
inline void PB_CARD_TING_DETAIL::clear_nthrowcardstinglays()
{
    nthrowcardstinglays_.Clear();
}
inline const ::game::PB_CARDSLAY& PB_CARD_TING_DETAIL::nthrowcardstinglays(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_CARD_TING_DETAIL.nThrowCardsTingLays)
    return nthrowcardstinglays_.Get(index);
}
inline ::game::PB_CARDSLAY* PB_CARD_TING_DETAIL::mutable_nthrowcardstinglays(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_CARD_TING_DETAIL.nThrowCardsTingLays)
    return nthrowcardstinglays_.Mutable(index);
}
inline ::game::PB_CARDSLAY* PB_CARD_TING_DETAIL::add_nthrowcardstinglays()
{
    // @@protoc_insertion_point(field_add:game.PB_CARD_TING_DETAIL.nThrowCardsTingLays)
    return nthrowcardstinglays_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_CARDSLAY >*
PB_CARD_TING_DETAIL::mutable_nthrowcardstinglays()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_CARD_TING_DETAIL.nThrowCardsTingLays)
    return &nthrowcardstinglays_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDSLAY >&
PB_CARD_TING_DETAIL::nthrowcardstinglays() const
{
    // @@protoc_insertion_point(field_list:game.PB_CARD_TING_DETAIL.nThrowCardsTingLays)
    return nthrowcardstinglays_;
}

// repeated .game.PB_CARDSLAY nThrowCardsTingRemain = 5;
inline int PB_CARD_TING_DETAIL::nthrowcardstingremain_size() const
{
    return nthrowcardstingremain_.size();
}
inline void PB_CARD_TING_DETAIL::clear_nthrowcardstingremain()
{
    nthrowcardstingremain_.Clear();
}
inline const ::game::PB_CARDSLAY& PB_CARD_TING_DETAIL::nthrowcardstingremain(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_CARD_TING_DETAIL.nThrowCardsTingRemain)
    return nthrowcardstingremain_.Get(index);
}
inline ::game::PB_CARDSLAY* PB_CARD_TING_DETAIL::mutable_nthrowcardstingremain(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_CARD_TING_DETAIL.nThrowCardsTingRemain)
    return nthrowcardstingremain_.Mutable(index);
}
inline ::game::PB_CARDSLAY* PB_CARD_TING_DETAIL::add_nthrowcardstingremain()
{
    // @@protoc_insertion_point(field_add:game.PB_CARD_TING_DETAIL.nThrowCardsTingRemain)
    return nthrowcardstingremain_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_CARDSLAY >*
PB_CARD_TING_DETAIL::mutable_nthrowcardstingremain()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_CARD_TING_DETAIL.nThrowCardsTingRemain)
    return &nthrowcardstingremain_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_CARDSLAY >&
PB_CARD_TING_DETAIL::nthrowcardstingremain() const
{
    // @@protoc_insertion_point(field_list:game.PB_CARD_TING_DETAIL.nThrowCardsTingRemain)
    return nthrowcardstingremain_;
}

// -------------------------------------------------------------------

// PB_GAME_RETREAT_TABLE_INFO

// optional .game.PB_SOLOPLAYER_HEAD solo_player_head = 1;
inline bool PB_GAME_RETREAT_TABLE_INFO::has_solo_player_head() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_GAME_RETREAT_TABLE_INFO::set_has_solo_player_head()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PB_GAME_RETREAT_TABLE_INFO::clear_has_solo_player_head()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PB_GAME_RETREAT_TABLE_INFO::clear_solo_player_head()
{
    if (solo_player_head_ != NULL)
    {
        solo_player_head_->Clear();
    }
    clear_has_solo_player_head();
}
inline const ::game::PB_SOLOPLAYER_HEAD& PB_GAME_RETREAT_TABLE_INFO::solo_player_head() const
{
    const ::game::PB_SOLOPLAYER_HEAD* p = solo_player_head_;
    // @@protoc_insertion_point(field_get:game.PB_GAME_RETREAT_TABLE_INFO.solo_player_head)
    return p != NULL ? *p : *reinterpret_cast<const ::game::PB_SOLOPLAYER_HEAD*>(
            &::game::_PB_SOLOPLAYER_HEAD_default_instance_);
}
inline ::game::PB_SOLOPLAYER_HEAD* PB_GAME_RETREAT_TABLE_INFO::release_solo_player_head()
{
    // @@protoc_insertion_point(field_release:game.PB_GAME_RETREAT_TABLE_INFO.solo_player_head)
    clear_has_solo_player_head();
    ::game::PB_SOLOPLAYER_HEAD* temp = solo_player_head_;
    solo_player_head_ = NULL;
    return temp;
}
inline ::game::PB_SOLOPLAYER_HEAD* PB_GAME_RETREAT_TABLE_INFO::mutable_solo_player_head()
{
    set_has_solo_player_head();
    if (solo_player_head_ == NULL)
    {
        solo_player_head_ = new ::game::PB_SOLOPLAYER_HEAD;
    }
    // @@protoc_insertion_point(field_mutable:game.PB_GAME_RETREAT_TABLE_INFO.solo_player_head)
    return solo_player_head_;
}
inline void PB_GAME_RETREAT_TABLE_INFO::set_allocated_solo_player_head(::game::PB_SOLOPLAYER_HEAD* solo_player_head)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete solo_player_head_;
    }
    if (solo_player_head)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            solo_player_head = ::google::protobuf::internal::GetOwnedMessage(
                    message_arena, solo_player_head, submessage_arena);
        }
        set_has_solo_player_head();
    }
    else
    {
        clear_has_solo_player_head();
    }
    solo_player_head_ = solo_player_head;
    // @@protoc_insertion_point(field_set_allocated:game.PB_GAME_RETREAT_TABLE_INFO.solo_player_head)
}

// repeated .game.PB_SOLO_PLAYER solo_player = 2;
inline int PB_GAME_RETREAT_TABLE_INFO::solo_player_size() const
{
    return solo_player_.size();
}
inline void PB_GAME_RETREAT_TABLE_INFO::clear_solo_player()
{
    solo_player_.Clear();
}
inline const ::game::PB_SOLO_PLAYER& PB_GAME_RETREAT_TABLE_INFO::solo_player(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_GAME_RETREAT_TABLE_INFO.solo_player)
    return solo_player_.Get(index);
}
inline ::game::PB_SOLO_PLAYER* PB_GAME_RETREAT_TABLE_INFO::mutable_solo_player(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_GAME_RETREAT_TABLE_INFO.solo_player)
    return solo_player_.Mutable(index);
}
inline ::game::PB_SOLO_PLAYER* PB_GAME_RETREAT_TABLE_INFO::add_solo_player()
{
    // @@protoc_insertion_point(field_add:game.PB_GAME_RETREAT_TABLE_INFO.solo_player)
    return solo_player_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_SOLO_PLAYER >*
PB_GAME_RETREAT_TABLE_INFO::mutable_solo_player()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_GAME_RETREAT_TABLE_INFO.solo_player)
    return &solo_player_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_SOLO_PLAYER >&
PB_GAME_RETREAT_TABLE_INFO::solo_player() const
{
    // @@protoc_insertion_point(field_list:game.PB_GAME_RETREAT_TABLE_INFO.solo_player)
    return solo_player_;
}

// optional .game.PB_GAME_TABLE_INFO tableinfo = 3;
inline bool PB_GAME_RETREAT_TABLE_INFO::has_tableinfo() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_GAME_RETREAT_TABLE_INFO::set_has_tableinfo()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PB_GAME_RETREAT_TABLE_INFO::clear_has_tableinfo()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PB_GAME_RETREAT_TABLE_INFO::clear_tableinfo()
{
    if (tableinfo_ != NULL)
    {
        tableinfo_->Clear();
    }
    clear_has_tableinfo();
}
inline const ::game::PB_GAME_TABLE_INFO& PB_GAME_RETREAT_TABLE_INFO::tableinfo() const
{
    const ::game::PB_GAME_TABLE_INFO* p = tableinfo_;
    // @@protoc_insertion_point(field_get:game.PB_GAME_RETREAT_TABLE_INFO.tableinfo)
    return p != NULL ? *p : *reinterpret_cast<const ::game::PB_GAME_TABLE_INFO*>(
            &::game::_PB_GAME_TABLE_INFO_default_instance_);
}
inline ::game::PB_GAME_TABLE_INFO* PB_GAME_RETREAT_TABLE_INFO::release_tableinfo()
{
    // @@protoc_insertion_point(field_release:game.PB_GAME_RETREAT_TABLE_INFO.tableinfo)
    clear_has_tableinfo();
    ::game::PB_GAME_TABLE_INFO* temp = tableinfo_;
    tableinfo_ = NULL;
    return temp;
}
inline ::game::PB_GAME_TABLE_INFO* PB_GAME_RETREAT_TABLE_INFO::mutable_tableinfo()
{
    set_has_tableinfo();
    if (tableinfo_ == NULL)
    {
        tableinfo_ = new ::game::PB_GAME_TABLE_INFO;
    }
    // @@protoc_insertion_point(field_mutable:game.PB_GAME_RETREAT_TABLE_INFO.tableinfo)
    return tableinfo_;
}
inline void PB_GAME_RETREAT_TABLE_INFO::set_allocated_tableinfo(::game::PB_GAME_TABLE_INFO* tableinfo)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete tableinfo_;
    }
    if (tableinfo)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            tableinfo = ::google::protobuf::internal::GetOwnedMessage(
                    message_arena, tableinfo, submessage_arena);
        }
        set_has_tableinfo();
    }
    else
    {
        clear_has_tableinfo();
    }
    tableinfo_ = tableinfo;
    // @@protoc_insertion_point(field_set_allocated:game.PB_GAME_RETREAT_TABLE_INFO.tableinfo)
}

// -------------------------------------------------------------------

// PB_NTF_SOMEONE_BUHUA

// repeated .game.PB_INT_CHAIR nHuaCards = 1;
inline int PB_NTF_SOMEONE_BUHUA::nhuacards_size() const
{
    return nhuacards_.size();
}
inline void PB_NTF_SOMEONE_BUHUA::clear_nhuacards()
{
    nhuacards_.Clear();
}
inline const ::game::PB_INT_CHAIR& PB_NTF_SOMEONE_BUHUA::nhuacards(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_NTF_SOMEONE_BUHUA.nHuaCards)
    return nhuacards_.Get(index);
}
inline ::game::PB_INT_CHAIR* PB_NTF_SOMEONE_BUHUA::mutable_nhuacards(int index)
{
    // @@protoc_insertion_point(field_mutable:game.PB_NTF_SOMEONE_BUHUA.nHuaCards)
    return nhuacards_.Mutable(index);
}
inline ::game::PB_INT_CHAIR* PB_NTF_SOMEONE_BUHUA::add_nhuacards()
{
    // @@protoc_insertion_point(field_add:game.PB_NTF_SOMEONE_BUHUA.nHuaCards)
    return nhuacards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >*
PB_NTF_SOMEONE_BUHUA::mutable_nhuacards()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_NTF_SOMEONE_BUHUA.nHuaCards)
    return &nhuacards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::PB_INT_CHAIR >&
PB_NTF_SOMEONE_BUHUA::nhuacards() const
{
    // @@protoc_insertion_point(field_list:game.PB_NTF_SOMEONE_BUHUA.nHuaCards)
    return nhuacards_;
}

// repeated sint32 nHuaCount = 2;
inline int PB_NTF_SOMEONE_BUHUA::nhuacount_size() const
{
    return nhuacount_.size();
}
inline void PB_NTF_SOMEONE_BUHUA::clear_nhuacount()
{
    nhuacount_.Clear();
}
inline ::google::protobuf::int32 PB_NTF_SOMEONE_BUHUA::nhuacount(int index) const
{
    // @@protoc_insertion_point(field_get:game.PB_NTF_SOMEONE_BUHUA.nHuaCount)
    return nhuacount_.Get(index);
}
inline void PB_NTF_SOMEONE_BUHUA::set_nhuacount(int index, ::google::protobuf::int32 value)
{
    nhuacount_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.PB_NTF_SOMEONE_BUHUA.nHuaCount)
}
inline void PB_NTF_SOMEONE_BUHUA::add_nhuacount(::google::protobuf::int32 value)
{
    nhuacount_.Add(value);
    // @@protoc_insertion_point(field_add:game.PB_NTF_SOMEONE_BUHUA.nHuaCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_NTF_SOMEONE_BUHUA::nhuacount() const
{
    // @@protoc_insertion_point(field_list:game.PB_NTF_SOMEONE_BUHUA.nHuaCount)
    return nhuacount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_NTF_SOMEONE_BUHUA::mutable_nhuacount()
{
    // @@protoc_insertion_point(field_mutable_list:game.PB_NTF_SOMEONE_BUHUA.nHuaCount)
    return &nhuacount_;
}

// -------------------------------------------------------------------

// QueryFlauntInfo

// optional sint32 nUserID = 1;
inline bool QueryFlauntInfo::has_nuserid() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFlauntInfo::set_has_nuserid()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void QueryFlauntInfo::clear_has_nuserid()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFlauntInfo::clear_nuserid()
{
    nuserid_ = 0;
    clear_has_nuserid();
}
inline ::google::protobuf::int32 QueryFlauntInfo::nuserid() const
{
    // @@protoc_insertion_point(field_get:game.QueryFlauntInfo.nUserID)
    return nuserid_;
}
inline void QueryFlauntInfo::set_nuserid(::google::protobuf::int32 value)
{
    set_has_nuserid();
    nuserid_ = value;
    // @@protoc_insertion_point(field_set:game.QueryFlauntInfo.nUserID)
}

// optional sint32 nRepeatWinBout = 2;
inline bool QueryFlauntInfo::has_nrepeatwinbout() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFlauntInfo::set_has_nrepeatwinbout()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void QueryFlauntInfo::clear_has_nrepeatwinbout()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFlauntInfo::clear_nrepeatwinbout()
{
    nrepeatwinbout_ = 0;
    clear_has_nrepeatwinbout();
}
inline ::google::protobuf::int32 QueryFlauntInfo::nrepeatwinbout() const
{
    // @@protoc_insertion_point(field_get:game.QueryFlauntInfo.nRepeatWinBout)
    return nrepeatwinbout_;
}
inline void QueryFlauntInfo::set_nrepeatwinbout(::google::protobuf::int32 value)
{
    set_has_nrepeatwinbout();
    nrepeatwinbout_ = value;
    // @@protoc_insertion_point(field_set:game.QueryFlauntInfo.nRepeatWinBout)
}

// optional sint32 nRepeatLoseBout = 3;
inline bool QueryFlauntInfo::has_nrepeatlosebout() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryFlauntInfo::set_has_nrepeatlosebout()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void QueryFlauntInfo::clear_has_nrepeatlosebout()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void QueryFlauntInfo::clear_nrepeatlosebout()
{
    nrepeatlosebout_ = 0;
    clear_has_nrepeatlosebout();
}
inline ::google::protobuf::int32 QueryFlauntInfo::nrepeatlosebout() const
{
    // @@protoc_insertion_point(field_get:game.QueryFlauntInfo.nRepeatLoseBout)
    return nrepeatlosebout_;
}
inline void QueryFlauntInfo::set_nrepeatlosebout(::google::protobuf::int32 value)
{
    set_has_nrepeatlosebout();
    nrepeatlosebout_ = value;
    // @@protoc_insertion_point(field_set:game.QueryFlauntInfo.nRepeatLoseBout)
}

// repeated sint32 nReserved = 4;
inline int QueryFlauntInfo::nreserved_size() const
{
    return nreserved_.size();
}
inline void QueryFlauntInfo::clear_nreserved()
{
    nreserved_.Clear();
}
inline ::google::protobuf::int32 QueryFlauntInfo::nreserved(int index) const
{
    // @@protoc_insertion_point(field_get:game.QueryFlauntInfo.nReserved)
    return nreserved_.Get(index);
}
inline void QueryFlauntInfo::set_nreserved(int index, ::google::protobuf::int32 value)
{
    nreserved_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.QueryFlauntInfo.nReserved)
}
inline void QueryFlauntInfo::add_nreserved(::google::protobuf::int32 value)
{
    nreserved_.Add(value);
    // @@protoc_insertion_point(field_add:game.QueryFlauntInfo.nReserved)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryFlauntInfo::nreserved() const
{
    // @@protoc_insertion_point(field_list:game.QueryFlauntInfo.nReserved)
    return nreserved_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryFlauntInfo::mutable_nreserved()
{
    // @@protoc_insertion_point(field_mutable_list:game.QueryFlauntInfo.nReserved)
    return &nreserved_;
}

// -------------------------------------------------------------------

// UpdateFlauntBout

// optional sint32 nUserID = 1;
inline bool UpdateFlauntBout::has_nuserid() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateFlauntBout::set_has_nuserid()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void UpdateFlauntBout::clear_has_nuserid()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateFlauntBout::clear_nuserid()
{
    nuserid_ = 0;
    clear_has_nuserid();
}
inline ::google::protobuf::int32 UpdateFlauntBout::nuserid() const
{
    // @@protoc_insertion_point(field_get:game.UpdateFlauntBout.nUserID)
    return nuserid_;
}
inline void UpdateFlauntBout::set_nuserid(::google::protobuf::int32 value)
{
    set_has_nuserid();
    nuserid_ = value;
    // @@protoc_insertion_point(field_set:game.UpdateFlauntBout.nUserID)
}

// optional sint32 bWin = 2;
inline bool UpdateFlauntBout::has_bwin() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateFlauntBout::set_has_bwin()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void UpdateFlauntBout::clear_has_bwin()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateFlauntBout::clear_bwin()
{
    bwin_ = 0;
    clear_has_bwin();
}
inline ::google::protobuf::int32 UpdateFlauntBout::bwin() const
{
    // @@protoc_insertion_point(field_get:game.UpdateFlauntBout.bWin)
    return bwin_;
}
inline void UpdateFlauntBout::set_bwin(::google::protobuf::int32 value)
{
    set_has_bwin();
    bwin_ = value;
    // @@protoc_insertion_point(field_set:game.UpdateFlauntBout.bWin)
}

// repeated sint32 nReserved = 3;
inline int UpdateFlauntBout::nreserved_size() const
{
    return nreserved_.size();
}
inline void UpdateFlauntBout::clear_nreserved()
{
    nreserved_.Clear();
}
inline ::google::protobuf::int32 UpdateFlauntBout::nreserved(int index) const
{
    // @@protoc_insertion_point(field_get:game.UpdateFlauntBout.nReserved)
    return nreserved_.Get(index);
}
inline void UpdateFlauntBout::set_nreserved(int index, ::google::protobuf::int32 value)
{
    nreserved_.Set(index, value);
    // @@protoc_insertion_point(field_set:game.UpdateFlauntBout.nReserved)
}
inline void UpdateFlauntBout::add_nreserved(::google::protobuf::int32 value)
{
    nreserved_.Add(value);
    // @@protoc_insertion_point(field_add:game.UpdateFlauntBout.nReserved)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UpdateFlauntBout::nreserved() const
{
    // @@protoc_insertion_point(field_list:game.UpdateFlauntBout.nReserved)
    return nreserved_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UpdateFlauntBout::mutable_nreserved()
{
    // @@protoc_insertion_point(field_mutable_list:game.UpdateFlauntBout.nReserved)
    return &nreserved_;
}

#ifdef __GNUC__
    #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_2eproto__INCLUDED
